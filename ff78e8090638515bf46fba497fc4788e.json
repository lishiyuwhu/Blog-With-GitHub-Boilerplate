{"posts": [{"title": "\u6807\u9898", "date": "2021-02-04T16:50:00-00.00", "path": "/archives/SLUG_test/", "text": "\u6d4b\u8bd5\nimage-20210204164530910\n", "categories": [{"name": "AAA", "slug": "AAA", "permalink": "/category/AAA/"}], "tags": [{"name": "BBB", "slug": "BBB", "permalink": "/tag/BBB/"}]}, {"title": "torch.upsample\u8f6cONNX\u7684\u95ee\u9898", "date": "2020-10-16T21:51:00-00.00", "path": "/archives/torch.upsample\u8f6cONNX\u7684\u95ee\u9898/", "text": "\u95ee\u9898\n\u8f6c\u6362nn.Upsample\u5230onnx\u518d\u5230TNN\u7684\u65f6\u5019\u603b\u4f1a\u51fa\u4e9b\u95ee\u9898\n\nThis operator might cause results to not match the expected results by PyTorch.\nONNX's Upsample/Resize operator did not match Pytorch's Interpolation until opset 11. Attributes to determine how to transform the input were added in onnx:Resize in opset 11 to support Pytorch's behavior (like coordinate_transformation_mode and nearest_mode).\nWe recommend using opset 11 and above for models using this operator.\n\u6838\u5fc3\u539f\u56e0\u662f\u7248\u672c\u9700\u8981\u5bf9\u5e94,\n\u4f7f\u7528torch1.4+\u6700\u65b0onnx, opset_version=11\u53ef\u4ee5\u652f\u6301\u4f7f\u7528\u6700\u90bb\u8fd1\u63d2\u503c.\n# Upsampling\n# \u4f7f\u7528\u6700\u90bb\u8fd1\u4e0a\u91c7\u6837+\u5377\u79ef\u5b9e\u73b0\nmodel += [\n  nn.Upsample(scale_factor=2, mode=&#39;nearest&#39;),\n  nn.Conv2d(dim_lst[1 + n_residual_blocks], dim_lst[2 + n_residual_blocks], 3,\n            padding=1, bias=True),\n  nn.InstanceNorm2d(dim_lst[2 + n_residual_blocks]),\n  nn.ReLU(inplace=True)]\n\n\u5373\u53ef\u76f4\u63a5\u8f6c\u6362, \u4e0d\u7528\u76f4\u63a5\u663e\u5f0f\u4f7f\u7528F.interpolate, \u4e0d\u9700\u8981\u6307\u660esize, \u4f7f\u7528scale_factor\u5373\u53ef\n\u8f6c\u6362\u811a\u672c\nbrew install libomp \u6ce8\u610fMac\u4e0a\u7684openmp\u53ef\u80fd\u51fa\u95ee\u9898, \u8981\u591a\u52a0\u4e00\u884cos.environ['KMP_DUPLICATE_LIB_OK']='True'\nimport os\nimport numpy as np\nos.environ[&#39;KMP_DUPLICATE_LIB_OK&#39;]=&#39;True&#39;\n\ntorch.onnx.export(net.module,\n                  dummy_input,\n                  &#39;tmp.onnx&#39;,\n                  input_names=[&#39;data&#39;],\n                  output_names=[&#39;output&#39;],\n                  opset_version=11,\n                  verbose=True)\n\nos.system(&#39;python -m onnxsim tmp.onnx %s&#39; % onnx_path)\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "pytorch\u7684dataloader\u8f93\u51fa\u5927\u5c0f\u4e0d\u4e00\u6837\u7684batch", "date": "2020-10-14T21:31:00-00.00", "path": "/archives/pytorch\u7684dataloader\u8f93\u51fa\u5927\u5c0f\u4e0d\u4e00\u6837\u7684batch/", "text": "pytorch\u7684dataloader\u8f93\u51fa\u5927\u5c0f\u4e0d\u4e00\u6837\u7684batch\n\u95ee\u9898\u51fa\u73b0\nclass MYDATASET(Dataset):\n    def __init__(self, soft_data_dir, transforms_=None):\n                ***************************\n\n    def __getitem__(self, index):\n                **********************\n        return {&#39;A_256&#39;: item_A, &#39;B_256&#39;: item_B, &#39;A_512&#39;: item_A_512, &#39;B_512&#39;: item_B_512}\n\n    def __len__(self):\n        return len(self.files_A)\n\n\u671f\u671b\u8fd4\u56de\u7684dict\u4e2d, 256\u4ee3\u8868256*256\u5927\u5c0f\u7684\u56fe\u7247, dict\u4e2d\u542b\u6709\u4e24\u79cd\u5927\u5c0f\u7684\u8f93\u51fa, \u5728\u4f7f\u7528\u65f6\nfor i, batch in enumerate(dataloader):\n  # Set model input\n  real_A_256 = Variable(input_source_256.copy_(batch[&#39;A_256&#39;]))\n  real_B_512 = Variable(input_target_512.copy_(batch[&#39;B_512&#39;]))\n\n\u82e5batchsize=1\u6216\u8005num_workers&gt;1\u7684\u60c5\u51b5\u4e0b\u4f1a\u62a5\u9519RuntimeError: invalid argument 0: Sizes of tensors must match except in dimension 0.\n\u8fd9\u662f\u56e0\u4e3adataloader\u5728\u628adataset\u7684__getitem__\u8f93\u51fa\u62fc\u5408\u6210batch\u7684\u65f6\u5019\u65e0\u6cd5\u5904\u7406dict\u8fd9\u79cd\u6570\u636e\n\u89e3\u51b3\u65b9\u6cd5 -&gt;  collate_fn\nDataLoader\u53ef\u4ee5\u914d\u7f6ecollate_fn\u53c2\u6570, \u7528\u4e8e\u62fc\u5408\u5404\u4e2a\u6837\u672c. \u62a5\u9519\u4e5f\u6b63\u662f\u9ed8\u8ba4\u7684default_collate\u51fd\u6570\u4e2dtorch.stack(batch, 0, out=out)\u90e8\u5206\u51fa\u9519\nfrom torch.utils.data import DataLoader\nimport torch\n\ntransforms_ = [transforms.ToTensor(),\n               transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]  # (0,1) -&gt; (-1,1)\n\nclass TmpSET(Dataset):\n  def __init__(self, transforms_=None):\n    self.img = Image.open(&#39;./dlrb.jpeg&#39;)\n    self.transform = transforms.Compose(transforms_)\n\n    def __getitem__(self, index):\n      img_A = self.img.resize((512, 512), Image.BILINEAR)\n      img_B = self.img.resize((256, 256), Image.BILINEAR)\n      item_A = self.transform(img_A)\n      item_B = self.transform(img_B)\n      return [item_A, item_A, item_B, item_B]\n    # return {&#39;A_256&#39;: item_A, &#39;B_256&#39;: item_B, &#39;A_512&#39;: item_A, &#39;B_512&#39;: item_B}\n\n    def __len__(self):\n      return 100\n\n    def my_collate_fn(batch):\n      A_256, B_256, A_512, B_512 = zip(*batch)\n      return [torch.stack(A_256, 0), torch.stack(B_256, 0), torch.stack(A_512, 0), torch.stack(B_512, 0)]\n\n\n    dataloader = DataLoader(TmpSET(transforms_=transforms_),\n                            batch_size=10, shuffle=True, drop_last=True, num_workers=4, collate_fn=my_collate_fn)\n\n\n    for i, batch in enumerate(dataloader):\n      print(batch[0].shape)\n      # print(batch[1].shape)\n      # print(batch[2].shape)\n      # print(batch[3].shape)\n      break\n\n########################################################################\ntorch.Size([10, 3, 512, 512])\ntorch.Size([10, 3, 512, 512])\ntorch.Size([10, 3, 256, 256])\ntorch.Size([10, 3, 256, 256])\n########################################################################\n\n\u8fd9\u6837, \u7b80\u5355\u7684\u5728my_collate_fn\u4e2d\u628alist\u62c6\u5f00\u624b\u52a8\u4f7f\u7528torch.stack\u5408\u5e76\u5404\u9879, \u5c31\u53ef\u4ee5\u6b63\u786e\u5f97\u5230\u5404\u4e2anchw\u7684batch\u6570\u636e\u4e86\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u89e3\u51b3_csv.Error line contains NULL byte", "date": "2019-09-28T21:01:00-00.00", "path": "/archives/\u89e3\u51b3_csv.Error line contains NULL byte/", "text": "fi = open(&#39;dev.tsv&#39;, &#39;rb&#39;)\ndata = fi.read()\nfi.close()\nfo = open(&#39;dev&#39;, &#39;wb&#39;)\nfo.write(data.replace(b&#39;\\x00&#39;, b&#39;&#39;))\nfo.close()\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u7f16\u8bd1tf_serving", "date": "2019-09-22T15:48:00-00.00", "path": "/archives/\u7f16\u8bd1tf_serving/", "text": "\u3010\u8e29\u5751\u5b9e\u5f55\u3011TensorFlow Serving \u5b89\u88c5\u603b\u7ed3\nhttps://zhuanlan.zhihu.com/p/55108743\nTENSORFLOW-SERVING-GPU \u672c\u5730\u7f16\u8bd1\u5e76\u4f7f\u7528\nhttps://www.cnblogs.com/YouXiangLiThon/p/8295499.html\n\n\u5b89\u88c5\u4f9d\u8d56\n```shell script\n   40  java -version\n   41  pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U\n   42  pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple\n   43  man epel\n   44  yum -y install freetype-devel libpng12-devel zip zlib-devel giflib-devel zeromq3-devel\n   45  gcc -version\n   46  gcc --version\n   47  pip install numpy\n   48  sudo yum -y install freetype-devel libpng12-devel zip zlib-devel giflib-devel zeromq3-devel\n   49  pip install grpcio_tools mock grpcio\n   50  pip install keras_applications,keras_preprocessing,h5py\n   51  pip install keras_applications\n   52  pip install keras_preprocessing\n   53  pip install h5py\n   54  sudo yum -y install libev libev-devel zlib zlib-devel openssl openssl-devel\n   55  ls\n   56  wget https://github.com/bazelbuild/bazel/releases/download/0.19.2/bazel-0.19.2-installer-linux-x86_64.sh\n   57  rz\n   58  ls\n   59  chmod +x bazel-0.19.2-installer-linux-x86_64.sh\n   60  ./bazel-0.19.2-installer-linux-x86_64.sh\n\n\n&gt;\u8fd9\u91cc\u9009\u62e9bazel0.19.2\u7248\u672c\uff0c\u5728GitHub issue\u4e0a\u63d0\u51fa\uff0c0.19.2\u548c0.18.x\u7248\u672c\u5bf9import StringIO\u8fd9\u4e2apython2\u7279\u6709\u7684\u5305\u505a\u7684\u5904\u7406\u6bd4\u8f83\u597d\uff0c\u4e0d\u4f1a\u51fa\u73b0\u201cImportError: No module named 'StringIO'\u201d\u8fd9\u6837\u7684\u9519\u8bef\u3002\n\n\u7136\u540egit clone tf 1.11\n\n```shell script\ngit clone -b r1.11 --recurse-submodules https://github.com/tensorflow/serving\n\ncd serving\nmv tools/bazel.rc ./.bazelrc\n\u7136\u540e\u5f00\u59cb\u7f16\u8bd1\n\u6ce8\u610fpython\u8def\u5f84, \u5168\u90e8\u624b\u5de5\u6307\u5b9a\n```shell script\nbazel build -c opt --verbose_failures --action_env PYTHON_BIN_PATH=/data0/shanqi/anaconda3/bin/python --action_env PYTHON_LIB_PATH=/data0/shanqi/anaconda3/lib/python3.7/site-packages --define PYTHON_BIN_PATH=/data0/shanqi/anaconda3/bin/python --define PYTHON_LIB_PATH=/data0/shanqi/anaconda3/lib/python3.7/site-packages  --python_path=/data0/shanqi/anaconda3/bin/python --force_python=py3 --host_force_python=py3 --define with_jemalloc=true --define with_gcp_support=true tensorflow_serving/...\n\n\n\n\u62a5\u9519\n```shell script\nERROR: /data0/shanqi/.cache/bazel/_bazel_shanqi/68bcdaae61708a14b8d3d517b634806f/external/org_tensorflow/tensorflow/python/BUILD:3768:1: Linking of rule '@org_tensorflow//tensorflow/python:_pywrap_tensorflow_internal.so' failed (Exit 1): gcc failed: error executing command\n  (cd /data0/shanqi/.cache/bazel/_bazel_shanqi/68bcdaae61708a14b8d3d517b634806f/execroot/tf_serving &amp;&amp; \\\n  exec env - \\\n    PATH=/usr/local/lib/bazel/bin:/usr/local/bin:/data0/shanqi/anaconda3/bin:/data0/shanqi/anaconda3/condabin:/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/puppetlabs/bin:/root/bin \\\n    PWD=/proc/self/cwd \\\n  /bin/gcc -shared -o bazel-out/host/bin/external/org_tensorflow/tensorflow/python/_pywrap_tensorflow_internal.so -Wl,--version-script bazel-out/host/bin/external/org_tensorflow/tensorflow/python/pywrap_tensorflow_internal_versionscript.lds '-Wl,-rpath,$ORIGIN/,-rpath,$ORIGIN/..' -Wl,-soname,_pywrap_tensorflow_internal.so -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread -pthread '-fuse-ld=gold' -Wl,-no-as-needed -Wl,-z,relro,-z,now -B/bin -B/usr/bin -pass-exit-codes -Wl,--gc-sections -Wl,-S -Wl,@bazel-out/host/bin/external/org_tensorflow/tensorflow/python/_pywrap_tensorflow_internal.so-2.params)\n/bin/ld.gold: error: bazel-out/host/bin/external/org_tensorflow/tensorflow/core/kernels/_objs/dynamic_stitch_op/dynamic_stitch_op.pic.o: file is empty\n/bin/ld.gold: error: bazel-out/host/bin/external/boringssl/_objs/crypto/cpu-arm.pic.o: file is empty\n/bin/ld.gold: error: bazel-out/host/bin/external/jpeg/_objs/jpeg/jdapistd.pic.o: file is empty\ncollect2: error: ld returned 1 exit status\nINFO: Elapsed time: 19682.787s, Critical Path: 2014.75s, Remote (0.00% of the time): [queue: 0.00%, setup: 0.00%, process: 0.00%]\nINFO: 7791 processes: 7791 local.\nFAILED: Build did NOT complete successfully\n\u7b2c\u4e00\u6b21\u7f16\u8bd1\u65f6\u52a0\u4e86local_resources,  \u7f16\u8bd1\u4e866\u4e2a\u5c0f\u65f6\u7136\u540e\u6700\u540e\u62a5\u9519\u4e86. \u67e5\u8be2\u77e5\u9053\u53ef\u80fd\u662f\u8d44\u6e90\u4e0d\u8db3,\u53bb\u6389\n--local_resources \n\u76f8\u5173\u9009\u9879.\u540c\u65f6\u5b89\u88c5\u4e86\u4e00\u4e0btensoflow(1.14)\n\u4e4b\u540e\u91cd\u65b0\u5f00\u59cb\u7f16\u8bd1, \u7b2c\u4e8c\u6b21\u5c31\u5f88\u5feb\u4e86\n```shell script\nINFO: Elapsed time: 117.158s, Critical Path: 45.59s, Remote (0.00% of the time): [queue: 0.00%, setup: 0.00%, process: 0.00%]\nINFO: 2595 processes: 2595 local.\nINFO: Build completed successfully, 3224 total actions\n\n\n\n\u5c31\u5f97\u5230\u4e86```bazel-bin/tensorflow_serving/model_servers/tensorflow_model_server\n\u9a8c\u8bc1\u5f97\u5230\u7684tensorflow_model_server\n\u751f\u6210\u81ea\u5e26\u7684\u6d4b\u8bd5mnist\u6a21\u578b\n```shell script\npython tensorflow_serving/example/mnist_saved_model.py models/mnist\n\n\n\u5f00\u670d\u52a1\n```shell script\nbazel-bin/tensorflow_serving/model_servers/tensorflow_model_server --port=8042 --model_name=mnist --model_base_path=/data0/shanqi/workspace/tfserving/serving/models/mnist\nclient\u7aef\u8981\u5148\u88c5tfserving\n```shell script\npip install tensorflow-serving-api\npython tensorflow_serving/example/mnist_client.py --num_tests=1000 --server=127.0.0.1:8042\n\n\n\u8fd0\u884c\u4e4b\u540e, \u8bf4\u660e\u7f16\u8bd1\u6210\u529f\nInference error rate: 10.4%\n```\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "HQL \u62a5\u9519 Hive Runtime Error while closing operators", "date": "2019-09-04T21:39:00-00.00", "path": "/archives/HQL \u62a5\u9519 Hive Runtime Error while closing operators/", "text": "\u591a\u4e2a  select * from table group by key \u76f8\u4e92join\u65f6, \u4f1a\u62a5\n\n[2019-09-04 21:36:48] Caused by: java.lang.RuntimeException: Hive Runtime Error while closing operators: org.apache.hadoop.hive.ql.metadata.HiveException: org.apache.hadoop.hive.ql.metadata.HiveException: java.lang.RuntimeException: org.apache.hadoop.hive.ql.metadata.HiveException: Hive Runtime Error while processing row (tag=1) {\"key\":{\"_col0\":\"\u73e0\u5b9d\u9ec4\u91d1\",\"_col1\":{0:{\"_col0\":\"URL\"}}},\"value\":null}\n[2019-09-04 21:36:48]   at org.apache.hadoop.hive.ql.exec.tez.ReduceRecordProcessor.close(ReduceRecordProcessor.java:328)\n[2019-09-04 21:36:48]   at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.initializeAndRunProcessor(TezProcessor.java:164)\n[2019-09-04 21:36:48]   ... 14 more\n[2019-09-04 21:36:48] Caused by: org.apache.hadoop.hive.ql.metadata.HiveException: org.apache.hadoop.hive.ql.metadata.HiveException: org.apache.hadoop.hive.ql.metadata.HiveException: java.lang.RuntimeException: org.apache.hadoop.hive.ql.metadata.HiveException: Hive Runtime Error while processing row (tag=1) {\"key\":{\"_col0\":\"\u73e0\u5b9d\u9ec4\u91d1\",\"_col1\":{0:{\"_col0\":\"URL\"}}},\"value\":null}\n[2019-09-04 21:36:48]   at org.apache.hadoop.hive.ql.exec.GroupByOperator.closeOp(GroupByOperator.java:1102)\n[2019-09-04 21:36:48]   at org.apache.hadoop.hive.ql.exec.Operator.close(Operator.java:622)\n[2019-09-04 21:36:48]   at org.apache.hadoop.hive.ql.exec.tez.ReduceRecordProcessor.close(ReduceRecordProcessor.java:304)\n[2019-09-04 21:36:48]   ... 15 more\n\u7c7b\u4f3c\u7684\u9519\u8bef\n\u89e3\u51b3\u65b9\u6cd5\u4e0d\u7528tez\u6362\u7528mr, \u52a0\u4e0a\nset hive.execution.engine=mr;\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u7b80\u5355\u5b9e\u7528\u7684python CLICK", "date": "2019-08-29T21:37:00-00.00", "path": "/archives/\u7b80\u5355\u5b9e\u7528\u7684python CLICK/", "text": "click\u662f\u4e00\u4e2a\u5c06python\u811a\u672c\u8f6c\u4e3a\u547d\u4ee4\u884c\u4f7f\u7528\u7684\u5305.\n\u7c7b\u4f3c\u4e8e Argparse  tf.FLAGS\n\u4f7f\u7528\u975e\u5e38\u7b80\u5355, import\u4e4b\u540e, \u4f7f\u7528@click.command()\u4ee5\u88c5\u9970\u5668\u7684\u5f62\u5f0f\u9644\u5728\u60f3\u8981\u4f7f\u7528\u7684\u51fd\u6570\u4e0a\n\u7136\u540e\u4f7f\u7528@click.option()\u6dfb\u52a0\u914d\u7f6e\u4fe1\u606f, \u6700\u5e38\u7528\u7684\u5c31\u662f@click.option('--count', default=1, help='Number of greetings.')\u8fd9\u79cd\u5f62\u5f0f\nimport click\n\n@click.command()\n@click.option(&#39;--count&#39;, default=1, help=&#39;Number of greetings.&#39;)\n@click.option(&#39;--name&#39;, prompt=&#39;Your name&#39;,\n              help=&#39;The person to greet.&#39;)\ndef hello(count, name):\n    &quot;&quot;&quot;Simple program that greets NAME for a total of COUNT times.&quot;&quot;&quot;\n    for x in range(count):\n        click.echo(&#39;Hello %s!&#39; % name)\n\nif __name__ == &#39;__main__&#39;:\n    hello()\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": ".sh\u65e0\u6cd5\u6267\u884cNo such file or directory", "date": "2019-08-20T20:50:42-00.00", "path": "/archives/.sh\u65e0\u6cd5\u6267\u884cNo such file or directory/", "text": "\u6267\u884c.sh\u62a5\u9519No such file or directory\n\n\n\u9996\u5148\u7ed9\u6743\u9650 chmod u+x filename\n\u7136\u540evim\u91cc\u9762\u770b:set ff  , \u8fd4\u56de\u7684fileformat\u662f\u4e0d\u662funix\n\u4e0d\u662f\u7684\u8bdd:set ff=unix\u8bbe\u7f6e\u4e3aunix\u5c31\u80fd\u591f\u6267\u884c\u4e86\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u9b54\u5973 BLOG \u521d\u4e2d\u7d1a\u65e5\u9ebb\u8b1b\u5ea7 \u7b14\u8bb0", "date": "2019-02-28T14:35:00-00.00", "path": "/archives/\u9b54\u5973 BLOG \u521d\u4e2d\u7d1a\u65e5\u9ebb\u8b1b\u5ea7 \u7b14\u8bb0/", "text": "\u9488\u5bf9\u81ea\u5df1\u6253\u724c\u7684\u4e00\u4e9b\u4e0d\u826f\u4e60\u60ef\u7684\u8bb0\u5f55\n\n\n\n\u914d\u724c\u4e0d\u4f73\u7684\u60c5\u51b5\u4e0b,\u5f79\u724c\u591a\u7559\u4e00\u4e0b\n4445 \u5f62\u7684\u642d\u5b50\u5728\u65e9\u5de1\u4ef7\u503c\u4e0d\u5927\n\u6709\u6548\u724c\u91cd\u590d\u7684\u642d\u5b50\u8981\u6ce8\u610f\n\u5e38\u89c1\u590d\u5408\u642d\u5b50\n\n\u5169\\\u4e09\u9593\u642d\u5169\\\u4e09\u9593\u642d\u6307\u7684\u662f\u985e\u4f3c 468, \u6216 2468 \u7b49\u9023\u7e8c\u5361\u7abf\u7684\u724c\u5f62.\u4e0d\u5c11\u521d\u5b78\u8005\u90fd\u6703\u89ba\u5f97\u5361\u7abf\u662f\u60e1\u5f62, \u4e0d\u592a\u559c\u6b61\u6b64\u7b49\u724c\u5f62. \u4e0d\u904e\u6211\u5011\u8981\u7559\u610f: \u4e00\u500b246 \u7684\u5169\u9593\u642d, \u8ddf\u4e00\u500b\u5169\u9762\u642d\u7684\u5165\u7ae0\u724c\u6578\u662f\u4e00\u6a23\u7684, \u5206\u5225\u662f\u524d\u8005\u8981 3 \u96bb\u724c, \u5f8c\u8005\u53ea\u9700\u5169\u96bb, \u524d\u8005\u7684\u6548\u7387\u7a0d\u4f4e.\u96d6\u7136\u5b83\u7a31\u4e0d\u4e0a\u662f\u597d\u724c\u5f62, \u4e0d\u904e\u5728\u5e8f\u76e4\u642d\u5b50\u4ecd\u4e0d\u5920\u6642, \u5169\u9593\u642d\u4ecd\u7136\u662f\u5f88\u6709\u7528.\n3556 \u5f6235+56 \u7684\u5169\u642d, \u8868\u9762\u8ddf\u4e0a\u6b21\u8ac7\u904e\u7684 35+67 \u5f62\u5dee\u4e0d\u591a, \u5be6\u969b\u4e0a\u76f8\u53bb\u751a\u9060. \u539f\u56e0\u662f35,56 \u5c31\u72af\u4e86\u6709\u6548\u724c\u91cd\u8986\u7684\u6bdb\u75c5. \u5728\u9019\u60c5\u6cc1\u4e4b\u4e0b, 35 \u642d\u7684\u50f9\u683c\u5f88\u4f4e, \u5982\u679c\u5df2\u7d93\u5920\u642d, 35 \u5dee\u4e0d\u591a\u6703\u662f\u6700\u65e9\u88ab\u6253\u7684\u4e00\u7d44. \u5269\u4e0b 56, \u6216 556 \u5c31\u5df2\u7d93\u5920\u4e86.\n5566 \u5f62\u5927\u5bb6\u53ef\u80fd\u4ee5\u70ba 5566 \u662f\u5169\u9762, \u53c8\u6709\u6a5f\u6703\u6210\u4e00\u76c3\u53e3. \u4f46\u5728\u6211\u5fc3\u76ee\u4e2d, \u5b83\u662f\u4e00\u500b\u5f88\u5dee\u7684\u5f62\u614b. 5566 \u662f\u4e00\u500b\u5b8c\u5b8c\u5168\u5168\u7684\u6709\u653e\u724c\u91cd\u8986, \u6c42\u5169\u6b21 47 \u8868\u9762\u4e0a\u5f88\u5bb9\u6613, \u4f46\u7576\u5728\u6709\u5176\u4ed6\u66f4\u597d\u7684\u642d\u5b50\u6642, \u9019\u500b\u5fc5\u7136\u6703\u5148\u88ab\u8655\u7406.\n\n\n\u4e0d\u5b9c\u904e\u65e9\u78ba\u5b9a\u96c0\u982d\n\u4e00\u526f\u724c\u6700\u591a\u53ea\u9700\u8981\u5169\u500b\u5c0d\u5b50, \u7b2c\u4e09\u500b\u6216\u4ee5\u5f8c\u5c0d\u5b50\u6548\u80fd\u662f\u5341\u5206\u4f4e.\n\u7acb\u76f4\u81ea\u6478\u4e03\u5c0d\u88e1 2 \u7684\u8df3\u6eff, \u662f\u4e00\u526f\u5982\u4f55\u5dee\u7684\u724c\u90fd\u6709\u6a5f\u6703\u5b8c\u6210\u7684\u5f79\u7a2e. \u7576\u4f60\u5df2\u7d93\u7121\u8def\u53ef\u8d70\u6642, \u4e03\u5c0d\u5b50\u5f88\u591a\u6642\u90fd\u6703\u8b8a\u6210\u4f60\u7684\u5e0c\u671b.\n\u7b4b\u724c\u9632\u5b88\u65f6, \u6ce8\u610f\u4e0d\u8981\u8003\u8651\u786e\u5b9a\u5bf9\u5bf9\u7684\u90a3\u4e00\u5bb6\u7684\u7b4b\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "ssh\u5230win\u7684powershell \u7684\u4e00\u5806\u5751", "date": "2018-12-20T14:09:00-00.00", "path": "/archives/ssh\u5230win\u7684powershell \u7684\u4e00\u5806\u5751/", "text": "\u8bb0\u5f55\u4e00\u4e9b\u5751\nserver\u662f\u4e00\u53f0win10\u7684gpu\u673a\u5668, \u8981ssh\u8fc7\u53bb\u505a\u4e1c\u897f\u800c\u4e0d\u5f71\u54cd\u673a\u4e3b.\nclient\u4e5f\u662fwin10\n\npowershell \u6ca1\u6cd5\u4f7f\u7528conda\u7684activate\n\n\nhttps://stackoverflow.com/questions/47800794/how-to-activate-different-anaconda-environment-from-powershell\nconda install -n root -c pscondaenvs pscondaenvs\n\u7136\u800c\u5e76\u6ca1\u5375\u7528\nconda \u53f7\u79f04.6\u7248\u672c\u4fee\u6b63\u4e86\u8fd9\u4e2a\u95ee\u9898, \u4f7f\u7528conda install -c conda-canary conda\u5b89\u88c5\u6d4b\u8bd5\u7248\n\u7136\u5e76\u5375\n\u89e3\u51b3:\n\u5148\u5728cmd\u91cc\u9762 activate\u4e4b\u540e\u518d\u8fdbpowershell\n\ncurses \u9519\u8bef\n\n\u8001\u95ee\u9898\u4e86, win\u4e0d\u652f\u6301\u81ea\u5e26\u7684curses.\n\u624b\u5de5\u88c5whl\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/#curses\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u89e3\u51b3tmux\u4e0e\u4f7f\u7528cmder ssh\u540e\u7684\u51b2\u7a81\u95ee\u9898", "date": "2018-12-20T13:48:00-00.00", "path": "/archives/\u89e3\u51b3tmux\u4e0e\u4f7f\u7528cmder ssh\u540e\u7684\u51b2\u7a81\u95ee\u9898/", "text": "\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u633a\u4e45\u4e86, cmder\u4e2dssh\u5230\u522b\u7684\u673a\u5668\u4e4b\u540e\u5f00\u542ftmux, \u4f1a\u6709\u4e00\u5927\u5806\u7684\u6392\u7248\u9519\u8bef.\n\u89e3\u51b3\u529e\u6cd5:\n(\u8981\u5148\u5f00\u542fWSL)\nbash \u540e\u518d\u53bbssh, \u901a\u8fc7WSL\u53bbssh\u5b57\u8282\u7f13\u51b2\u5c31\u662f\u6b63\u5e38\u7684\u4e86.\n\n\u5565\u65f6\u5019powershell\u4e5f\u80fd\u6709\u4e2a\u7c7b\u4f3ctmux\u7684\u4e1c\u897f. \u73b0\u5728\u5148ssh\u5230\u4e2alinux\u4e0a, \u5f00tmux, \u518d\u4e00\u4e2a\u4e2a\u7a97\u53e3ssh\u5230windows\u673a\u5668, \u7b80\u76f4\u591a\u6b64\u4e00\u4e3e\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "ssh\u8fde\u63a5windows", "date": "2018-12-10T13:29:00-00.00", "path": "/archives/ssh\u8fde\u63a5windows/", "text": "\u9700\u6c42\n\u8fde\u63a5\u522b\u4eba\u7684win10\u673a\u5668, \u8dd1\u6a21\u578b.\n1. WSL\u7684ssh\n\u672c\u6765\u633a\u597d, \u4f46\u662fWSL\u4e0d\u8ba4GPU, pass\n\n\n2. Powershell Server\nFree\u7248\u662f\u53ea\u652f\u6301\u5355\u4eba\u8fde\u63a5,\u51d1\u5408\u7528\u5427\n\n\u4e0b\u8f7d\u5b89\u88c5powershell server\u8f6f\u4ef6\n\u8bbe\u7f6e\u597dport, \u9ed8\u8ba422, client\u7684Public key, \u4ee5\u53caOther\u91cc\u9762\u7684Text encoding\u4e3ahz-gb-2312\n\u9632\u706b\u5899\u6253\u5f00\u5bf9\u5e94\u7aef\u53e3  powershell\u7ba1\u7406\u5458, \u8fd0\u884cNew-NetFirewallRule -Protocol TCP -LocalPort 22 -Direction Inbound -Action Allow -DisplayName SSH\n\n\u7136\u540e\u5c31client ssh\u8fc7\u53bb\u5c31\u53ef\u4ee5, \u4f46\u662f\u6709\u4e00\u4e9b\u4e1c\u897f\u5728powershell\u4e0b\u9762\u6ca1\u6cd5\u7528, vim\u8fd8\u8981\u6302\u8f7d\n3. \u8d70 Jupyter lab\n\u6211\u4e4b\u524d\u5b9e\u4e60\u7684\u65f6\u5019, \u5f00\u53d1\u673a\u8981\u8d70\u5821\u5792\u673a\u6240\u4ee5sftp\u4e0d\u80fd\u7528, \u5c31\u4e00\u76f4\u5728\u7528Jupyter lab. \u5c40\u57df\u7f51\u5185\u76f4\u63a5\u5f00\u5c31\u597d\u4e86, \u5176\u4ed6\u7684\u8fd8\u8981\u70b9\u64cd\u4f5c\n\n\u914d\u7f6e\u597dpowershell server, \u786e\u4fdd\u80fdssh\u8fc7\u53bb\njupyter notebook password  \u8bbe\u7f6ejupyter lab\u5bc6\u7801. \u672c\u5730\u6d4f\u89c8\u5668\u8fc7remote session\u8981\u5bc6\u7801\nserver\u4e0a\u628ajupyter lab\u5f00\u8d77\u6765jupyter lab --port=9000 --no-browser\nssh \u8fc7\u53bb, \u628a\u8fdc\u7a0b\u7aef\u53e3\u6620\u5c04\u4e3alocalhost\u7684\u7aef\u53e3 ssh -N -f -L 8888:localhost:9000 1.1.1.1 -p 22\n\u7f51\u9875\u6253\u5f00 localhost.com:8888\n\nhttp://www.blopig.com/blog/2018/03/running-jupyter-notebook-on-a-remote-server-via-ssh/\n4. Pycharm\u7684remote ssh\u89e3\u91ca\u5668\n\u4e4b\u524d\u641e\u8fc7, \u4f46\u6ca1\u6709terminal\u771f\u633a\u9ebb\u70e6, \u8fd8\u8981\u5355\u72ec\u5f00\u4e2a\n==================================\n5. win10\u81ea\u5e26\u7684openssh\nhttps://null-byte.wonderhowto.com/how-to/create-native-ssh-server-your-windows-10-system-0181871/\n\u6309\u7167\u8fd9\u4e2a\u914d\u7f6e, \"Step 4 Install the OpenSSHUtils Helper Module\"\u8df3\u8fc7, \u9047\u89c1\u670d\u52a1\u5f00\u4e0d\u4e86\u7684\u95ee\u9898\u5c31\u624b\u5de5\u53bb\u670d\u52a1\u91cc\u9762\u6253\u5f00\n\u6ce8\u610f sshd\u548cssh-keygen\u8fd9\u4e24\u4e2a\u670d\u52a1\u540d\u5b57\u53d8\u4e86, \u73b0\u5728\u662f\u4ee5OpenSSH\u5f00\u5934\u7684\u4e24\u4e2a\u670d\u52a1.\n\u914d\u7f6e\u5b8c, \u8d70\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\u5c31\u884c, \u7136\u540e\u8fdbpowershell.\n\u8981\u5f00jupyter\u540e, \u7ee7\u7eed\u7aef\u53e3\u6620\u5c04\u5b8c\u4e86\u5c31ok\nssh -N -f -L 8888:localhost:9000 username@server_ip -p 22\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "Growing Story Forest Online from Massive Breaking News", "date": "2018-11-12T09:30:20-00.00", "path": "/archives/Growing Story Forest Online from Massive Breaking News/", "text": "\u4e0a\u5b66\u671f\u505a\u7684\u4e00\u4e2a\u4f5c\u4e1a\n\n\nPPT\n\n\nGrowing Story Forest Online from Massive Breaking News\n\u9488\u5bf9\u6d77\u91cf\u7684\u3001\u8fde\u7eed\u7684\u65b0\u95fb\u6587\u672c\u6570\u636e\uff0c\u8fdb\u884c\u8bdd\u9898\u68c0\u6d4b\u4e0e\u8ddf\u8e2a(TDT), \u76ee\u6807: online\u4e14\u8fc5\u901f\u51c6\u786e\u7684\u5728\u957f\u65f6\u95f4\u6d41\u5185\u62bd\u53d6\u51fa\u72ec\u7acb\u7684event\u4e0etopic\n\u73b0\u6709\u65b9\u6cd5: Event timelines, event threads, event evolution graphs, information maps. \u8fd9\u4e9b\u65b9\u6cd5\u5728\u5e94\u7528\u5230\u6d77\u91cf\u6570\u636e\u65f6\u4f1a\u6709\u5982\u4e0b\u95ee\u9898:\n\n\u96be\u4ee5\u4ee5\u4e00\u4e2a\u5408\u9002\u7684\u7c92\u5ea6\u6765\u62bd\u53d6\u72ec\u7acb\u7684\u4e8b\u4ef6\n\u53ef\u89c6\u5316\u4e0d\u4fbf\u4e8e\u4f7f\u7528\u8005\u7406\u89e3 \n\u4f7f\u7528\u7684\u5747\u4e3aoffline\u7684\u7b97\u6cd5. \u4f46\u6570\u636e\u7684\u6301\u7eed\u6dfb\u52a0\u9700\u8981online\u7684\u7b97\u6cd5\n\n\u4e3a\u6b64, \u63d0\u51fa\u7684Story Forest\u53ef\u4ee5\u5bf9\u5927\u91cf\u957f\u6587\u672c\u805a\u7c7b\u4e3a\u6e05\u6670\u7684event, \u7136\u540e\u5c06\u4e8b\u4ef6\u805a\u7c7b\u4e3astory--\u4e00\u4e2a\u7531\u4e8b\u4ef6\u7ec4\u6210\u7684\u6811. \n\u4ece\u5927\u5230\u5c0f\u7684\u7ed3\u6784\u5c42\u6b21\u662f:topic \u2192 story \u2192 event \u2192 doc\nTHE STORY FOREST SYSTEM\nPreprocessing \u9884\u5904\u7406\n\u8f93\u5165: \u5168\u90e8doc\n\u76ee\u6807: \u62bd\u53d6\u51fa\u6bcf\u4e00\u7bc7doc\u4e2dkeyword\n\u4e3b\u8981\u5206\u4e3a\u4e09\u90e8\u5206:\n\nDocument fltering \u76f4\u63a5\u8fc7\u6ee4\u6389\u5c0f\u4e8e20\u4e2a\u5b57\u7b26\u7684\u6587\u7ae0\nWord segmentation \u8bcd\u5206\u5272. Stanford Chinese Word Segmenter Version 3.6.0\nKeyword extraction \u5173\u952e\u8bcd\u63d0\u53d6. GBDT+LR  \n\n\u5176\u4e2dGBDT+LR\u90e8\u5206, \u91c7\u7528\u7684\u7279\u5f81\u662f\u4e00\u7ec4\u6df7\u5408\u7279\u5f81:\u4f4d\u7f6e\u540d\u79f0\u7b49\u4e09\u4e2a\u8bcd\u7279\u5f81, TF-IDF TextRank\u7b49\u516b\u4e2a\u7ed3\u6784\u7279\u5f81, \u8bad\u7ec3\u597d\u76841000\u7ef4LDA\u4f5c\u4e3a\u8bed\u4e49\u7279\u5f81. \u6570\u636e\u96c6\u91c7\u7528\u624b\u5de5\u6807\u6ce8\u768410000+ doc, \u5305\u542b\u4e8620000+\u5173\u952e\u8bcd. \u5f53\u8f93\u5165\u7ed9gbdt\u7684\u7279\u5f81\u975e\u5e38\u591a\u65f6\uff0cGBDT\u5176\u5b9e\u662f\u65e0\u6cd5\u5145\u5206\u5229\u7528\u6240\u6709\u7279\u5f81\u7684(\u8003\u8651\u6811\u7684\u6df1\u5ea6\u548c\u68f5\u6570), \u4f7f\u7528GBDT+LR\u53ef\u4ee5\u6709\u6548\u4f7f\u7528\u8fd9\u4e9b\u7279\u5f81\nGBDT(Gradient Boost DecisionTree)\u662f\u4e00\u79cd\u5e38\u7528\u7684\u975e\u7ebf\u6027\u6a21\u578b\uff0c\u5b83\u57fa\u4e8e\u96c6\u6210\u5b66\u4e60\u4e2d\u7684boosting\u601d\u60f3\uff0c\u6bcf\u6b21\u8fed\u4ee3\u90fd\u5728\u51cf\u5c11\u6b8b\u5dee\u7684\u68af\u5ea6\u65b9\u5411\u65b0\u5efa\u7acb\u4e00\u9897\u51b3\u7b56\u6811\uff0c\u8fed\u4ee3\u591a\u5c11\u6b21\u5c31\u4f1a\u751f\u6210\u591a\u5c11\u9897\u51b3\u7b56\u6811.GBDT\u7684\u601d\u60f3\u4f7f\u5176\u5177\u6709\u5929\u7136\u4f18\u52bf\u53ef\u4ee5\u53d1\u73b0\u591a\u79cd\u6709\u533a\u5206\u6027\u7684\u7279\u5f81\u4ee5\u53ca\u7279\u5f81\u7ec4\u5408\uff0c\u51b3\u7b56\u6811\u7684\u8def\u5f84\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3aLR\u8f93\u5165\u7279\u5f81\u4f7f\u7528\uff0c\u7701\u53bb\u4e86\u4eba\u5de5\u5bfb\u627e\u7279\u5f81\u3001\u7279\u5f81\u7ec4\u5408\u7684\u6b65\u9aa4.GBDT+LR\u80fd\u5bfb\u627e\u51fa\u6709\u533a\u5206\u6027\u7279\u5f81\uff08raw feature\uff09\u3001\u7279\u5f81\u7ec4\u5408\uff08cross feature\uff09\uff0c\u878d\u5408\u540e\u76f4\u63a5\u901a\u8fc7\u9ed1\u76d2\u5b50\uff08Tree\u6a21\u578bGBDT\uff09\u8fdb\u884c\u7279\u5f81\u7ec4\u5408\u7684\u81ea\u52a8\u53d1\u73b0.\u4ece\u672c\u8d28\u4e0a\u6765\u8bf4\uff0cGBDT \u662f\u53f6\u5b50\u8282\u70b9\u4e4b\u95f4\u7684\u7ebf\u6027\u52a0\u6743\uff0cGBDT + LR \u5219\u662f\u5c06\u53f6\u5b50\u8282\u70b9\u8f6c\u5316\u6210 One-Hot \u7279\u5f81\u540e\u518d\u8fdb\u884c\u5e7f\u4e49\u7ebf\u6027\u52a0\u6743.\n\ndoc\u805a\u7c7b\n\u8f93\u5165: \u5168\u90e8keyword\n\u76ee\u6807: \u751f\u6210\u5173\u952e\u8bcd\u5171\u73b0\u56fe(keyword co-occurrence graph), \u4ee5\u6b64\u751f\u6210\u89c4\u6a21\u8f83\u5c0f\u7684\u5b50\u56fe(sub-graph\n).\n\u9996\u5148, \u6784\u5efa\u4e00\u4e2a\u5927\u7684\u5173\u952e\u8bcd\u5171\u73b0\u56fe. \u56fe\u4e2d\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u662f\u4e00\u4e2aevent, \u4e24\u4e2a\u8282\u70b9\u95f4\u7684\u8fb9\u8981\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6:\n\n\u5171\u73b0\u6b21\u6570&gt;3\n\u51fa\u73b0\u7684\u6761\u4ef6\u6982\u7387$Pr(\\omega _i|\\omega _j)>0.15$, $Pr(\\omega _j|\\omega _i)>0.15$\n\n===\n\u5176\u6b21,\u91c7\u7528\u793e\u533a\u53d1\u73b0(community detection)\u5c06\u7f51\u7edc\u4e2d\u8054\u7cfb\u7d27\u5bc6\u7684\u90e8\u5206\u627e\u51fa\u6765, \u5c06\u5927\u7684\u5173\u952e\u8bcd\u56fe\u5212\u5206\u4e3a\u4e00\u4e2a\u4e2a\u7684\u5173\u952e\u8bcdcommunity, \u751f\u6210\u89c4\u6a21\u8f83\u5c0f\u7684\u5b50\u56fe.\n\u793e\u533a\u53d1\u73b0\uff08Community Detection\uff09\u7b97\u6cd5\u7528\u6765\u53d1\u73b0\u590d\u6742\u7f51\u7edc\u4e2d\u7684\u793e\u533a\u7ed3\u6784\uff0c\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u79cd\u805a\u7c7b\u7b97\u6cd5.\u793e\u533a\u5185\u90e8\u8054\u7cfb\u7a20\u5bc6\uff0c\u800c\u793e\u533a\u4e4b\u95f4\u8054\u7cfb\u7a00\u758f. \u5bf9\u6bcf\u4e00\u6761\u8fb9\u91c7\u7528\u4ecb\u4e2d\u6027\u6253\u5206(betweenness centrality score).\n\n====\n\u8f93\u5165: keyword community\n\u76ee\u6807: \u5c06doc\u805a\u7c7b\u4e3atopic\n\u8ba1\u7b97\u6bcf\u4e00\u4e2adoc\u548ckeyword community\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6. doc\u7279\u5f81\u4f7f\u7528TF-IDF, \u800ckeyword community\u5c06\u5176\u770b\u4f5c\u4e00\u4e2adoc\u4e5f\u4f7f\u7528TF-IDF. \u628adoc\u5f52\u4e3a\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6700\u9ad8\u7684keyword community\u5185, \u4ee5\u6b64\u5c06doc\u6309\u5173\u952e\u8bcd\u805a\u7c7b\u4e3atopic.\n====\nevent\u62bd\u53d6\n\u6700\u540e,  \u5c06\u6bcf\u4e2atopic\u5185\u7684doc\u805a\u7c7b\u4e3a\u7ec6\u7c92\u5ea6\u7684event\n\u8f93\u5165: \u4e00\u4e2atopic\u5185\u7684doc\n\u76ee\u6807: \u5c06doc\u805a\u7c7b\u4e0eevent\n\u8bad\u7ec3\u4e00\u4e2aSVM\u6765\u5224\u65ad\u4e24\u4e2adoc\u662f\u5426\u63cf\u8ff0\u7684\u662f\u540c\u4e00\u4e2aevent. \u91c7\u7528\u4e00\u7cfb\u5217\u7684document-pair features, \u5305\u62ec\u6807\u9898TF-IDF\\TF\u5411\u91cf\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6, \u5185\u5bb9TF-IDF\\TF\u5411\u91cf\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6, doc\u7b2c\u4e00\u53e5\u7684\u76f8\u4f3c\u5ea6\u7b49.\n\u7c7b\u4f3c\u7684\u91c7\u7528\u793e\u533a\u53d1\u73b0\u7b97\u6cd5, \u8282\u70b9\u4e3adoc, \u8fb9\u5b9a\u4e49\u4e3a\u4e0a\u8ff0SVM\u7684\u5224\u65ad\u7ed3\u679c, \u4ea7\u751fdoc\u7684community, \u4ee5\u6b64\u805a\u7c7b\u4e3aevent.\n\u7ecf\u8fc7\u8fd9\u4e00\u6bb5, \u6211\u4eec\u5f97\u5230\u4e86topic   \u2192 story  \u2192 event \u2192 doc\n\u63a5\u4e0b\u6765, \u6765\u5b8c\u6210story\u90e8\u5206.\nGrowing Story Trees Online. \u4eceevent\u6784\u5efastory tree\nIdentifying the related story tree.  event\u805a\u7c7b\u4e3astory\n\u8f93\u5165: \u4e00\u4e2aevent, \u73b0\u6709\u7684Story Forest(\u5176\u4e2d\u5305\u542b\u82e5\u5e72story tree)\n\u76ee\u6807: \u5c06event\u5f52\u5165\u76f8\u5e94\u7684story tree \u6216\u8005 \u65b0\u5efa\u4e00\u4e2a\u65b0\u7684story tree\n\u91c7\u7528\u5173\u952e\u8bcd\u7684\u76f8\u4f3c\u5ea6\u6765\u8861\u91cf. \u5bf9\u4e8e\u67d0\u4e2aevent, \u5176\u4e2d\u5168\u90e8doc\u7684\u5173\u952e\u8bcd\u7ec4\u6210\u7684\u96c6$E$, \u5bf9\u4e8e\u67d0\u4e2astory tree, \u7c7b\u4f3c\u7684\u5173\u952e\u8bcd\u96c6$S_i$, \u7136\u540e\u91c7\u7528Jaccard\u7cfb\u6570$C_i = \\frac{|S_i\\cap E|}{|S_i\\cup E|}$\u4f5c\u4e3a\u8861\u91cf\u4f9d\u636e, \u5c06\u8be5event\u5206\u5165$C_i$\u6700\u5927\u7684story tree. \n\u53ea\u6709$\\forall S_i,$$C_i =0$\u65f6, \u624d\u65b0\u6dfb\u52a0\u4e00\u4e2a story tree.\nUpdating the related story tree.   story tree\u7684\u7ed3\u6784\u6784\u5efa.\nmerge\n\u91cd\u5fc3\u6587\u6863centroid doc. \u4e00\u4e2aevent\u7684\u91cd\u5fc3\u6587\u6863\u662f\u4e0e\u6240\u6709\u6587\u6863\u90fd\u76f8\u8fde\u7684doc\nTe centroid document of an event is simply the concatenation of all the documents in the event.\n\n\u4f7f\u7528\u4e0a\u9762\u7684SVM\u6765\u5224\u65ad\u65b0event\u7684centroid doc\u548c story tree\u5185\u5404\u4e2aevent\u7684centroid doc\u662f\u5426\u76f8\u4f3c. \u76f8\u4f3c\u5373merge\nExtend and Insert\n\u65b0event$E$, \u5bf9\u5e94\u7684story tree$S$, $S$\u5185\u7684\u6bcf\u4e2aevent$E_j$\n\u5b9a\u4e49\u4e00\u4e2aConnectionStrength  $CS(E_j, E) = compatibility(E_j,E) \\times coherence(S\u2192E_j\u2192E) \\times timePenalty(E_j ,E)$\n\u82e5$CS(E_j, E)$\u5c0f\u4e8e\u4e00\u4e2a\u9608\u503c(\u672a\u63d0\u53ca\u5177\u4f53\u6570\u503c), \u5728story tree\u7684\u6839\u8282\u70b9\u4e0aInsert.\n\u5426\u5219\u9009\u53d6\u4f7f\u5f97$CS(E_j, E)$\u6700\u5927\u7684$E_j$, \u5728\u5176\u4e4b\u4e0a\u4f5cExtend.\n\u603b\u7ed3\n\u73b0\u6709\u65b9\u6cd5: Event timelines, event threads, event evolution graphs, information maps. \u8fd9\u4e9b\u65b9\u6cd5\u5728\u5e94\u7528\u5230\u6d77\u91cf\u6570\u636e\u65f6\u4f1a\u6709\u5982\u4e0b\u95ee\u9898:\n\n\u96be\u4ee5\u4ee5\u4e00\u4e2a\u5408\u9002\u7684\u7c92\u5ea6\u6765\u62bd\u53d6\u72ec\u7acb\u7684\u4e8b\u4ef6\n\u53ef\u89c6\u5316\u4e0d\u4fbf\u4e8e\u4f7f\u7528\u8005\u7406\u89e3 \n\u4f7f\u7528\u7684\u5747\u4e3aoffline\u7684\u7b97\u6cd5. \u4f46\u6570\u636e\u7684\u6301\u7eed\u6dfb\u52a0\u9700\u8981online\u7684\u7b97\u6cd5\n\n\n\u6700\u540e\u6765\u770b Story Forest\u5982\u4f55\u89e3\u51b3\u8fd9\u4e09\u4e2a\u96be\u70b9:\n\n\u5148\u6309\u5173\u952e\u8bcd\u5c06doc\u5212\u5206\u4e3atopic, \u518d\u5728topic\u5185\u5c06doc\u805a\u7c7b\u4e3aevent\n\u91c7\u7528\u6811\u7684\u7ed3\u6784, \u6e05\u6670\u660e\u4e86.\n\u91c7\u7528\u5f80\u6811\u4e2d\u6dfb\u52a0\u8282\u70b9\u7684\u65b9\u5f0f, online\u7684\u751f\u6210Story Forest.\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u8239\u6a21 \u5165\u95e8 \u7528\u5177 \u5217\u8868", "date": "2018-10-17T15:00:00-00.00", "path": "/archives/\u8239\u6a21 \u5165\u95e8 \u7528\u5177 \u5217\u8868/", "text": "\u5217\u4e00\u4e0b\u5165\u5751\u9700\u8981\u7684\u5de5\u5177\n\n\n\n\n\u4e0a\u8272\n\u989c\u6599\n\u7530\u5bab\u6c34\u6027\u6f06\nXF1 \u6d88\u5149\u9ed1\nXF2 \u6d88\u5149\u767d\nXF7 \u6d88\u5149\u7ea2\nXF9 \u6d88\u5149\u8239\u5e95\u7ea2\nXF11 \u65e5\u6d77\u519b\u519b\u673a\u7eff\nXF59 \u6d88\u5149\u6c99\u6f20\u9ec4\nXF64 \u6d88\u5149\u7ea2\u68d5\nXF75 \u6d77\u519b\u5434\u5de5\u5382\u7070\nXF78 \u9ec4\u6728\u7532\u677f\u8272\nX-20A \u7530\u5bab\u6c34\u6027\u6f06\u6eb6\u5242\n\u9762\u76f8\u7b14\n\u8c03\u8272\u76bf\n\u5438\u7ba1\nX-22 \u6c34\u6027\u5149\u6cb9\nXF12 \u65e5\u6d77\u519b\u519b\u673a\u7070\nXF86 \u6d88\u5149\u900f\u660e\nX12 \u91d1\nX11 \u94f6\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "\u6a21", "slug": "\u6a21", "permalink": "/tag/\u6a21/"}, {"name": "\u578b", "slug": "\u578b", "permalink": "/tag/\u578b/"}]}, {"title": "\u7530\u5bab \u7403\u78e8 1/700 \u65e0\u6539 \u7d20\u7ec4", "date": "2018-10-10T16:12:47-00.00", "path": "/archives/\u7530\u5bab \u7403\u78e8 1/700 \u65e0\u6539 \u7d20\u7ec4/", "text": "\n\u7ec3\u624b\u7b2c\u4e00\u6761\n\n\n\n\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "\u6a21", "slug": "\u6a21", "permalink": "/tag/\u6a21/"}, {"name": "\u578b", "slug": "\u578b", "permalink": "/tag/\u578b/"}]}, {"title": "\u5b66\u7814\u00d7\u30ab\u30d7\u30b3\u30f3\u300c\u30ea\u30aa\u30ec\u30a6\u30b9\u300d\u5929\u7a7a\u7684\u738b\u8005 \u96c4\u706b\u9f8d", "date": "2018-10-10T16:12:47-00.00", "path": "/archives/\u5b66\u7814\u00d7\u30ab\u30d7\u30b3\u30f3\u300c\u30ea\u30aa\u30ec\u30a6\u30b9\u300d\u5929\u7a7a\u7684\u738b\u8005 \u96c4\u706b\u9f8d/", "text": "\u521d\u4ee3\u5c01\u9762\u602a, \u5929\u7a7a\u7684\u738b\u8005, \u96c4\u706b\u9f8d\n\n\n\n\u949f\u8001\u677f\u56fd\u5e86\u524d\u56de\u56fd\u7ed9\u6211\u5e26\u56de\u6765\u4e86\u4e00\u76d2, \u8d81\u7740\u56fd\u5e86\u5728\u5bb6\u7ed9\u62fc\u4e86\n\n\u5148\u662f\u4e00\u5f20\u5404\u4ee3\u5c01\u9762\u602a\n\n\n\n\n\n\n\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "latexdiff\u4f7f\u7528\u4e0e\u8e29\u5751", "date": "2018-09-25T10:20:07-00.00", "path": "/archives/latexdiff\u4f7f\u7528\u4e0e\u8e29\u5751/", "text": "\u5148\u88c5CTEX(\u6211\u662f\u771f\u4e0d\u60f3\u88c5\u8fd9\u4e2a\u73a9\u610f). \u88c5Perl.\nmiktex\u7684\u5305\u7ba1\u7406\u91cc\u5b89\u88c5latexdiff\n\u7136\u540e\u5c31\u662fmiktex\u7684\u5404\u79cd\u4e8b, \u6e90\u8981\u4e0d\u662f\u8fc7\u671f\u8981\u4e0d\u5c31\u4e8b\u672a\u6ce8\u518c. \u4ecemiktex\u7684\u66f4\u65b0\u6587\u6863\u91cc\u9762\u627e\u4e86\u4e2a\u5b98\u65b9\u6e90\nregedit\u7684\nHKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\MiKTeX.org\\MiKTeX\\2.9\\MPM\\RemoteRepository\n\u7684\u6e90\u6539\u4e3a\nhttp://mirror.ctan.org/systems/win32/miktex/tm/packages/\n\u7136\u540e\u6302\u7740\u68af\u5b50(ssr\u5f00\u4e2a\u5168\u5c40\u5c31\u884c)\n\u5b89\u88c5\u5b8c\u540e, terminal\u91cc\u9762\u770b\u770blatexdiff\u662f\u4e0d\u662f\u80fd\u591f\u88ab\u641c\u7d22\u5230, \u4e0d\u80fd\u7684\u8bdd\u624b\u52a8\u6dfb\u73af\u5883\u53d8\u91cf.\n\nlatexdiff origin.tex modify.tex &gt; diff.tex\n\u6700\u540ecompile\u8fd9\u4e2adiff.tex, \u6700\u540e\u6548\u679c\u5c31\u662f\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "Adobe JPEG\u56fe\u50cf\u91cf\u5316\u8868\u63d0\u53d6", "date": "2018-07-12T23:00:07-00.00", "path": "/archives/Adobe JPEG\u56fe\u50cf\u91cf\u5316\u8868\u63d0\u53d6/", "text": "photoshop\u67090\u81f312\u517113\u4e2a\u4fdd\u5b58\u54c1\u8d28\uff0c\u6bcf\u4e2a\u54c1\u8d28\u91cc\u9762\u91cc\u9762\uff0c\u5bf9\u4e8e\u539f\u59cb\u662fjpeg\u56fe\u50cf\u548cPNG(\u975ejpeg)\u56fe\u50cf\u4fdd\u5b58\u4e3ajpeg\u65f6\u6240\u7528\u7684\u91cf\u5316\u8868\u4e5f\u4e0d\u76f8\u540c\u3002\n\u63d0\u53d6\u91cf\u5316\u8868\u91c7\u7528\u7684\u662fPIL\u91cc\u7684quantization\u5c5e\u6027\u3002\n# -*- coding: utf-8 -*-\n&quot;&quot;&quot;\nCreated on Thu Jul 12 20:06:53 2018\n\n@author: shanqi\n&quot;&quot;&quot;\nfrom PIL import Image\n\nimg = Image.open(&#39;j1.jpg&#39;)\nprint(img.quantization)\n\n\u4e0b\u9762\u662f\u5168\u90e8\u91cf\u5316\u8868\uff0c\u4e00\u4e2a\u662f\u4eae\u5ea6\u4e00\u4e2a\u662f\u8272\u5ea6\n\n\n\n\n# \u54c1\u8d2812\n\n# raw_jpeg\n{0: array('B', [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]), 1: array('B', [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])}\n# png_to_jpeg\n{0: array('B', [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]), 1: array('B', [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])}\n\n# \u54c1\u8d2811\n\n# raw_jpeg\n{0: array('B', [1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 3, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 5, 6, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 1: array('B', [1, 2, 2, 4, 2, 4, 7, 4, 4, 7, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])}\n# png_to_jpeg\n{0: array('B', [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 3, 3, 3, 2, 3, 3, 4, 4, 4, 4, 4, 3, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]), 1: array('B', [1, 1, 1, 2, 2, 2, 4, 3, 3, 4, 7, 5, 4, 5, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8])}\n\n# \u54c1\u8d2810\n\n# raw_jpeg\n{0: array('B', [2, 2, 2, 3, 2, 3, 4, 2, 2, 4, 5, 4, 3, 4, 5, 6, 5, 5, 5, 5, 6, 8, 7, 7, 7, 7, 7, 8, 11, 9, 9, 9, 9, 9, 9, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [3, 3, 3, 7, 4, 7, 13, 7, 7, 13, 15, 13, 13, 13, 15, 15, 14, 14, 14, 14, 15, 15, 12, 12, 12, 12, 12, 15, 15, 12, 12, 12, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3, 4, 3, 2, 2, 3, 4, 5, 4, 4, 4, 4, 4, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 7, 6, 9, 9, 10, 10, 9, 9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [3, 3, 3, 5, 4, 5, 9, 6, 6, 9, 13, 10, 9, 10, 13, 15, 14, 14, 14, 14, 15, 15, 12, 12, 12, 12, 12, 15, 15, 12, 12, 12, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n\n# \u54c1\u8d289\n\n # raw_jpeg\n{0: array('B', [4, 3, 3, 4, 3, 4, 7, 4, 4, 7, 9, 7, 5, 7, 9, 11, 9, 9, 9, 9, 11, 14, 12, 12, 12, 12, 12, 14, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [4, 6, 6, 12, 8, 12, 22, 12, 12, 22, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [4, 3, 3, 3, 3, 3, 4, 3, 3, 4, 6, 4, 3, 4, 6, 7, 5, 4, 4, 5, 7, 8, 6, 6, 7, 6, 6, 8, 10, 8, 9, 9, 9, 9, 8, 10, 10, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [4, 5, 5, 8, 7, 8, 15, 10, 10, 15, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n\n# \u54c1\u8d288\n\n# raw_jpeg\n\n{0: array('B', [6, 4, 4, 7, 5, 7, 11, 6, 6, 11, 14, 10, 8, 10, 14, 17, 14, 14, 14, 14, 17, 22, 19, 19, 19, 19, 19, 22, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]),\n 1: array('B', [7, 9, 9, 19, 12, 19, 34, 19, 19, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n # png_to_jpeg\n\n {0: array('B', [6, 4, 4, 4, 5, 4, 6, 5, 5, 6, 9, 6, 5, 6, 9, 11, 8, 6, 6, 8, 11, 12, 10, 10, 11, 10, 10, 12, 16, 12, 12, 12, 12, 12, 12, 16, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [7, 7, 7, 13, 12, 13, 24, 16, 16, 24, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n\n\n# \u54c1\u8d287\n\n# raw_jpeg\n{0: array('B', [10, 7, 7, 11, 8, 11, 18, 10, 10, 18, 22, 17, 14, 17, 22, 27, 23, 22, 22, 23, 27, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [11, 14, 14, 31, 19, 31, 34, 24, 24, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [10, 7, 7, 7, 8, 7, 10, 8, 8, 10, 15, 10, 8, 10, 15, 18, 13, 10, 10, 13, 18, 20, 16, 16, 18, 16, 16, 20, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [11, 12, 12, 21, 19, 21, 34, 24, 24, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n# \u54c1\u8d286\n\n# raw_jpeg\n{0: array('B', [8, 6, 6, 9, 6, 9, 14, 8, 8, 14, 17, 13, 11, 13, 17, 21, 18, 17, 17, 18, 21, 28, 23, 23, 23, 23, 23, 28, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [9, 9, 9, 11, 10, 11, 18, 11, 11, 18, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [8, 6, 6, 6, 6, 6, 8, 6, 6, 8, 12, 8, 7, 8, 12, 14, 10, 8, 8, 10, 14, 16, 13, 13, 14, 13, 13, 16, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [9, 8, 8, 9, 10, 9, 11, 9, 9, 11, 14, 11, 13, 11, 14, 17, 14, 14, 14, 14, 17, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n# \u54c1\u8d285\n\n# raw_jpeg\n{0: array('B', [12, 8, 8, 13, 9, 13, 21, 12, 12, 21, 26, 20, 16, 20, 26, 32, 27, 26, 26, 27, 32, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [13, 13, 13, 17, 14, 17, 27, 17, 17, 27, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [12, 8, 8, 8, 9, 8, 12, 9, 9, 12, 17, 11, 10, 11, 17, 21, 15, 12, 12, 15, 21, 24, 19, 19, 21, 19, 19, 24, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [13, 11, 11, 13, 14, 13, 16, 14, 14, 16, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n# \u54c1\u8d284\n\n# raw_jpeg\n{0: array('B', [16, 11, 11, 17, 12, 17, 27, 16, 16, 27, 34, 26, 21, 26, 34, 39, 28, 28, 28, 28, 39, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [17, 17, 17, 22, 19, 22, 34, 22, 22, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [16, 11, 11, 11, 12, 11, 16, 12, 12, 16, 23, 15, 13, 15, 23, 27, 20, 16, 16, 20, 27, 31, 23, 23, 23, 23, 23, 31, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [17, 15, 15, 17, 19, 17, 21, 18, 18, 21, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n# \u54c1\u8d283\n\n# raw_jpeg\n{0: array('B', [18, 14, 14, 22, 16, 22, 35, 21, 21, 35, 44, 34, 27, 34, 44, 39, 28, 28, 28, 28, 39, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [20, 22, 22, 29, 25, 29, 34, 24, 24, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [18, 14, 14, 14, 16, 14, 21, 16, 16, 21, 30, 19, 17, 19, 30, 35, 26, 21, 21, 26, 35, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [20, 19, 19, 22, 25, 22, 27, 23, 23, 27, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n# \u54c1\u8d282\n\n# raw_jpeg\n{0: array('B', [20, 17, 17, 26, 18, 26, 41, 24, 24, 41, 51, 39, 32, 39, 51, 39, 28, 28, 28, 28, 39, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [21, 26, 26, 33, 29, 33, 34, 24, 24, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [20, 17, 17, 26, 18, 26, 41, 24, 24, 41, 51, 39, 32, 39, 51, 39, 28, 28, 28, 28, 39, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [21, 26, 26, 33, 29, 33, 34, 24, 24, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n# \u54c1\u8d281\n\n# raw_jpeg\n{0: array('B', [27, 26, 26, 41, 29, 41, 65, 38, 38, 65, 66, 47, 47, 47, 66, 39, 28, 28, 28, 28, 39, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [29, 41, 41, 52, 38, 52, 34, 24, 24, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [27, 26, 26, 41, 29, 41, 65, 38, 38, 65, 66, 47, 47, 47, 66, 39, 28, 28, 28, 28, 39, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [29, 41, 41, 52, 38, 52, 34, 24, 24, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n\n# \u54c1\u8d280\n\n# raw_jpeg\n{0: array('B', [32, 33, 33, 51, 36, 51, 81, 48, 48, 81, 66, 47, 47, 47, 66, 39, 28, 28, 28, 28, 39, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [34, 51, 51, 52, 38, 52, 34, 24, 24, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n# png_to_jpeg\n{0: array('B', [32, 33, 33, 51, 36, 51, 81, 48, 48, 81, 66, 47, 47, 47, 66, 39, 28, 28, 28, 28, 39, 34, 23, 23, 23, 23, 23, 34, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]), 1: array('B', [34, 51, 51, 52, 38, 52, 34, 24, 24, 34, 20, 14, 14, 14, 20, 20, 14, 14, 14, 14, 20, 17, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12])}\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "Learning Rich Features for Image Manipulation Detection\u8bba\u6587\u7b14\u8bb0", "date": "2018-07-10T15:54:08-00.00", "path": "/archives/Learning Rich Features for Image Manipulation Detection\u8bba\u6587\u7b14\u8bb0/", "text": "\u4e3acvpr18\u4e0aAdobe\u7684\u4e00\u7bc7\u6587\u7ae0\uff0c\u5185\u5bb9\u76f8\u5173\u56fe\u50cf\u53d6\u8bc1\uff0cPS\u7167\u7247\u8bc6\u522b\u3002\n\u4f7f\u7528\u4e00\u4e2a\u53cc\u6d41Faster R-CNN \u8bad\u7ec3\u5b83\u6765end-to-end\u7684\u5bfb\u627e\u4f2a\u9020\u533a\u57df\u3002\u5176\u4e2d\u4e00\u4e2a\u4e3aRGB\u6d41\uff0c\u6765\u5bfb\u627eRGB\u8f93\u5165\u4e2d\u7684\u5bf9\u6bd4\u5ea6\u5dee\u5f02\uff0c\u4e0d\u81ea\u7136\u7684\u4f2a\u9020\u8fb9\u754c\u7b49\u3002\u53e6\u4e00\u4e2a\u662f\u4e00\u4e2a\u566a\u58f0\u6d41\uff0c\u6765\u653e\u5927\u4ecerichmodel\u91cc\u5f97\u5230\u7684\u566a\u58f0\u7279\u5f81\u3002\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u53cc\u7ebf\u6027pool\u6765\u878d\u5408\u7279\u5f81\u3002\n\n\n\u4f2a\u9020\u7684\u56fe\u50cf\u4e3b\u8981\u662f\u4e09\u79cd\uff1a\nsplicing copy-move removal\nimage forensics\u7684\u4e00\u4e9b\u76f8\u5173\u5de5\u4f5c\uff1aCFA pattern, &lt;Exploiting spatial structure for localizing manipulated image regions.&gt;\u4f7f\u7528LSTM\u6765\u5bfb\u627e\u4f2a\u9020\u533a\u57df\u7684\u8fb9\u754c\n\u3001\n\u4e4b\u524d\u7684\u4f2a\u9020\u68c0\u6d4bdatabase\u592a\u5c0f\uff0c\u9700\u8981\u5148\u7528COCO\u6765pretrain\u4e00\u4e0b\nour contribution:\n\n\u53cc\u6d41faster RCNN\u7684\u4f7f\u7528\n\u53cc\u6d41\u6a21\u5f0f\u662f\u4e00\u4e2a\u65b0\u7684\u4f2a\u9020\u68c0\u6d4b\u6a21\u5f0f\n\nRGB stream\n\u4e00\u4e2aresnet101\u6765\u751f\u6210features\u548c\u505a\u5206\u7c7b\nnoise stream\n\u4f7f\u7528\u4e09\u4e2aSRM\u6838\u6765\u6355\u6349\u566a\u58f0\u3002 \u4e0d\u505abonding box\uff08\u56e0\u4e3a\u76f8\u6bd4RGB\u6548\u679c\u5dee\u5f88\u591a\uff09\nbilinear pooling\nhttps://blog.csdn.net/wayne2019/article/details/78441001\n\u8fd9\u90e8\u662f\u6765\u5c06RGB\u6d41\u548c\u566a\u58f0\u6d41\u878d\u5408\uff0c\u4f7f\u7528Compact bilinear pooling \u6765\u505a\u7ec6\u7c92\u5ea6\u7684\u5206\u6790\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "python\u4ee3\u7801\u89c4\u8303", "date": "2018-07-09T15:48:47-00.00", "path": "/archives/python\u4ee3\u7801\u89c4\u8303/", "text": "\nThe Zen of Python\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to\nguess.\nThere should be one-- and preferably only one --obvious\nway to do it.\nAlthough that way may not be obvious at first unless\nyou're Dutch.\nNow is better than never.\nAlthough never is often better than |right| now.\nIf the implementation is hard to explain, it's a bad\nidea.\nIf the implementation is easy to explain, it may be a\ngood idea.\nNamespaces are one honking great idea -- let's do more\nof those!\n-- by Tim Peters\n\u53ea\u8bb0\u5f55must\u90e8\u5206\n\n\u7981\u6b62\u4f7f\u7528from xxx import yyy\u8bed\u6cd5\u76f4\u63a5\u5bfc\u5165\u7c7b\u6216\u51fd\u6570(\u5373yyy\u53ea\u80fd\u662fmodule\u6216\npackage, \u4e0d\u80fd\u662f\u7c7b\u6216\u51fd\u6570)\u3002\n\n\u7981\u6b62\u4f7f\u7528from xxx import *\n\nimport\u65f6\u5fc5\u987b\u4f7f\u7528package\u5168\u8def\u5f84\u540d(\u76f8\u5bf9PYTHONPATH), \u7981\u6b62\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84(\u76f8\u5bf9\u5f53\u524d\u8def\u5f84)\u3002\n\n\u7981\u6b62\u4f7f\u7528\u53cc\u53c2\u6570\u5f62\u5f0f\uff08raise MyException, 'Error Message'\uff09\u6216\u5b57\u7b26\u4e32\u5f62\u5f0f\uff08raise 'Error Message'\uff09\u8bed\u6cd5\u629b\u5f02\u5e38\u3002\n\n\u9664\u975e\u91cd\u65b0\u629b\u51fa\u5f02\u5e38, \u7981\u6b62\u4f7f\u7528except:\u6355\u83b7\u6240\u6709\u5f02\u5e38\u3002\n\n\u51fd\u6570\u8fd4\u56de\u503c\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e3\u4e2a\u30023\u4e2a\u4ee5\u4e0a\u65f6\u5fc5\u987b\u901a\u8fc7class/namedtuple/dict\u7b49\u5177\u540d\u5f62\u5f0f\u8fdb\u884c\u5305\u88c5\n\n\u5bf9\u5bb9\u5668\u7c7b\u578b, \u4f7f\u7528in\u6216not in\u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\u3002\u800c\u4e0d\u662fhas_key\u3002\n\n\u4ec5\u53ef\u4f7f\u7528\u4ee5\u4e0b\u57fa\u672c\u7c7b\u578b\u5b57\u7b26\u5e38\u91cf\u6216\u5e38\u91cf\u4f5c\u4e3a\u9ed8\u8ba4\u53c2\u6570\uff1a\u6574\u6570\u3001bool\u3001\u6d6e\u70b9\u3001\u5b57\u7b26\u4e32\u3001None\n\n\u7981\u6b62\u4f7f\u7528==\u6216!=\u5224\u65ad\u8868\u8fbe\u5f0f\u662f\u5426\u4e3aNone, \u5e94\u8be5\u7528is\u6216is not None\n\u5224\u65ad\u67d0\u4e2a\u6574\u6570\u8868\u8fbe\u5f0fexpr\u662f\u5426\u4e3a\u96f6\u65f6, \u7981\u6b62\u4f7f\u7528not expr, \u5e94\u8be5\u4f7f\u7528expr == 0\n\u5f53\u660e\u786eexpr\u4e3abool\u7c7b\u578b\u65f6, \u7981\u6b62\u4f7f\u7528==\u6216!=\u4e0eTrue/False\u6bd4\u8f83\u3002\u5e94\u8be5\u66ff\u6362\u4e3aexpr\u6216not expr\n\n\u6bcf\u884c\u53ea\u80fd\u5bfc\u5165\u2f00\u4e2a\u5e93\n\u00b7[\u5f3a\u5236] \u5fc5\u987b\u6309\u5982\u4e0b\u987a\u5e8f\u6392\u5217import, \u6bcf\u90e8\u5206\u4e4b\u95f4\u7559\u4e00\u4e2a\u7a7a\u683c\n\u2022 \u6807\u51c6\u5e93\n\u2022 \u7b2c\u4e09\u65b9\u5e93\n\u2022 \u5e94\u7528\u7a0b\u5e8f\u81ea\u6709\u5e93\n\n\u7c7b(\u5305\u62ec\u5f02\u5e38)\u540d\u4f7f\u7528\u9996\u5b57\u6bcd\u5927\u5199\u9a7c\u5cf0\u5f0f\u547d\u540d\n\n# -*- coding: utf-8 -*-\n\n\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u4e0e\u62fc\u63a5, \u9664\u4e86a+b\u8fd9\u79cd\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5916, \u5e94\u8be5\u4f7f\u7528%\u6216format\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\n\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "sublime\u89e3\u51b3\u4e2d\u6587\u6e32\u67d3\u7684\u95ee\u9898.md", "date": "2018-07-08T21:50:45-00.00", "path": "/archives/sublime\u89e3\u51b3\u4e2d\u6587\u6e32\u67d3\u7684\u95ee\u9898.md/", "text": "\u914d\u7f6e\u6587\u4ef6\u91cc\u52a0\u5165\n\n{\n    \"font_options\": [\"gdi\"],\n    \"dpi_scale\": 1.0,\n    \"font_size\": 15,\n    \"ignored_packages\":\n    [\n        \"Vintage\"\n    ]\n}\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u7b97\u6cd54", "date": "2018-04-03T16:07:00-00.00", "path": "/archives/\u7b97\u6cd54/", "text": "01\u80cc\u5305\n\n\nDP\n\u2460\u3001\u786e\u8ba4\u5b50\u95ee\u9898\u548c\u72b6\u6001 \n\u3000\u300001\u80cc\u5305\u95ee\u9898\u9700\u8981\u6c42\u89e3\u7684\u5c31\u662f\uff0c\u4e3a\u4e86\u4f53\u79efV\u7684\u80cc\u5305\u4e2d\u7269\u4f53\u603b\u4ef7\u503c\u6700\u5927\u5316\uff0cN\u4ef6\u7269\u54c1\u4e2d\u7b2ci\u4ef6\u5e94\u8be5\u653e\u5165\u80cc\u5305\u4e2d\u5417\uff1f\uff08\u5176\u4e2d\u6bcf\u4e2a\u7269\u54c1\u6700\u591a\u53ea\u80fd\u653e\u4e00\u4ef6\uff09 \n\u3000\u3000\u4e3a\u6b64\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4e00\u4e2a\u72b6\u6001\uff0c\u5373\u524di\u4e2a\u7269\u4f53\u4e2d\u82e5\u5e72\u4e2a\u653e\u5165\u4f53\u79ef\u4e3aV\u80cc\u5305\u4e2d\u6700\u5927\u4ef7\u503c\u3002\u6570\u7ec4\u4e3a\uff1af[N][V]\uff0c\u5176\u4e2dfij\u8868\u793a\u524di\u4ef6\u4e2d\u82e5\u5e72\u4e2a\u7269\u54c1\u653e\u5165\u4f53\u79ef\u4e3aj\u7684\u80cc\u5305\u4e2d\u7684\u6700\u5927\u4ef7\u503c\u3002 \n\u2461\u3001\u521d\u59cb\u72b6\u6001 \n\u3000\u3000\u521d\u59cb\u72b6\u6001\u4e3af[0][0\u2212V]\u548cf[0\u2212N][0]\u90fd\u4e3a0\uff0c\u524d\u8005\u8868\u793a\u524d0\u4e2a\u7269\u54c1\uff08\u4e5f\u5c31\u662f\u7a7a\u7269\u54c1\uff09\u65e0\u8bba\u88c5\u5165\u591a\u5927\u7684\u5305\u4e2d\u603b\u4ef7\u503c\u90fd\u4e3a0\uff0c\u540e\u8005\u8868\u793a\u4f53\u79ef\u4e3a0\u7684\u80cc\u5305\u5565\u4ef7\u503c\u7684\u7269\u54c1\u90fd\u88c5\u4e0d\u8fdb\u53bb\u3002 \n\u2462\u3001\u8f6c\u79fb\u51fd\u6570\n\nif (\u80cc\u5305\u4f53\u79efj\u5c0f\u4e8e\u7269\u54c1i\u7684\u4f53\u79ef)\n    f[i][j] = f[i-1][j] //\u80cc\u5305\u88c5\u4e0d\u4e0b\u7b2ci\u4e2a\u7269\u4f53\uff0c\u76ee\u524d\u53ea\u80fd\u9760\u524di-1\u4e2a\u7269\u4f53\u88c5\u5305\nelse\n    f[i][j] = max(f[i-1][j], f[i-1][j-Vi] + Wi)\n\u5230\u8fd9\u4e00\u6b65\uff0c\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\u53ef\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\uff0c\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u6e05\u695a\u5177\u4f53\u9009\u62e9\u54ea\u51e0\u6837\u7269\u54c1\u80fd\u83b7\u5f97\u6700\u5927\u4ef7\u503c\u3002\n\u53e6\u8d77\u4e00\u4e2a x[ ] \u6570\u7ec4\uff0cx[i]=0\u8868\u793a\u4e0d\u62ff\uff0cx[i]=1\u8868\u793a\u62ff\u3002\nm[n][c]\u4e3a\u6700\u4f18\u503c\uff0c\u5982\u679cm[n][c]=m[n-1][c] ,\u8bf4\u660e\u6709\u6ca1\u6709\u7b2cn\u4ef6\u7269\u54c1\u90fd\u4e00\u6837\uff0c\u5219x[n]=0 ; \u5426\u5219 x[n]=1\u3002\u5f53x[n]=0\u65f6\uff0c\u7531x[n-1][c]\u7ee7\u7eed\u6784\u9020\u6700\u4f18\u89e3\uff1b\u5f53x[n]=1\u65f6\uff0c\u5219\u7531x[n-1][c-w[i]]\u7ee7\u7eed\u6784\u9020\u6700\u4f18\u89e3\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u53ef\u6784\u9020\u51fa\u6240\u6709\u7684\u6700\u4f18\u89e3\u3002\n\nvoid traceback()  \n{  \n    for(int i=n;i&gt;1;i--)  \n    {  \n        if(m[i][c]==m[i-1][c])  \n            x[i]=0;  \n        else  \n        {  \n            x[i]=1;  \n            c-=w[i];  \n        }  \n    }  \n    x[1]=(m[1][c]&gt;0)?1:0;  \n}\n\u9012\u5f52\u6b21\u6570\n\u4e0b\u5217\u7a0b\u5e8f\u6267\u884c\u540e,\u8f93\u51fa\u7684\u7ed3\u679c\u4e3a()\n#include&lt;stdio.h&gt;\nint cnt=0;\nint fib(int n)\n{\n\u00a0\u00a0\u00a0 cnt++;\n\u00a0\u00a0\u00a0 if(n==0)\n\u00a0\u00a0\u00a0 \u00a0 \u00a0return 1;\n\u00a0\u00a0\u00a0 else if(n==1)\n\u00a0\u00a0\u00a0 \u00a0 \u00a0return 2;\n\u00a0\u00a0\u00a0 else\n\u00a0\u00a0\u00a0 \u00a0 \u00a0return fib(n-1)+fib(n-2);\n}\nvoid main()\n{\n\u00a0\u00a0\u00a0fib(8);\n\u00a0\u00a0\u00a0printf(&quot;%d&quot;,cnt);\n}\n\nf(8)------------- 1\nf(7)-------------1\nf(6)-------1+1=2\nf(5)------2+1 = 3\nf(4)-------------5\nf(3)-------------8\nf(2)-------------13\nf(1)-------------21\nf(0)-------------13\n1+1+2+3+5+8+13+21+13=67\n\u5206\u7bb1\u95ee\u9898\n\u95ee\u9898\n\u5047\u8bbe12\u4e2a\u9500\u552e\u4ef7\u683c\u8bb0\u5f55\u7ec4\u5df2\u7ecf\u6392\u5e8f\u5982\u4e0b\uff1a5, 10, 11, 13, 15,35, 50, 55, 72, 92, 204, 215 \u4f7f\u7528\u5982\u4e0b\u6bcf\u79cd\u65b9\u6cd5\u5c06\u5b83\u4eec\u5212\u5206\u6210\u56db\u4e2a\u7bb1\u3002\u7b49\u9891\uff08\u7b49\u6df1\uff09\u5212\u5206\u65f6\uff0c15\u5728\u7b2c\u51e0\u4e2a\u7bb1\u5b50\u5185\uff1f\u7b49\u5bbd\u5212\u5206\u65f6\u5728\u7b2c\u51e0\u4e2a\u7bb1\uff1f\n\u5206\u7bb1\u95ee\u9898\u5206\u4e3a\u6709\u76d1\u7763\u5206\u7bb1\u548c\u65e0\u76d1\u7763\u5206\u7bb1\u3002\n\u65e0\u76d1\u7763\u5206\u7bb1\n\u7b49\u5bbd\u5206\u7bb1 \n     \u5c06\u53d8\u91cf\u7684\u53d6\u503c\u8303\u56f4\u5206\u4e3ak\u4e2a\u7b49\u5bbd\u7684\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u5f53\u4f5c\u4e00\u4e2a\u5206\u7bb1\u3002 \n     \u5728\u672c\u95ee\u9898\u4e2d\u53d8\u91cf\u7684\u53d6\u503c\u8303\u56f4\u4e3a5\u2013215\uff0ck\u4e3a4.\uff08215-5\uff09/4=52.5\u5212\u5206\u70b9\u4e3a57.5\uff0c110\uff0c162.5\uff0c4\u4e2a\u7bb1\u4e2d\u6570\u636e\u4e3a \n     A\u7bb1\uff1a5, 10, 11, 13, 15,35, 50, 55 \n     B\u7bb1\uff1a72, 92 \n     C\u7bb1\uff1a\u7a7a \n     D\u7bb1\uff1a204, 215\n\u7b49\u9891\uff08\u7b49\u6df1\uff09\u5206\u7bb1 \n     \u628a\u89c2\u6d4b\u503c\u6309\u7167\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u6392\u5217\uff0c\u6839\u636e\u89c2\u6d4b\u7684\u4e2a\u6570\u7b49\u5206\u4e3ak\u90e8\u5206\uff0c\u6bcf\u90e8\u5206\u5f53\u4f5c\u4e00\u4e2a\u5206\u7bb1\uff0c\u4f8b\u5982\uff0c\u6570\u503c\u6700\u5c0f\u76841/k\u6bd4\u4f8b\u7684\u89c2\u6d4b\u5f62\u6210\u7b2c\u4e00\u4e2a\u5206\u7bb1\uff0c\u7b49\u7b49\u3002 \n     \u5728\u672c\u95ee\u9898\u4e2d\u89c2\u6d4b\u4e2a\u6570\u4e3a12.k=4.\u6bcf\u7bb1\u91cc\u67093\u4e2a\u6570\u636e\u3002 \n     A\u7bb1\uff1a5, 10, 11, \nB\u7bb1\uff1a13, 15,35 \nC\u7bb1\uff1a 50, 55\uff0c72 \nD\u7bb1\uff1a92 \n\uff0c204, 215 \nk\u805a\u7c7b\u5206\u7bb1 \n     \u7528k\u5747\u503c\u805a\u7c7b\u6cd5\u5c06\u89c2\u6d4b\u503c\u805a\u4e3ak\u7c7b\uff0c\u4f46\u5728\u805a\u7c7b\u8fc7\u7a0b\u4e2d\u9700\u8981\u4fdd\u8bc1\u5206\u7bb1\u7684\u6709\u5e8f\u6027\uff1a\u7b2c\u4e00\u4e2a\u5206\u7bb1\u4e2d\u6240\u6709\u89c2\u6d4b\u503c\u90fd\u8981\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u5206\u7bb1\u4e2d\u7684\u89c2\u6d4b\u503c\uff0c\u7b2c\u4e8c\u4e2a\u5206\u7bb1\u4e2d\u6240\u6709\u89c2\u6d4b\u503c\u90fd\u8981\u5c0f\u4e8e\u7b2c\u4e09\u4e2a\u5206\u7bb1\u4e2d\u7684\u89c2\u6d4b\u503c\u3002\u624b\u7b97\u592a\u8d39\u65f6\u95f4\uff0c\u7b14\u8bd5\u4e2d\u5e94\u8be5\u4e0d\u4f1a\u51fa\u73b0\u3002\n\u6709\u76d1\u7763\u5206\u7bb1\n\u5728\u5206\u7bb1\u65f6\u8003\u8651\u56e0\u53d8\u91cf\u7684\u53d6\u503c\uff0c\u4f7f\u5f97\u5206\u7bb1\u540e\u8fbe\u5230\u6700\u5c0f\uff08minimumentropy\uff09\u6216\u6700\u5c0f\u63cf\u8ff0\u957f\u5ea6\uff08minimumdescriptionlength\uff09\u3002\n\uff081\uff09\u5047\u8bbe\u56e0\u53d8\u91cf\u4e3a\u5206\u7c7b\u53d8\u91cf\uff0c\u53ef\u53d6\u503c1\uff0c\u2026\uff0cJ\u3002\u4ee4pl\uff08j\uff09\u8868\u793a\u7b2cl\u4e2a\u5206\u7bb1\u5185\u56e0\u53d8\u91cf\u53d6\u503c\u4e3aj\u7684\u89c2\u6d4b\u7684\u6bd4\u4f8b\uff0cl=1\uff0c\u2026\uff0ck\uff0cj=1\uff0c\u2026\uff0cJ\uff1b\u90a3\u4e48\u7b2cl\u4e2a\u5206\u7bb1\u7684\u71b5\u503c\u4e3a\ue015Jj=1\uff3b-pl\uff08j\uff09\u00d7log\uff08pl\uff08j\uff09\uff09\uff3d\u3002\u5982\u679c\u7b2cl\u4e2a\u5206\u7bb1\u5185\u56e0\u53d8\u91cf\u5404\u7c7b\u522b\u7684\u6bd4\u4f8b\u76f8\u7b49\uff0c\u5373pl\uff081\uff09=\u2026=pl\uff08J\uff09=1/J\uff0c\u90a3\u4e48\u7b2cl\u4e2a\u5206\u7bb1\u7684\u71b5\u503c\u8fbe\u5230\u6700\u5927\u503c\uff1b\u5982\u679c\u7b2cl\u4e2a\u5206\u7bb1\u5185\u56e0\u53d8\u91cf\u53ea\u6709\u4e00\u79cd\u53d6\u503c\uff0c\u5373\u67d0\u4e2apl\uff08j\uff09\u7b49\u4e8e1\u800c\u5176\u4ed6\u7c7b\u522b\u7684\u6bd4\u4f8b\u7b49\u4e8e0\uff0c\u90a3\u4e48\u7b2cl\u4e2a\u5206\u7bb1\u7684\u71b5\u503c\u8fbe\u5230\u6700\u5c0f\u503c\u3002\n\uff082\uff09\u4ee4rl\u8868\u793a\u7b2cl\u4e2a\u5206\u7bb1\u7684\u89c2\u6d4b\u6570\u5360\u6240\u6709\u89c2\u6d4b\u6570\u7684\u6bd4\u4f8b\uff1b\u90a3\u4e48\u603b\u71b5\u503c\u4e3a\ue015kl= \uf07b1rl\u00d7\ue015Jj=1\uff3b-pl\uff08j\uff09\u00d7log\uff08pl\uff08j \uf07d\uff09\uff09\uff3d\u3002\u9700\u8981\u4f7f\u603b\u71b5\u503c\u8fbe\u5230\u6700\u5c0f\uff0c\u4e5f\u5c31\u662f\u4f7f\u5206\u7bb1\u80fd\u591f\u6700\u5927\u9650\u5ea6\u5730\u533a\u5206\u56e0\u53d8\u91cf\u7684\u5404\u7c7b\u522b\u3002\ngets getchar scanf getline\ngets\u662f\u5f97\u5230\u4e00\u6574\u884c\u7684\u5b57\u7b26\u4e32;\ngetchar\u662f\u5f97\u5230\u4e00\u4e2a\u5b57\u7b26\uff1b\nscanf(\"%s\")\u662f\u5f97\u5230\u4e00\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u4e32\uff0c\u9047\u5230\u7a7a\u683c\u3001\u56de\u8f66\u4f1a\u81ea\u52a8\u7ec8\u6b62\ngetline \u4e00\u884c\u6254\u6389\u6362\u884c\u7b26\n\u5361\u5170\u7279\u6570\u5217\nhttps://www.zhihu.com/question/25072237/answer/30111179\n\u5750\u6807\u70b9\u7684\u8868\u793a\nP\u4e3a\u7ed9\u5b9a\u7684\u4e8c\u7ef4\u5e73\u9762\u6574\u6570\u70b9\u96c6\u3002\u5b9a\u4e49 P \u4e2d\u67d0\u70b9x\uff0c\u5982\u679cx\u6ee1\u8db3 P \u4e2d\u4efb\u610f\u70b9\u90fd\u4e0d\u5728 x \u7684\u53f3\u4e0a\u65b9\u533a\u57df\u5185\uff08\u6a2a\u7eb5\u5750\u6807\u90fd\u5927\u4e8ex\uff09\uff0c\u5219\u79f0\u5176\u4e3a\u201c\u6700\u5927\u7684\u201d\u3002\u6c42\u51fa\u6240\u6709\u201c\u6700\u5927\u7684\u201d\u70b9\u7684\u96c6\u5408\u3002\uff08\u6240\u6709\u70b9\u7684\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\u90fd\u4e0d\u91cd\u590d, \u5750\u6807\u8f74\u8303\u56f4\u5728[0, 1e9) \u5185\uff09\n\u5982\u4e0b\u56fe\uff1a\u5b9e\u5fc3\u70b9\u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u7684\u96c6\u5408\u3002\u8bf7\u5b9e\u73b0\u4ee3\u7801\u627e\u5230\u96c6\u5408 P \u4e2d\u7684\u6240\u6709 \u201d\u6700\u5927\u201c \u70b9\u7684\u96c6\u5408\u5e76\u8f93\u51fa\u3002\n\u8f93\u5165\u63cf\u8ff0:\n\u7b2c\u4e00\u884c\u8f93\u5165\u70b9\u96c6\u7684\u4e2a\u6570 N\uff0c \u63a5\u4e0b\u6765 N \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\u5b57\u4ee3\u8868\u70b9\u7684 X \u8f74\u548c Y \u8f74\u3002\n\u5bf9\u4e8e 50%\u7684\u6570\u636e,  1 &lt;= N &lt;= 10000;\n\u5bf9\u4e8e 100%\u7684\u6570\u636e, 1 &lt;= N &lt;= 500000;\n\u8f93\u51fa\u63cf\u8ff0:\n\u8f93\u51fa\u201c\u6700\u5927\u7684\u201d \u70b9\u96c6\u5408\uff0c \u6309\u7167 X \u8f74\u4ece\u5c0f\u5230\u5927\u7684\u65b9\u5f0f\u8f93\u51fa\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\u5b57\u5206\u522b\u4ee3\u8868\u70b9\u7684 X \u8f74\u548c Y\u8f74\u3002\n\u793a\u4f8b1\n\u8f93\u5165\n5\n1 2\n5 3\n4 6\n7 5\n9 0\n\u8f93\u51fa\n4 6\n7 5\n9 0\n\u4e00\u4e2a\u70b9\u53f3\u4e0a\u65b9\u6ca1\u6709\u70b9\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u70b9\u53f3\u8fb9\u7684\u70b9\u5168\u90fd\u5728\u5b83\u7684\u4e0b\u8fb9\u3002\n\u6240\u4ee5\u6211\u4eec\u5c06\u70b9\u6309\u7167\u6a2a\u5750\u6807\u4ece\u5de6\u5230\u53f3\u6392\u5e8f\uff0c\u4ece\u53f3\u5f00\u59cb\u626b\uff0c\u627e\u51fa\u53f3\u8fb9\u70b9\u6700\u5927\u7eb5\u5750\u6807\u3002\n\u90a3\u4e48\u4e00\u4e2a\u70b9\u7684\u7eb5\u5750\u6807\u6bd4\u53f3\u8fb9\u7684\u70b9\u7eb5\u5750\u6807\u6700\u5927\u503c\u8fd8\u5927\uff0c\u5c31\u8bf4\u660e\u8fd9\u4e2a\u70b9\u53f3\u8fb9\u7684\u70b9\u5168\u5728\u5b83\u7684\u4e0b\u9762\u3002\n\u8fd9\u6837\u9009\u62e9\u70b9\u5c31\u53ef\u4ee5\u9009\u51fa\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u70b9\u4e86\u3002\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define pb push_back\n#define pr make_pair\n#define fi first\n#define se second\nconst int MAX_N = 5e5 + 5;\ntypedef pair&lt;int, int&gt; pii;\nvector&lt;pii&gt; p;\npii ans[MAX_N];\nint main() {\n\u00a0\u00a0\u00a0 int n, x, y, num, limit;\n\u00a0\u00a0\u00a0 scanf(&quot;%d&quot;, &amp;n);\n\u00a0\u00a0\u00a0 for (int i = 1; i &lt;= n; i++) {\n\u00a0\u00a0\u00a0 \u00a0 \u00a0 scanf(&quot;%d%d&quot;, &amp;x, &amp;y);\n\u00a0\u00a0\u00a0 \u00a0 \u00a0 p.pb(pr(x, y));\n\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 sort(p.begin(), p.end());\n\u00a0\u00a0\u00a0 num = 0, limit = -1;\n\u00a0\u00a0\u00a0 for (int i = n - 1; i &gt;= 0; i--) {\n\u00a0\u00a0\u00a0 \u00a0 \u00a0 if (p[i].se &gt; limit) {\n\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ans[num] = p[i];\n\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 num++;\n\u00a0\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 limit = p[i].se;\n\u00a0\u00a0\u00a0 \u00a0 \u00a0 }\n\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 for (int i = num - 1; i &gt;= 0; i--) {\n\u00a0\u00a0\u00a0 \u00a0 \u00a0 printf(&quot;%d %d\\n&quot;, ans[i].fi, ans[i].se);\n\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 return 0;\n}\n\nbit-map\nhttps://blog.csdn.net/BillCYJ/article/details/78948977\n\u6e38\u620f\u91cc\u9762\u6709\u5f88\u591a\u5404\u5f0f\u5404\u6837\u7684\u4efb\u52a1\uff0c\u5176\u4e2d\u6709\u4e00\u79cd\u4efb\u52a1\u73a9\u5bb6\u53ea\u80fd\u505a\u4e00\u6b21\uff0c\u8fd9\u7c7b\u4efb\u52a1\u4e00\u5171\u67091024\u4e2a\uff0c\u4efb\u52a1ID\u8303\u56f4[1,1024]\u3002\u8bf7\u752832\u4e2aunsigned int\u7c7b\u578b\u6765\u8bb0\u5f55\u77401024\u4e2a\u4efb\u52a1\u662f\u5426\u5df2\u7ecf\u5b8c\u6210\u3002\u521d\u59cb\u72b6\u6001\u90fd\u662f\u672a\u5b8c\u6210\u3002 \u8f93\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u90fd\u662f\u4efb\u52a1ID\uff0c\u9700\u8981\u8bbe\u7f6e\u7b2c\u4e00\u4e2aID\u7684\u4efb\u52a1\u4e3a\u5df2\u7ecf\u5b8c\u6210\uff1b\u5e76\u68c0\u67e5\u7b2c\u4e8c\u4e2aID\u7684\u4efb\u52a1\u662f\u5426\u5df2\u7ecf\u5b8c\u6210\u3002 \u8f93\u51fa\u4e00\u4e2a\u53c2\u6570\uff0c\u5982\u679c\u7b2c\u4e8c\u4e2aID\u7684\u4efb\u52a1\u5df2\u7ecf\u5b8c\u6210\u8f93\u51fa1\uff0c\u5982\u679c\u672a\u5b8c\u6210\u8f93\u51fa0\u3002\u5982\u679c\u7b2c\u4e00\u6216\u7b2c\u4e8c\u4e2aID\u4e0d\u5728[1,1024]\u8303\u56f4\uff0c\u5219\u8f93\u51fa-1\u3002 \n\u8f93\u5165\u63cf\u8ff0:\n\u8f93\u5165\u5305\u62ec\u4e00\u884c,\u4e24\u4e2a\u6574\u6570\u8868\u793a\u4eba\u7269ID.\n\u8f93\u51fa\u63cf\u8ff0:\n\u8f93\u51fa\u662f\u5426\u5b8c\u6210\n\u8f93\u5165\u4f8b\u5b501:\n1024 1024\n\u8f93\u51fa\u4f8b\u5b501:\n1\n//\u89e3\u91ca\uff1a1024=32*32,\u56e0\u6b64\u53ef\u752832\u4e2a\u6574\u6570\u8868\u793a1024\u4f4d(\u56e0\u4e3a\u6bcf\u4e2a\u6574\u657032\u4f4d)\n//\u56e0\u4e3a\u4efb\u52a1ID\u8303\u56f4\u662f1~1024,\u6240\u4ee5\u51cf1\u8f6c\u5316\u4e3a0~1023\n//\u7136\u540e\u4efb\u52a1ID\u9664\u4ee532\uff0c\u5546\u4e3a\u5b58\u5230\u54ea\u4e2a\u6574\u6570\uff0c\u4f59\u6570\u4e3a\u8be5\u6574\u6570\u5bf9\u5e94\u4f4d\uff08\u7f6e1\u5373\u53ef\uff09\n//\u6ce8\uff1a\u9664\u4ee532\u76f8\u5f53\u4e8e\u76f4\u63a5\u53f3\u79fb5\u4f4d\uff0c\u5bf932\u53d6\u4f59\u76f8\u5f53\u4e8e&quot;\u4e0e31&quot;\uff08\u8fd9\u4e2a\u6280\u5de7\u53ea\u5bf92\u7684\u6b21\u65b9\u6570\u6709\u6548\uff09\uff0e\n//\u62d3\u5c55\uff1a\u5927\u6570\u636e\u5904\u7406\uff0c\u53ef\u81ea\u884c\u67e5\u627e1-bitmap\u548c2-bitmap\uff0e\n#include &lt;iostream&gt;\nusing namespace std;\n\u00a0\u00a0\u00a0\u00a0\nunsigned int arr[32];\n\u00a0\u00a0\u00a0\u00a0\nint main()\n{\n\u00a0\u00a0\u00a0\u00a0int id1, id2;\n\u00a0\u00a0\u00a0\u00a0while(cin&gt;&gt;id1&gt;&gt;id2)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!(id2&gt;=1 &amp;&amp; id2&lt;=1024))\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout&lt;&lt;-1&lt;&lt;endl;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0arr[(id1-1)&gt;&gt;5] |= (1&lt;&lt;(id1&amp;31));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout&lt;&lt;( (arr[(id2-1)&gt;&gt;5] &amp; (1&lt;&lt;(id2&amp;31))) != 0)&lt;&lt;endl;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n\n\u7b5b\u6cd5\u7d20\u6570\nvector&lt;int&gt; v(1000,1);\n\u00a0\u00a0\u00a0\u00a0for(int i=2;i&lt;1000;++i){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int j=2;i*j&lt;1000;++j){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(v[i]){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v[i*j]=0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\n\u5b57\u7b26\u4e32\u8f6c\u6570\u5b57\natoi(temp.c_str())\n\u5b57\u7b26\u4e32\u8f6c\u6570\u5b57(\u540e\u9762\u8981\u662f\u4e00\u4e2ac\u5b57\u7b26\u4e32\u6307\u9488, \u6240\u4ee5c_str)\nstring temp = to_string(num);\n\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4 (size n1 n2 n3...)\nint size;\ncin &gt;&gt; size;\nvector nums(size);\nfor(size_t i = 0; i &lt; size; ++i)\n    cin &gt;&gt; nums[i];\n\u6700\u957f\u516c\u5171\u8fde\u7eed\u5b50\u4e32\n\u8fd9\u9898\u5176\u5b9e\u662f\u52a8\u6001\u89c4\u5212\u7684\u53d8\u5f62\u7ecf\u5178\u9898\u578b\uff0c\u5e94\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\uff0c\u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4dp[n][n]\uff0c\u5176\u4e2ddp[i][j]\u8868\u793a\u4ee5s1\u7b2ci\u4e2a\u5b57\u7b26\u3001s2\u7b2cj\u4e2a\u5b57\u7b26\u4e3a\u7ed3\u5c3e\u7684\u6700\u957f\u516c\u5171\u5b50\u4e32\u957f\u5ea6\uff0c\n\u3002\u5982\u679cs1[i]\u7b49\u4e8es2[j]\uff0c\u5219dp[i-1][j-1]\u7b49\u4e8e\u53d6\u5230s1[i-1]\u548c\u53d6\u5230s2[j-1]\u65f6\u7684\u6700\u5927\u8fde\u7eed\u5b50\u4e32\u957f\u5ea6\u52a01\uff0c\u5373dp[i][j]=dp[i-1][j-1]+1\u3002\nLCS \u6700\u5927\u516c\u5171\u5b50\u5e8f\u5217\nhttps://blog.csdn.net/so_geili/article/details/53737001\nKMP\nhttps://blog.csdn.net/starstar1992/article/details/54913261\nhttps://blog.csdn.net/v_july_v/article/details/7041827\n\u5012\u6c34\u95ee\u9898\n\u7ed9\u5b9a\u56db\u4e2a\u7a7a\u676f\u5b50\uff0c\u5bb9\u91cf\u5206\u522b\u4e3aS1 S2 S3 S4\uff0c\u5141\u8bb8\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n\u5c06\u67d0\u4e2a\u676f\u5b50\u63a5\u6ee1\u6c34\n\n\u5c06\u67d0\u4e2a\u676f\u5b50\u91cc\u7684\u6c34\u5168\u90e8\u5012\u6389\n\n\u5c06\u676f\u5b50A\u4e2d\u7684\u6c34\u5012\u8fdb\u676f\u5b50B\uff0c\u76f4\u5230A\u5012\u7a7a\u6216\u8005B\u88ab\u5012\u6ee1\n\n\n\u95ee\u6700\u5c11\u8981\u591a\u5c11\u6b65\u64cd\u4f5c\u624d\u80fd\u4f7f\u5f97\u8fd9\u56db\u4e2a\u676f\u5b50\u88c5\u7684\u6c34\u5206\u522b\u4e3aT1 T2 T3 T4\n\u8f93\u5165\u63cf\u8ff0:\n\u7b2c\u4e00\u884c\u56db\u4e2a\u975e\u8d1f\u6574\u6570S1 S2 S3 S4\n\u7b2c\u4e8c\u884c\u56db\u4e2a\u975e\u8d1f\u6574\u6570T1 T2 T3 T4\n\u8f93\u51fa\u63cf\u8ff0:\n\u6700\u5c11\u7684\u6b65\u6570\uff0c\u82e5\u65e0\u6cd5\u5b8c\u6210\u5219\u8f93\u51fa-1\n\u793a\u4f8b1\n\u8f93\u5165\n0 2 3 4\n0 1 2 4\n\u8f93\u51fa\n6\n\u8bf4\u660e\n\u8fc7\u7a0b\u5982\u4e0b\uff1a\n(0,0,0,0)-&gt;(0,2,0,0)-&gt;(0,2,3,0)-&gt;(0,2,0,3)-&gt;(0,0,2,3)-&gt;(0,2,2,3)-&gt;(0,1,2,4)\n\u94fe\u63a5\uff1ahttps://www.nowcoder.com/questionTerminal/9e988ccf4d324b6d8afe4b4b172968ee\n\u6765\u6e90\uff1a\u725b\u5ba2\u7f51\ninclude\ninclude\ninclude\ninclude\ninclude\nusing namespace std;\n/\u5c064\u676f\u5b50\u5012\u6c34\u95ee\u9898\u6539\u4e3a\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u676f\u5b50\u5012\u54114\u4e2a\u676f\u5b50/\nbitset Hash;/\uff08\u5927\u5c0f\u4e3a6464^4+6464^3+6464^2+6464^1+6464^0\uff09\u8bb0\u5f55\u6bcf\u6b21\u64cd\u4f5c\u540e\u7684ABCD\u676f\u5b50\u7684\u5f53\u524d\u5bb9\u91cf\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u8fc7/\nconst int MAX_STEP = 100000;\nint WQ[MAX_STEP][6];/\u8bb0\u5f55\u6bcf\u6b65\u64cd\u4f5c\u540e0\u548cABCD\u7684\u5f53\u524d\u5bb9\u91cf\uff0c\u6700\u540e\u4e00\u4e2a\u8bb0\u5f55\u64cd\u4f5c\u6b21\u6570/\nint Goal[5];/0\u548cABCD\u676f\u5b50\u6700\u7ec8\u72b6\u6001/\nint Cap[5]; /0\u548cABCD\u676f\u5b50\u7684\u6700\u5927\u5bb9\u91cf/\nint goalval;\nint head = 0;\nint tail = 0;\nvoid movw(int numfrom, int numto, int other1,int other2,int other3)/numfrom\u5012\u5165numto/\n{\n    int total = WQ[head][numfrom] + WQ[head][numto];/numfrom\u548cnumto\u7684\u603b\u91cf*/\n    WQ[tail][other1] = WQ[head][other1];\n    WQ[tail][other2] = WQ[head][other2];\n    WQ[tail][other3] = WQ[head][other3];\n    WQ[tail][5] = WQ[head][5] + 1;\n\nif (total&gt;Cap[numto])/*\u603b\u91cf\u548c\u88ab\u5012\u5165\u676f\u5b50\u7684\u5bb9\u91cf\u5927\u5c0f\uff1b\u5927\u4e8enumfrom\u5c31\u6709\u5269\u4f59\u7684\uff0c\u5426\u5219\u5168\u90e8\u5012\u5165numto*/\n{\n    WQ[tail][numfrom] = total - Cap[numto];\n    WQ[tail][numto] = Cap[numto];\n}\nelse\n{\n    WQ[tail][numfrom] = 0;\n    WQ[tail][numto] = total;\n}\n\nint hashval = WQ[tail][1] * 262144 + WQ[tail][2] * 4096 + WQ[tail][3] * 64 + WQ[tail][4];/*\u628aABCD\u676f\u5b50\u9700\u8981\u7684\u72b6\u6001\u62bd\u8c61\u4e3a\u4e00\u4e2a\u503c*/\nif (hashval == goalval) throw WQ[head][5] + 1;/*\u5224\u65ad\u662f\u5426\u4e3a\u6700\u7ec8\u72b6\u6001*/\n\nif (!Hash[hashval])/*\u8be5\u6b21\u64cd\u4f5c\u4e4b\u540e\u7684\u72b6\u6001\u4e4b\u524d\u672a\u5b58\u5728\u8fc7\u5e76\u8bb0\u5f55*/\n{\n    Hash[hashval] = true;\n    if (++tail == MAX_STEP) tail = 0;/*\u8d85\u51fa\u6700\u5927\u64cd\u4f5c\u6570*/\n}\n\n}\nint main()\n{\n    Hash.reset();\n    scanf(\"%d %d %d %d\", &amp;Cap[1], &amp;Cap[2], &amp;Cap[3],&amp;Cap[4]);\n    scanf(\"%d %d %d %d\", &amp;Goal[1], &amp;Goal[2], &amp;Goal[3], &amp;Goal[4]);\n    head = 0;\n    tail = 0;\n    goalval = Goal[1]  262144 + Goal[2]  4096 + Goal[3]64+Goal[4];/\u628aABCD\u676f\u5b50\u9700\u8981\u7684\u72b6\u6001\u62bd\u8c61\u4e3a\u4e00\u4e2a\u503c/\n    /\u5904\u7406\u5168\u90e8\u676f\u5b50\u4e2d\u6700\u540e\u5bb9\u91cf\u90fd\u4e3a0\u7684\u60c5\u51b5/\n    if (Goal[1] == 0 &amp;&amp; Goal[2] == 0 &amp;&amp; Goal[3] == 0 &amp;&amp; Goal[4] == 0 ) {\n        printf(\"0\");\n        return 0;\n    }\n    Cap[0] = 6400;/0\u676f\u5b50\u4e3a\u8db3\u591f\u5927\u7684\u676f\u5b50\uff0c0\u676f\u5b50\u7684\u5bb9\u91cf/\n    WQ[tail][0] = 6400;/0\u676f\u5b50\u7684\u5f53\u524d\u5bb9\u91cf/\n    /\u521d\u59cb\u5316ABCD\u676f\u5b50\u5f53\u524d\u503c\u4e3a0/\n    WQ[tail][1] = 0;\n    WQ[tail][2] = 0;\n    WQ[tail][3] = 0;\n    WQ[tail][4] = 0;\n    WQ[tail][5] = 0;\n    ++tail;\n    try {\n        /\u5c1d\u8bd5\u6bcf\u4e00\u79cd\u64cd\u4f5c/\n        while (head != tail)\n        {\n            /A\u5bfc\u5165B\uff0c\u5916\u5c42if\u5224\u65adA\u4e2d\u5f53\u524d\u5bb9\u91cf\u4e0d\u4e3a\u96f6\uff0c\u5185\u5c42\u5224\u65adB\u7684\u6700\u5927\u5bb9\u91cf\u4e0d\u4e3a0*/\n            if (WQ[head][0]) {\n                if(Cap[1])\n                    movw(0, 1, 2, 3, 4);\n                if (Cap[2])\n                    movw(0, 2, 1, 3, 4);\n                if (Cap[3])\n                    movw(0, 3, 1, 2, 4);\n                if (Cap[4])\n                    movw(0, 4, 1, 2, 3);\n            }\n\n        if (WQ[head][1]) {\n            if (Cap[0])\n            movw(1, 0, 2, 3, 4);\n            if (Cap[2])\n            movw(1, 2, 0, 3, 4);\n            if (Cap[3])\n            movw(1, 3, 0, 2, 4);\n            if (Cap[4])\n            movw(1, 4, 0, 2, 3);\n        }\n\n        if (WQ[head][2]) {\n            if (Cap[0])\n            movw(2, 0, 1, 3, 4);\n            if (Cap[1])\n            movw(2, 1, 0, 3, 4);\n            if (Cap[3])\n            movw(2, 3, 0, 1, 4);\n            if (Cap[4])\n            movw(2, 4, 0, 1, 3);\n        }\n\n        if (WQ[head][3]) {\n            if (Cap[0])\n            movw(3, 0, 1, 2, 4);\n            if (Cap[1])\n            movw(3, 1, 0, 2, 4);\n            if (Cap[2])\n            movw(3, 2, 0, 1, 4);\n            if (Cap[4])\n            movw(3, 4, 0, 1, 2);\n        }\n\n        if (WQ[head][4]) {\n            if (Cap[0])\n            movw(4, 0, 1, 2, 3);\n            if (Cap[1])\n            movw(4, 1, 0, 2, 3);\n            if (Cap[2])\n            movw(4, 2, 0, 1, 3);\n            if (Cap[3])\n            movw(4, 3, 0, 1, 2);\n        }\n\n        if (++head == MAX_STEP) {\n            head = 0;\n        }\n    }\n    printf(\"-1\");\n}\ncatch (int step)\n{\n    printf(\"%d\\n\", step);\n}\n\n}\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u7b97\u6cd53", "date": "2018-04-03T16:01:00-00.00", "path": "/archives/\u7b97\u6cd53/", "text": "BFS\u8d70\u8ff7\u5bab\n\n\n\n\u9898\u76ee\u63cf\u8ff0\n\u7ed9\u5b9a\u4e00\u4e2a n \u884c m \u5217\u7684\u5730\u7262\uff0c\u5176\u4e2d '.' \u8868\u793a\u53ef\u4ee5\u901a\u884c\u7684\u4f4d\u7f6e\uff0c'X' \u8868\u793a\u4e0d\u53ef\u901a\u884c\u7684\u969c\u788d\uff0c\u725b\u725b\u4ece (x0 , y0 ) \u4f4d\u7f6e\u51fa\u53d1\uff0c\u904d\u5386\u8fd9\u4e2a\u5730\u7262\uff0c\u548c\u4e00\u822c\u7684\u6e38\u620f\u6240\u4e0d\u540c\u7684\u662f\uff0c\u4ed6\u6bcf\u4e00\u6b65\u53ea\u80fd\u6309\u7167\u4e00\u4e9b\u6307\u5b9a\u7684\u6b65\u957f\u904d\u5386\u5730\u7262\uff0c\u8981\u6c42\u6bcf\u4e00\u6b65\u90fd\u4e0d\u53ef\u4ee5\u8d85\u8fc7\u5730\u7262\u7684\u8fb9\u754c\uff0c\u4e5f\u4e0d\u80fd\u5230\u8fbe\u969c\u788d\u4e0a\u3002\u5730\u7262\u7684\u51fa\u53e3\u53ef\u80fd\u5728\u4efb\u610f\u67d0\u4e2a\u53ef\u4ee5\u901a\u884c\u7684\u4f4d\u7f6e\u4e0a\u3002\u725b\u725b\u60f3\u77e5\u9053\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u4ed6\u9700\u8981\u591a\u5c11\u6b65\u624d\u53ef\u4ee5\u79bb\u5f00\u8fd9\u4e2a\u5730\u7262\u3002\n\u8f93\u5165\u63cf\u8ff0:\n\u6bcf\u4e2a\u8f93\u5165\u5305\u542b 1 \u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c m\uff081 &lt;= n, m &lt;= 50\uff09\uff0c\u8868\u793a\u5730\u7262\u7684\u957f\u548c\u5bbd\u3002\u63a5\u4e0b\u6765\u7684 n \u884c\uff0c\u6bcf\u884c m \u4e2a\u5b57\u7b26\uff0c\u63cf\u8ff0\u5730\u7262\uff0c\u5730\u7262\u5c06\u81f3\u5c11\u5305\u542b\u4e24\u4e2a '.'\u3002\u63a5\u4e0b\u6765\u7684\u4e00\u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570 x0, y0\uff0c\u8868\u793a\u725b\u725b\u7684\u51fa\u53d1\u4f4d\u7f6e\uff080 &lt;= x0 &lt; n, 0 &lt;= y0 &lt; m\uff0c\u5de6\u4e0a\u89d2\u7684\u5750\u6807\u4e3a \uff080, 0\uff09\uff0c\u51fa\u53d1\u4f4d\u7f6e\u4e00\u5b9a\u662f '.'\uff09\u3002\u4e4b\u540e\u7684\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 k\uff080 &lt; k &lt;= 50\uff09\u8868\u793a\u725b\u725b\u5408\u6cd5\u7684\u6b65\u957f\u6570\uff0c\u63a5\u4e0b\u6765\u7684 k \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 dx, dy \u8868\u793a\u6bcf\u6b21\u53ef\u9009\u62e9\u79fb\u52a8\u7684\u884c\u548c\u5217\u6b65\u957f\uff08-50 &lt;= dx, dy &lt;= 50\uff09\n\u8f93\u51fa\u63cf\u8ff0:\n\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u6700\u574f\u60c5\u51b5\u4e0b\u9700\u8981\u591a\u5c11\u6b21\u79fb\u52a8\u53ef\u4ee5\u79bb\u5f00\u5730\u7262\uff0c\u5982\u679c\u6c38\u8fdc\u65e0\u6cd5\u79bb\u5f00\uff0c\u8f93\u51fa -1\u3002\u4ee5\u4e0b\u6d4b\u8bd5\u7528\u4f8b\u4e2d\uff0c\u725b\u725b\u53ef\u4ee5\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52a8\uff0c\u5728\u6240\u6709\u53ef\u901a\u884c\u7684\u4f4d\u7f6e.\u4e0a\uff0c\u5730\u7262\u51fa\u53e3\u5982\u679c\u88ab\u8bbe\u7f6e\u5728\u53f3\u4e0b\u89d2\uff0c\u725b\u725b\u60f3\u79bb\u5f00\u9700\u8981\u79fb\u52a8\u7684\u6b21\u6570\u6700\u591a\uff0c\u4e3a3\u6b21\u3002\n\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;numeric&gt;\n#include &lt;algorithm&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;limits.h&gt;\n#include &lt;math.h&gt;\n#include &lt;queue&gt;\nusing namespace std;\n\ntypedef long long ll;\n\nint n, m;\nint direction[55][2];\nint dcnt;\nchar ground[55][55];\nint dis[55][55];\n\nstruct Point{\n    int x,y;\n    Point(){};\n    Point(int _x, int _y): x(_x), y(_y){}\n    Point go(int idx){\n        return Point(x+direction[idx][0], y+direction[idx][1]);\n    }\n    bool isOK(){\n        return x&gt;=0 &amp;&amp; y&gt;=0 &amp;&amp; x&lt;n &amp;&amp; y&lt;n &amp;&amp; ground[x][y]=='.';\n    }\n};\n\nint main(){\n    scanf(\"%d%d\", &amp;n,&amp;m);\n    for(int i=0;i&lt;n;++i)\n        scanf(\"%s\",ground[i]);\n\n    Point start;\n    scanf(\"%d%d\", &amp;start.x, &amp;start.y);\n    scanf(\"%d\", &amp;dcnt);\n    for(int i=0; i&lt;dcnt;++i)\n        scanf(\"%d%d\", &amp;direction[i][0], &amp;direction[i][1]);\n    fill(dis[0], dis[54]+55, INT_MAX);\n    dis[start.x][start.y]=0;\n\n    queue&lt;Point&gt; q;\n    q.push(start);\n    while(!q.empty()){\n        Point x=q.front();\n        q.pop();\n        for(int i=0; i&lt;dcnt; ++i){\n            Point y=x.go(i);\n            if(y.isOK()){\n                if(dis[y.x][y.y]&gt;dis[x.x][x.y]+1){\n                    dis[y.x][y.y]=dis[x.x][x.y]+1;\n                    q.push(y);\n                }\n\n            }\n        }\n    }\n\n    int ans=0;\n    for(int i=0; i&lt;n; ++i){\n        for(int j=0; j&lt;m; ++j){\n            if(ground[i][j]=='.') ans=max(ans, dis[i][j]);\n        }\n    }\n\n    printf(\"%d\\n\", ans==INT_MAX?-1:ans);\n    return 0;\n}\nBFS\u8d70\u8ff7\u5bab\n\u9898\u76ee\u63cf\u8ff0\n\u5c0f\u9752\u86d9\u6709\u4e00\u5929\u4e0d\u5c0f\u5fc3\u843d\u5165\u4e86\u4e00\u4e2a\u5730\u4e0b\u8ff7\u5bab,\u5c0f\u9752\u86d9\u5e0c\u671b\u7528\u81ea\u5df1\u4ec5\u5269\u7684\u4f53\u529b\u503cP\u8df3\u51fa\u8fd9\u4e2a\u5730\u4e0b\u8ff7\u5bab\u3002\u4e3a\u4e86\u8ba9\u95ee\u9898\u7b80\u5355,\u5047\u8bbe\u8fd9\u662f\u4e00\u4e2an*m\u7684\u683c\u5b50\u8ff7\u5bab,\u8ff7\u5bab\u6bcf\u4e2a\u4f4d\u7f6e\u4e3a0\u6216\u80051,0\u4ee3\u8868\u8fd9\u4e2a\u4f4d\u7f6e\u6709\u969c\u788d\u7269,\u5c0f\u9752\u86d9\u8fbe\u5230\u4e0d\u4e86\u8fd9\u4e2a\u4f4d\u7f6e;1\u4ee3\u8868\u5c0f\u9752\u86d9\u53ef\u4ee5\u8fbe\u5230\u7684\u4f4d\u7f6e\u3002\u5c0f\u9752\u86d9\u521d\u59cb\u5728(0,0)\u4f4d\u7f6e,\u5730\u4e0b\u8ff7\u5bab\u7684\u51fa\u53e3\u5728(0,m-1)(\u4fdd\u8bc1\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u90fd\u662f1,\u5e76\u4e14\u4fdd\u8bc1\u4e00\u5b9a\u6709\u8d77\u70b9\u5230\u7ec8\u70b9\u53ef\u8fbe\u7684\u8def\u5f84),\u5c0f\u9752\u86d9\u5728\u8ff7\u5bab\u4e2d\u6c34\u5e73\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\u8ddd\u79bb\u9700\u8981\u6d88\u80171\u70b9\u4f53\u529b\u503c,\u5411\u4e0a\u722c\u4e00\u4e2a\u5355\u4f4d\u8ddd\u79bb\u9700\u8981\u6d88\u80173\u4e2a\u5355\u4f4d\u7684\u4f53\u529b\u503c,\u5411\u4e0b\u79fb\u52a8\u4e0d\u6d88\u8017\u4f53\u529b\u503c,\u5f53\u5c0f\u9752\u86d9\u7684\u4f53\u529b\u503c\u7b49\u4e8e0\u7684\u65f6\u5019\u8fd8\u6ca1\u6709\u5230\u8fbe\u51fa\u53e3,\u5c0f\u9752\u86d9\u5c06\u65e0\u6cd5\u9003\u79bb\u8ff7\u5bab\u3002\u73b0\u5728\u9700\u8981\u4f60\u5e2e\u52a9\u5c0f\u9752\u86d9\u8ba1\u7b97\u51fa\u80fd\u5426\u7528\u4ec5\u5269\u7684\u4f53\u529b\u503c\u8df3\u51fa\u8ff7\u5bab(\u5373\u8fbe\u5230(0,m-1)\u4f4d\u7f6e)\u3002\n\u8f93\u5165\u63cf\u8ff0:\n\u8f93\u5165\u5305\u62ecn+1\u884c:\n \u7b2c\u4e00\u884c\u4e3a\u4e09\u4e2a\u6574\u6570n,m(3 &lt;= m,n &lt;= 10),P(1 &lt;= P &lt;= 100)\n \u63a5\u4e0b\u6765\u7684n\u884c:\n \u6bcf\u884cm\u4e2a0\u6216\u80051,\u4ee5\u7a7a\u683c\u5206\u9694\n\u8f93\u51fa\u63cf\u8ff0:\n\u5982\u679c\u80fd\u9003\u79bb\u8ff7\u5bab,\u5219\u8f93\u51fa\u4e00\u884c\u4f53\u529b\u6d88\u8017\u6700\u5c0f\u7684\u8def\u5f84,\u8f93\u51fa\u683c\u5f0f\u89c1\u6837\u4f8b\u6240\u793a;\u5982\u679c\u4e0d\u80fd\u9003\u79bb\u8ff7\u5bab,\u5219\u8f93\u51fa\"Can not escape!\"\u3002 \u6d4b\u8bd5\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u552f\u4e00\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\u00a0\n/*\n\u00a0* \u58f0\u660e\uff1a\u8fd9\u4efd\u4ee3\u7801\u662f\u7167\u642c@null_ptr\u7684 \u4f46\u662f\u4ee3\u7801\u6ca1\u4ec0\u4e48\u6ce8\u91ca\uff0c\u4e4d\u4e00\u770b\u4e0d\u597d\u7406\u89e3\uff0c\n\u00a0* \u6240\u4ee5\u6211\u4f5c\u4e86\u6bd4\u8f83\u8be6\u7ec6\u7684\u6ce8\u91ca\uff0c\u65b9\u4fbf\u53c2\u8003\n\u00a0* \u57fa\u672c\u601d\u60f3\uff1a\u5178\u578b\u7684\u8ff7\u5bab\u95ee\u9898\uff0cDFS\u7a77\u4e3e\u6240\u6709\u8def\u5f84\uff0c\u627e\u51fa\u5269\u4f59\u4f53\u529b\u6700\u591a\u7684\u8def\u5f84\n\u00a0*/\n\u00a0\n#define VISITED 2\n\u00a0\n\u00a0\nint m, n, P;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // \u8f93\u5165m\uff0cn\uff0cP\nint maze[10][10];\u00a0\u00a0 // \u8ff7\u5bab\u5730\u56fe\nint dir[4][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};\u00a0\u00a0\u00a0\u00a0 // \u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u79fb\u52a8\uff0c\u4f8b\u5982\uff1a{0, -1}\u4ee3\u8868\u5411\u5de6\u79fb\u52a8\u4e00\u6b65\nint cost[4] = {-1, -1, -3, 0};\u00a0\u00a0\u00a0 // \u5de6\uff0c\u53f3\uff0c\u4e0a\uff0c\u4e0b\u79fb\u52a8\u7684\u4f53\u529b\u6d88\u8017\uff0c\u4f8b\u5982\uff1a{0\uff0c -1}\u5bf9\u5e94-1\nint final_P = -200;\u00a0\u00a0\u00a0 // \u5269\u4f59\u7684\u4f53\u529b\u503c\uff0c\u521d\u59cb\u4e3a\u8f83\u5c0f\u7684\u6570\uff0c\u4fdd\u8bc1final_P\u88ab\u6b63\u786e\u66f4\u65b0\n\u00a0\n// \u5b58\u50a8\u5404\u70b9\u7684\u6570\u636e\u7ed3\u6784\nstruct mazePoint {\n\u00a0\u00a0\u00a0\u00a0mazePoint(int _x, int _y): x(_x), y(_y) {}\n\u00a0\u00a0\u00a0\u00a0int x, y;\n};\n// \u5b58\u50a8\u6bcf\u6b21\u904d\u5386\u5230\u7684\u8def\u5f84\nvector&lt;mazePoint&gt; pathStack;\n// \u5b58\u50a8\u6700\u7ec8\u7684\u6700\u4f18\u8def\u5f84\nvector&lt;mazePoint&gt; minCostPath;\n\u00a0\n// \u51fd\u6570\uff1a\u6253\u5370\u8def\u5f84\nvoid printPath(const vector&lt;mazePoint&gt;&amp; path) {\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i &lt; path.size(); ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout &lt;&lt; &quot;[&quot; &lt;&lt; path[i].x &lt;&lt; &quot;,&quot; &lt;&lt; path[i].y &lt;&lt; &quot;]&quot;;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (i &lt; path.size() - 1) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout &lt;&lt; &quot;,&quot;;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n\u00a0\n// \u51fd\u6570\uff1a\u5bfb\u627e\u6700\u4f18\u8def\u5f84\nvoid search(int x, int y, int cur_P) {\n\u00a0\u00a0\u00a0\u00a0// \u5c06\u5f53\u524d\u70b9\u52a0\u5165\u8def\u5f84\u5e76\u6807\u8bb0\u4e3aVISITED\n\u00a0\u00a0\u00a0\u00a0pathStack.push_back(mazePoint(x, y));\n\u00a0\u00a0\u00a0\u00a0maze[x][y] = VISITED;\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// \u5982\u679c\u5f53\u524d\u70b9\u4e3a\u51fa\u53e3\u4e14\u5f53\u524d\u4f53\u529b\u503c&gt;=0\uff0c\u5219\u66f4\u65b0final_P\u4e0eminCostPath\uff0c\u5e76\u8fd4\u56de\n\u00a0\u00a0\u00a0\u00a0if (x == 0 &amp;&amp; y == m-1 &amp;&amp; cur_P &gt;= 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (cur_P &gt; final_P) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0final_P = cur_P;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0minCostPath = pathStack;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pathStack.pop_back();\u00a0\u00a0 // \u4e3a\u4e86\u56de\u9000\u81f3\u4e4b\u524d\u7684\u8282\u70b9\uff0c\u5c06\u5f53\u524d\u7ed3\u70b9\u5f39\u51fa\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maze[x][y] = 1;\u00a0\u00a0\u00a0 // \u6ce8\u610f\uff1a\u4e4b\u524dmaze[x][y]\u88ab\u6807\u8bb0\u4e3aVISITED\uff08\u503c\u4e3a2\uff09\uff0c\u56de\u9000\u540e\u5e94\u8be5\u5c06\u5176\u8fd8\u539f\u4e3a1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0// \u5982\u679c\u5f53\u524d\u70b9\u5e76\u975e\u51fa\u53e3\u4e14\u5f53\u524d\u4f53\u529b\u503c&gt;=0\uff0c\u5219\u5206\u522b\u5411\u5de6\u53f3\u4e0a\u4e0b\u56db\u4e2a\u65b9\u5411\u63a2\u7d22\uff0c\u5e76\u8ba1\u7b97\u76f8\u5e94\u7684\u6d88\u8017\n\u00a0\u00a0\u00a0\u00a0// \u5982\u679c\u65b0\u7684\u70b9\u518d\u8fb9\u754c\u5185\u4e14\u4e3a\u53ef\u8fbe\u70b9\uff0c\u9012\u5f52\u8c03\u7528search\u51fd\u6570\n\u00a0\u00a0\u00a0\u00a0if (cur_P &gt; 0) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int i = 0; i &lt; 4; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int nx = x + dir[i][0];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int ny = y + dir[i][1];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int nP = cur_P + cost[i];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; maze[nx][ny] == 1)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0search(nx, ny, nP);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0pathStack.pop_back();\u00a0\u00a0\u00a0 // \u4e3a\u4e86\u56de\u9000\u81f3\u4e4b\u524d\u7684\u8282\u70b9\uff0c\u5c06\u5f53\u524d\u7ed3\u70b9\u5f39\u51fa\n\u00a0\u00a0\u00a0\u00a0maze[x][y] = 1;\u00a0\u00a0\u00a0 // \u6ce8\u610f\uff1a\u4e4b\u524dmaze[x][y]\u88ab\u6807\u8bb0\u4e3aVISITED\uff08\u503c\u4e3a2\uff09\uff0c\u56de\u9000\u540e\u5e94\u8be5\u5c06\u5176\u8fd8\u539f\u4e3a1\n}\n\u00a0\n// \u4e3b\u51fd\u6570\nint main() {\n\u00a0\u00a0\u00a0\u00a0cin &gt;&gt; n &gt;&gt; m &gt;&gt; P;\n\u00a0\u00a0\u00a0\u00a0for (int i = 0; i &lt; n; ++i)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (int j = 0; j &lt; m; ++j)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cin &gt;&gt; maze[i][j];\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0search(0, 0, P);\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if (final_P != -200)\u00a0\u00a0\u00a0 // \u5982\u679cfinal_P\u66f4\u65b0\u8fc7\uff0c\u8f93\u51fa\u6700\u4f18\u8def\u5f84\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printPath(minCostPath);\n\u00a0\u00a0\u00a0\u00a0else\u00a0\u00a0\u00a0 // \u5982\u679cfinal_P\u4e3a\u521d\u59cb\u503c-200\uff0c\u4ee3\u8868\u5176\u6ca1\u6709\u88ab\u66f4\u65b0\u8fc7\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6ca1\u6709\u53ef\u884c\u8def\u5f84\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout &lt;&lt; &quot;Can not escape!&quot;;\n\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n\n\u6b63\u5219\u5339\u914d\u8f93\u5165\n\u8f93\u5165\u4e24\u624b\u724c\uff0c\u4e24\u624b\u724c\u4e4b\u95f4\u7528\u201c-\u201d\u8fde\u63a5\uff0c\u6bcf\u624b\u724c\u7684\u6bcf\u5f20\u724c\u4ee5\u7a7a\u683c\u5206\u9694\uff0c\u201c-\u201d\u4e24\u8fb9\u6ca1\u6709\u7a7a\u683c\uff0c\u59824 4 4 4-joker JOKER\u3002\n\nscanf(\"%[^-]-%[^\\n]\", a, b);\n\u5927\u6574\u6570\u8fd0\u7b97\u4e0e\u8fdb\u5236\u8f6c\u6362\nhttps://blog.kedixa.top/2017/cpp-bigint-overview/\n\u7b80\u5355\u8fdb\u5236\u8f6c\u6362\n\u5199\u51fa\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u63a5\u53d7\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u7684\u6570\u503c\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa\u8be5\u6570\u503c\u7684\u5341\u8fdb\u5236\u5b57\u7b26\u4e32\u3002\uff08\u591a\u7ec4\u540c\u65f6\u8f93\u5165 \uff09\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n\u00a0\u00a0 \u00a0int a;\n\u00a0\u00a0 \u00a0while(cin&gt;&gt;hex&gt;&gt;a){\n\u00a0\u00a0 \u00a0cout&lt;&lt;a&lt;&lt;endl;\n\u00a0\u00a0 \u00a0}\n}\n\u6e38\u5386\u9b54\u6cd5\u738b\u56fd\n\u9b54\u6cd5\u738b\u56fd\u4e00\u5171\u6709n\u4e2a\u57ce\u5e02,\u7f16\u53f7\u4e3a0~n-1\u53f7,n\u4e2a\u57ce\u5e02\u4e4b\u95f4\u7684\u9053\u8def\u8fde\u63a5\u8d77\u6765\u6070\u597d\u6784\u6210\u4e00\u68f5\u6811\u3002\n\u5c0f\u6613\u73b0\u5728\u57280\u53f7\u57ce\u5e02,\u6bcf\u6b21\u884c\u52a8\u5c0f\u6613\u4f1a\u4ece\u5f53\u524d\u6240\u5728\u7684\u57ce\u5e02\u8d70\u5230\u4e0e\u5176\u76f8\u90bb\u7684\u4e00\u4e2a\u57ce\u5e02,\u5c0f\u6613\u6700\u591a\u80fd\u884c\u52a8L\u6b21\u3002\n\u5982\u679c\u5c0f\u6613\u5230\u8fbe\u8fc7\u67d0\u4e2a\u57ce\u5e02\u5c31\u89c6\u4e3a\u5c0f\u6613\u6e38\u5386\u8fc7\u8fd9\u4e2a\u57ce\u5e02\u4e86,\u5c0f\u6613\u73b0\u5728\u8981\u5236\u5b9a\u597d\u7684\u65c5\u6e38\u8ba1\u5212\u4f7f\u4ed6\u80fd\u6e38\u5386\u6700\u591a\u7684\u57ce\u5e02,\u8bf7\u4f60\u5e2e\u4ed6\u8ba1\u7b97\u4e00\u4e0b\u4ed6\u6700\u591a\u80fd\u6e38\u5386\u8fc7\u591a\u5c11\u4e2a\u57ce\u5e02(\u6ce8\u610f0\u53f7\u57ce\u5e02\u5df2\u7ecf\u6e38\u5386\u4e86,\u6e38\u5386\u8fc7\u7684\u57ce\u5e02\u4e0d\u91cd\u590d\u8ba1\u7b97)\u3002\n\u601d\u8def\uff1a\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\n\u3000\u3000\u3000\u3000\u4e00\u662f\u5f53\u5c0f\u6613\u8d70\u7684\u6b65\u6570\u5c0f\u4e8e\u6811\u7684\u6700\u957f\u94fe\n\u3000\u3000\u3000\u3000\u4e8c\u662f\u5f53\u5c0f\u6613\u8d70\u7684\u6b65\u6570\u5927\u4e8e\u6700\u957f\u94fe\n\u3000\u3000\u3000\u3000\u3000\u3000\u8fd9\u65f6\u5019 \u6700\u957f\u94fe\u662f\u4e00\u5b9a\u8981\u8d70\u7684 \u90a3\u5269\u4e0b\u7684\u6b65\u6570\u6700\u4f18\u7684\u60c5\u51b5\u662f\u8d70\u4e00\u6b65\u8d70\u8fc7\u7684\u57ce\u5e02 \u518d\u5230\u4e00\u4e2a\u6ca1\u8d70\u8fc7\u7684\u57ce\u5e02 \u518d\u9000\u56de\u6765 \u518d\u8d70\u6ca1\u8d70\u7684\u57ce\u5e02\n\u3000\u3000\u3000\u3000\u3000\u3000\u8fd9\u6837\u6700\u591a\u53ef\u4ee5\u8d70(L-MAX_L)/2\u4e2a\u57ce\u5e02\n\u3000\u3000\u3000\u3000\u6700\u540emin(n,MAX_L+(L-MAX_L)/2)\n\n#include &lt;bits/stdc++.h&gt;\n\u00a0\nusing namespace std;\n\u00a0\nconst int maxn = 50 + 5;\nint n, L;\nint parent[maxn];\nint dp[200];\nint main() {\n\u00a0\u00a0\u00a0\u00a0scanf(\"%d%d\", &amp;n, &amp;L);\n\u00a0\u00a0\u00a0\u00a0for(int i = 0; i &lt; n - 1; i++) scanf(\"%d\", &amp;parent[i]);\n\u00a0\u00a0\u00a0\u00a0int mx = 0;\n\u00a0\u00a0\u00a0\u00a0for(int i = 0; i &lt; n - 1; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dp[i + 1] = dp[parent[i]] + 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mx = max(mx, dp[i + 1]);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0int d = min(L, mx);\n\u00a0\u00a0\u00a0\u00a0cout &lt;&lt; min((n), 1 + d + (L - d) / 2) &lt;&lt; endl;\n\u00a0\u00a0\u00a0\u00a0return 0;\n}\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u7b97\u6cd52", "date": "2018-04-01T14:15:00-00.00", "path": "/archives/\u7b97\u6cd52/", "text": "\u987a\u65f6\u9488\u6253\u5370\u77e9\u9635\n\n\n\n\n/*\u89e3\u9898\u601d\u8def\uff1a\u987a\u65f6\u9488\u6253\u5370\u5c31\u662f\u6309\u5708\u6570\u5faa\u73af\u6253\u5370\uff0c\u4e00\u5708\u5305\u542b\u4e24\u884c\u6216\u8005\u4e24\u5217\uff0c\u5728\u6253\u5370\u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u67d0\n\u4e00\u5708\u4e2d\u53ea\u5305\u542b\u4e00\u884c\uff0c\u8981\u5224\u65ad\u4ece\u5de6\u5411\u53f3\u6253\u5370\u548c\u4ece\u53f3\u5411\u5de6\u6253\u5370\u7684\u65f6\u5019\u662f\u5426\u4f1a\u51fa\u73b0\u91cd\u590d\u6253\u5370\uff0c\u540c\u6837\u53ea\n\u5305\u542b\u4e00\u5217\u65f6\uff0c\u8981\u5224\u65ad\u4ece\u4e0a\u5411\u4e0b\u6253\u5370\u548c\u4ece\u4e0b\u5411\u4e0a\u6253\u5370\u7684\u65f6\u5019\u662f\u5426\u4f1a\u51fa\u73b0\u91cd\u590d\u6253\u5370\u7684\u60c5\u51b5*/\nclass Solution {\npublic:\n\u00a0\u00a0\u00a0\u00a0vector&lt;int&gt; printMatrix(vector&lt;vector&lt;int&gt; &gt; matrix) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector&lt;int&gt;res;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.clear();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int row=matrix.size();//\u884c\u6570\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int collor=matrix[0].size();//\u5217\u6570\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u8ba1\u7b97\u6253\u5370\u7684\u5708\u6570\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int circle=((row&lt;collor?row:collor)-1)/2+1;//\u5708\u6570\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i=0;i&lt;circle;i++){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u4ece\u5de6\u5411\u53f3\u6253\u5370\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int j=i;j&lt;collor-i;j++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.push_back(matrix[i][j]);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u4ece\u4e0a\u5f80\u4e0b\u7684\u6bcf\u4e00\u5217\u6570\u636e\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int k=i+1;k&lt;row-i;k++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.push_back(matrix[k][collor-1-i]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u5224\u65ad\u662f\u5426\u4f1a\u91cd\u590d\u6253\u5370(\u4ece\u53f3\u5411\u5de6\u7684\u6bcf\u884c\u6570\u636e)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int m=collor-i-2;(m&gt;=i)&amp;&amp;(row-i-1!=i);m--)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.push_back(matrix[row-i-1][m]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u5224\u65ad\u662f\u5426\u4f1a\u91cd\u590d\u6253\u5370(\u4ece\u4e0b\u5f80\u4e0a\u7684\u6bcf\u4e00\u5217\u6570\u636e)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int n=row-i-2;(n&gt;i)&amp;&amp;(collor-i-1!=i);n--)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.push_back(matrix[n][i]);}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return res;\n\u00a0\u00a0\u00a0\u00a0}\n};\n\n\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\n\u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002\n\u4e5f\u5c31\u662f\u5c42\u6b21\u904d\u5386\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    vector&lt;int&gt; PrintFromTopToBottom(TreeNode* root) {\n        queue&lt;TreeNode*&gt; tmp;\n        vector&lt;int&gt; ans;\n        if(!root) return ans;\n        tmp.push(root);\n        while(!tmp.empty()){\n            auto fr = tmp.front();\n            tmp.pop();\n            if(!fr) continue;/* \u8fd9\u91cc, \u6240\u6709\u7a7a\u6307\u9488\u90fd\u5148\u5165\u961f\u7136\u540e\u518d\u5224\u65ad\u662f\u4e0d\u662f\u8981\u8f93\u51fa*/\n            ans.push_back(fr-&gt;val);\n            tmp.push(fr-&gt;left);\n            tmp.push(fr-&gt;right);\n        }\n        return ans;\n\n    }\n};\n\n\u5224\u65adBTS\u7684\u540e\u5e8f\n\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8f93\u51faYes,\u5426\u5219\u8f93\u51faNo\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002\n\\*\u5de6\u5b50\u6811\u4e00\u5b9a\u6bd4\u53f3\u5b50\u6811\u5c0f\uff0c\u56e0\u6b64\u53bb\u6389\u6839\u7ed3\u70b9\u540e\uff0c\u6570\u5b57\u5206\u4e3aleft\uff0cright\u4e24\u90e8\u5206\uff0cright\u90e8\u5206\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u662f\u53f3\u5b50\u6811\u7684\u6839\uff0c\u4e14\u5b83\u6bd4\u5de6\u5b50\u6811\u6240\u6709\u7ed3\u70b9\u7684\u503c\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u53ea\u770b\u6709\u5b50\u6811\u662f\u5426\u7b26\u5408\u6761\u4ef6\u5373\u53ef\uff0c\u5373\u4f7f\u5230\u8fbe\u4e86\u5de6\u5b50\u6811\uff0c\u5de6\u5b50\u6811\u4e5f\u53ef\u4ee5\u770b\u51fa\u7531\u5de6\u53f3\u5b50\u6811\u7ec4\u6210\u7684\u6811\u8fd8\u50cf\u53f3\u5b50\u6811\u90a3\u6837\u5904\u7406.\n\u5bf9\u4e8e\u5de6\u5b50\u6811\u56de\u5230\u4e86\u539f\u95ee\u9898\uff0c\u5bf9\u4e8e\u53f3\u5b50\u6811\uff0c\u5de6\u5b50\u6811\u7684\u6240\u6709\u503c\u90fd\u6bd4\u53f3\u5b50\u6811\u7684\u6839\u5c0f\uff0c\u53ef\u4ee5\u6682\u65f6\u628a\u4ed6\u770b\u51fa\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\uff0c\u53ea\u9700\u770b\u770b\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u662f\u5426\u7b26\u5408\u8981\u6c42\u5373\u53ef.*\\\n\nclass Solution {\npublic:\n    bool VerifySquenceOfBST(vector&lt;int&gt; sequence) {\n        int len = sequence.size();\n        if(len==0) return false;\n        int i=0;\n        while(len--){\n            while(sequence[i]&lt;sequence[len]) i++;\n            while(sequence[i]&gt;sequence[len]) i++;\n            if(i&lt;len) return false;\n            i=0;\n        }\n        return true;\n    }\n};\n\n\u4e8c\u53c9\u6811\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84\n\u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    vector&lt;vector&lt;int&gt; &gt; FindPath(TreeNode* root,int expectNumber) {\n        if(root==NULL) return buffer;\n        tmp.push_back(root-&gt;val);\n        if(expectNumber-root-&gt;val == 0 &amp;&amp; root-&gt;left==NULL &amp;&amp; root-&gt;right==NULL)\n            buffer.push_back(tmp);\n        FindPath(root-&gt;left, expectNumber-root-&gt;val);\n        FindPath(root-&gt;right,expectNumber-root-&gt;val);\n        if(tmp.size()!=0)\n            tmp.pop_back();\n        return buffer;\n    }\nprivate:\n    vector&lt;int&gt; tmp;\n    vector&lt;vector&lt;int&gt; &gt; buffer;\n\n};\n\n\u590d\u6742\u94fe\u8868\u7684\u590d\u5236\n\u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002\uff08\u6ce8\u610f\uff0c\u8f93\u51fa\u7ed3\u679c\u4e2d\u8bf7\u4e0d\u8981\u8fd4\u56de\u53c2\u6570\u4e2d\u7684\u8282\u70b9\u5f15\u7528\uff0c\u5426\u5219\u5224\u9898\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u8fd4\u56de\u7a7a\uff09\n\u4e00\u79cd\u662f\n\n\u00a0\u00a0\u00a0\u00a0/*\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\u3001\u590d\u5236\u6bcf\u4e2a\u8282\u70b9\uff0c\u5982\uff1a\u590d\u5236\u8282\u70b9A\u5f97\u5230A1\uff0c\u5c06A1\u63d2\u5165\u8282\u70b9A\u540e\u9762\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\u3001\u904d\u5386\u94fe\u8868\uff0cA1-&gt;random = A-&gt;random-&gt;next;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03\u3001\u5c06\u94fe\u8868\u62c6\u5206\u6210\u539f\u94fe\u8868\u548c\u590d\u5236\u540e\u7684\u94fe\u8868\n\u00a0\u00a0\u00a0\u00a0*/\n\u53e6\u4e00\u79cd\u7528MAP\n\n/*\nstruct RandomListNode {\n    int label;\n    struct RandomListNode *next, *random;\n    RandomListNode(int x) :\n            label(x), next(NULL), random(NULL) {\n    }\n};\n*/\nclass Solution {\npublic:\n    RandomListNode* Clone(RandomListNode* pHead)\n    {\n        if(pHead==NULL) return NULL;\n\n        map&lt;RandomListNode*, RandomListNode*&gt; m;\n        RandomListNode* pHead1 = pHead;\n        RandomListNode* pHead2 = new RandomListNode(pHead-&gt;label);\n        RandomListNode* newHead = pHead2;\n\n        m[pHead1] = pHead2;\n        while(pHead1){\n            if(pHead1-&gt;next)\n                pHead2-&gt;next = new RandomListNode(pHead1-&gt;next-&gt;label);\n            else\n                pHead2-&gt;next = NULL;\n            pHead1 = pHead1-&gt;next;\n            pHead2 = pHead2-&gt;next;\n            m[pHead1] = pHead2;\n        }\n\n        pHead1 = pHead;\n        pHead2 = newHead;\n        while(pHead1){\n            pHead2-&gt;random = m[pHead1-&gt;random];\n            pHead1 = pHead1-&gt;next;\n            pHead2 = pHead2-&gt;next;\n        }\n        return newHead;\n    }\n};\n\u5b57\u7b26\u4e32\u7684\u5168\u6392\u5217\n\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc,\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a,b,c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc,acb,bac,bca,cab\u548ccba\u3002\n\u8f93\u5165\u63cf\u8ff0:\n\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32,\u957f\u5ea6\u4e0d\u8d85\u8fc79(\u53ef\u80fd\u6709\u5b57\u7b26\u91cd\u590d),\u5b57\u7b26\u53ea\u5305\u62ec\u5927\u5c0f\u5199\u5b57\u6bcd\u3002\n\n\nclass Solution {\npublic:\n\u00a0\u00a0\u00a0\u00a0vector&lt;string&gt; Permutation(string str) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(str.empty())\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ans;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chang(str, 0, str.size());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sort(ans.begin(),ans.end());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0auto it = unique(ans.begin(),ans.end());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ans.erase(it,ans.end());\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return ans;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0void chang(string &amp;str,int start,int len){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(start == len)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ans.push_back(str);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for(int i = start; i &lt; len; i++){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swap(str[start],str[i]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chang(str, start+1,len);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swap(str[start],str[i]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0vector&lt;string&gt; ans;\n};\n\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57\n\u6570\u7ec4\u4e2d\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a9\u7684\u6570\u7ec4{1,2,3,2,2,2,5,4,2}\u3002\u7531\u4e8e\u6570\u5b572\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u4e865\u6b21\uff0c\u8d85\u8fc7\u6570\u7ec4\u957f\u5ea6\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u8f93\u51fa2\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8f93\u51fa0\u3002\n\nclass Solution {\npublic:\n    int MoreThanHalfNum_Solution(vector&lt;int&gt; numbers) {\n        map&lt;int,int&gt; m;\n        int num=0;\n        int len = numbers.size();\n        for (auto i : numbers){\n            num = ++m[i];\n            if (num&gt; (len)/2)\n                return i;\n        }\n        return 0;\n    }\n};\n\u6700\u5927\u5b50\u6570\u7ec4\u8fde\u7eed\u548c\nDP\n\nclass Solution {\npublic:\n    int FindGreatestSumOfSubArray(vector&lt;int&gt; array) {\n        vector&lt;int&gt; dp(array.size(),0);\n        dp[0] = array[0];\n        int mx=INT_MIN;\n        for(int i=0; i&lt;=array.size()-1; ++i){\n            if (dp[i-1]&lt;=0) dp[i]=array[i];\n            else dp[i]=array[i] + dp[i-1];\n            if (dp[i]&gt;mx) mx=dp[i];\n        }\n        return mx;\n    }\n};\n\u8d2a\u5fc3\n\nclass Solution {\npublic:\n    int FindGreatestSumOfSubArray(vector&lt;int&gt; array) {\n        int cursum=0;\n        int massubsum=INT_MIN;\n        for(int i=0; i&lt;array.size(); ++i){\n            if(cursum&lt;=0)\n                cursum=array[i];\n            else\n                cursum+=array[i];\n\n            if(cursum&gt;massubsum)\n                massubsum = cursum;\n        }\n        return massubsum;\n    }\n};\n\u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\n\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\u8f93\u5165\u6570\u7ec4{3\uff0c32\uff0c321}\uff0c\u5219\u6253\u5370\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57\u4e3a321323\u3002\n\u81ea\u5b9a\u4e49sort\n\nclass Solution {\npublic:\n    static bool cmp(int a, int b){\n        string A = to_string(a);\n        string B = to_string(b);\n        return A+B &lt; B+A;\n        }\n    string PrintMinNumber(vector&lt;int&gt; numbers) {\n        string ans = \"\";\n        sort(numbers.begin(), numbers.end(), cmp);\n        for (auto i : numbers)\n            ans += to_string(i);\n        return ans;\n    }\n};\n\u7b2c\u4e00\u6b21\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\n\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32(1&lt;=\u5b57\u7b26\u4e32\u957f\u5ea6&lt;=10000\uff0c\u5168\u90e8\u7531\u5b57\u6bcd\u7ec4\u6210)\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26,\u5e76\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\n\nclass Solution {\npublic:\n    int FirstNotRepeatingChar(string str) {\n        map&lt;char, int&gt; mp;\n        for(int i=0; i&lt;str.size(); ++i)\n            mp[str[i]]++;\n        for(int i=0; i&lt;str.size(); ++i){\n            if(mp[str[i]] == 1)\n                return i;\n        }\n        return -1;\n    }\n};\n\u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9\n/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n            val(x), next(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    ListNode* FindFirstCommonNode( ListNode* pHead1, ListNode* pHead2) {\n        ListNode* p1, *p2;\n        p1 = pHead1;\n        p2 = pHead2;\n        while(p1!=p2){\n            p1 = (p1==NULL)?pHead2:p1-&gt;next;\n            p2 = (p2==NULL)?pHead1:p2-&gt;next;\n        }\n        return p1;\n    }\n};\n\n\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\n\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(pRoot==NULL)\n            return 0;\n        return max(TreeDepth(pRoot-&gt;left), TreeDepth(pRoot-&gt;right))+1;\n    }\n};\n\u5de6\u65cb\u5b57\u7b26\u4e32\n\u6c47\u7f16\u8bed\u8a00\u4e2d\u6709\u4e00\u79cd\u79fb\u4f4d\u6307\u4ee4\u53eb\u505a\u5faa\u73af\u5de6\u79fb\uff08ROL\uff09\uff0c\u73b0\u5728\u6709\u4e2a\u7b80\u5355\u7684\u4efb\u52a1\uff0c\u5c31\u662f\u7528\u5b57\u7b26\u4e32\u6a21\u62df\u8fd9\u4e2a\u6307\u4ee4\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b57\u7b26\u5e8f\u5217S\uff0c\u8bf7\u4f60\u628a\u5176\u5faa\u73af\u5de6\u79fbK\u4f4d\u540e\u7684\u5e8f\u5217\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u5e8f\u5217S=\u201dabcXYZdef\u201d,\u8981\u6c42\u8f93\u51fa\u5faa\u73af\u5de6\u79fb3\u4f4d\u540e\u7684\u7ed3\u679c\uff0c\u5373\u201cXYZdefabc\u201d\u3002\u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff1fOK\uff0c\u641e\u5b9a\u5b83\uff01\n\nclass Solution {\npublic:\n    string LeftRotateString(string str, int n) {\n        if(str.size()==0) return \"\";\n        n = n%str.size();\n        reverse(str.begin(), str.begin()+n);\n        reverse(str.begin()+n, str.end());\n        reverse(str.begin(), str.end());\n\n\n       /* reverse(str.begin(), str.end());\n        reverse(str.begin(), str.begin() + str.size() - n);\n        reverse(str.begin() + str.size() - n, str.end());*/\n        return str;\n    }\n};\n#\n\u6c421+2+3+...+n\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case\u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002\n\u89e3\u9898\u601d\u8def\uff1a\n1.\u9700\u5229\u7528\u903b\u8f91\u4e0e\u7684\u77ed\u8def\u7279\u6027\u5b9e\u73b0\u9012\u5f52\u7ec8\u6b62\u3002 2.\u5f53n==0\u65f6\uff0c(n&gt;0)&amp;&amp;((sum+=Sum_Solution(n-1))&gt;0)\u53ea\u6267\u884c\u524d\u9762\u7684\u5224\u65ad\uff0c\u4e3afalse\uff0c\u7136\u540e\u76f4\u63a5\u8fd4\u56de0\uff1b\n3.\u5f53n&gt;0\u65f6\uff0c\u6267\u884csum+=Sum_Solution(n-1)\uff0c\u5b9e\u73b0\u9012\u5f52\u8ba1\u7b97Sum_Solution(n)\u3002\n\n\u00a0\u00a0\u00a0\u00a0public int Sum_Solution(int n) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int sum = n;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0boolean ans = (n&gt;0)&amp;&amp;((sum+=Sum_Solution(n-1))&gt;0);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return sum;\n\u00a0\u00a0\u00a0\u00a0}\n\u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5\nclass Solution {\npublic:\n    int Add(int num1, int num2)\n    {\n        if(num2==0) return num1;\n        return Add(num1^num2, (num1&amp;num2)&lt;&lt;1);\n    }\n};\n\u6269\u5c55\u9898\u76ee\uff1a\n\u4e0d\u4f7f\u7528\u65b0\u7684\u53d8\u91cf\uff0c\u4ea4\u6362\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\n\u65b9\u6cd5\u4e00\uff1a\u57fa\u4e8e\u52a0\u51cf\u6cd5\n\na = a + b;\nb = a - b;\na = a - b;\n\u65b9\u6cd5\u4e8c\uff1a\u57fa\u4e8e\u5f02\u6216\u8fd0\u7b97\n\na = a ^ b;\nb = a ^ b;\na = a ^ b;\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u7b97\u6cd5\u98981", "date": "2018-03-29T16:16:00-00.00", "path": "/archives/\u7b97\u6cd5\u98981/", "text": "\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\n\n\n\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\u3002\n/**\n*  struct ListNode {\n*        int val;\n*        struct ListNode *next;\n*        ListNode(int x) :\n*              val(x), next(NULL) {\n*        }\n*  };\n*/\nclass Solution {\npublic:\n    vector&lt;int&gt; printListFromTailToHead(ListNode* head) {\n        vector&lt;int&gt; res;\n        if(head != NULL){\n            res = printListFromTailToHead(head-&gt;next);\n            res.push_back(head-&gt;val);\n        }\n        return res;\n    }\n};\n\n\u91cd\u5efa\u4e8c\u53c9\u6811\n\u8f93\u5165\u67d0\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8bf7\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\u8f93\u5165\u524d\u5e8f\u904d\u5386\u5e8f\u5217{1,2,4,7,3,5,6,8}\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217{4,7,2,1,5,3,8,6}\uff0c\u5219\u91cd\u5efa\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u3002\n/**\n\n     * Definition for binary tree\n\n     * struct TreeNode {\n\n     *     int val;\n\n     *     TreeNode *left;\n\n     *     TreeNode *right;\n\n     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n\n     * };\n\n     */\n\n    class Solution {\n\n    public:\n\n        struct TreeNode* reConstructBinaryTree(vector&lt;int&gt; pre,vector&lt;int&gt; in) {\n\n            int inlen=in.size();\n\n            if(inlen==0)\n\n                return NULL;\n\n            vector&lt;int&gt; left_pre,right_pre,left_in,right_in;\n\n            //\u521b\u5efa\u6839\u8282\u70b9\uff0c\u6839\u8282\u70b9\u80af\u5b9a\u662f\u524d\u5e8f\u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u6570\n\n            TreeNode* head=new TreeNode(pre[0]);\n\n            //\u627e\u5230\u4e2d\u5e8f\u904d\u5386\u6839\u8282\u70b9\u6240\u5728\u4f4d\u7f6e,\u5b58\u653e\u4e8e\u53d8\u91cfgen\u4e2d\n\n            int gen=0;\n\n            for(int i=0;i&lt;inlen;i++)\n\n            {\n\n                if (in[i]==pre[0])\n\n                {\n\n                    gen=i;\n\n                    break;\n\n                }\n\n            }\n\n            //\u5bf9\u4e8e\u4e2d\u5e8f\u904d\u5386\uff0c\u6839\u8282\u70b9\u5de6\u8fb9\u7684\u8282\u70b9\u4f4d\u4e8e\u4e8c\u53c9\u6811\u7684\u5de6\u8fb9\uff0c\u6839\u8282\u70b9\u53f3\u8fb9\u7684\u8282\u70b9\u4f4d\u4e8e\u4e8c\u53c9\u6811\u7684\u53f3\u8fb9\n\n            //\u5229\u7528\u4e0a\u8ff0\u8fd9\u70b9\uff0c\u5bf9\u4e8c\u53c9\u6811\u8282\u70b9\u8fdb\u884c\u5f52\u5e76\n\n            for(int i=0;i&lt;gen;i++)\n\n            {\n\n                left_in.push_back(in[i]);\n\n                left_pre.push_back(pre[i+1]);//\u524d\u5e8f\u7b2c\u4e00\u4e2a\u4e3a\u6839\u8282\u70b9\n\n            }\n\n            for(int i=gen+1;i&lt;inlen;i++)\n\n            {\n\n                right_in.push_back(in[i]);\n\n                right_pre.push_back(pre[i]);\n\n            }\n\n            //\u548cshell\u6392\u5e8f\u7684\u601d\u60f3\u7c7b\u4f3c\uff0c\u53d6\u51fa\u524d\u5e8f\u548c\u4e2d\u5e8f\u904d\u5386\u6839\u8282\u70b9\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u5b50\u6811\n\n            //\u9012\u5f52\uff0c\u518d\u5bf9\u5176\u8fdb\u884c\u4e0a\u8ff0\u6240\u6709\u6b65\u9aa4\uff0c\u5373\u518d\u533a\u5206\u5b50\u6811\u7684\u5de6\u3001\u53f3\u5b50\u5b50\u6570\uff0c\u76f4\u5230\u53f6\u8282\u70b9\n\n           head-&gt;left=reConstructBinaryTree(left_pre,left_in);\n\n           head-&gt;right=reConstructBinaryTree(right_pre,right_in);\n\n           return head;\n\n        }\n\n    };\n\n\u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\n\u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684Push\u548cPop\u64cd\u4f5c\u3002 \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e3aint\u7c7b\u578b\u3002\nclass Solution\n{\npublic:\n    void push(int node) {\n        stack1.push(node);\n    }\n\n    int pop() {\n        while(!stack1.empty()){\n            stack2.push(stack1.top());\n            stack1.pop();\n        }\n        int res = stack2.top();\n        stack2.pop();\n        while(!stack2.empty()){\n            stack1.push(stack2.top());\n            stack2.pop();\n        }\n        return res;\n    }\n\nprivate:\n    stack&lt;int&gt; stack1;\n    stack&lt;int&gt; stack2;\n};\n\n\u9ebb\u70e6\u4e00\u70b9\u5c31\u662f:\n\u6808s1\u548c\u6808s2\uff0c\u6808s1\u4e13\u95e8\u4e3a\u5165\u961f\uff0c\u6808s2\u4e13\u95e8\u4e3a\u51fa\u961f\u3002\n\u5165\u961f\uff1a\n\u5f53s1\u548cs2\u90fd\u4e3a\u7a7a\u65f6\uff0c\u76f4\u63a5\u5165\u961fs1\u3002\n\u5f53s1\u4e3a\u7a7a\uff0cs2\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u628as2\u7684\u5143\u7d20\u90fd\u5012\u56des1\uff0c\u7136\u540e\u518d\u5165\u961fs1\n\u51fa\u961f\uff1a\n\u5f53s2\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u76f4\u63a5\u51fa\u961fs2\n\u5f53s2\u4e3a\u7a7a\u4e14s1\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u628as1\u7684\u5143\u7d20\u90fd\u5012\u8fdbs2\uff0c\u7136\u540e\u51fa\u961fs2\n\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57\n\u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u9012\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4{3,4,5,1,2}\u4e3a{1,2,3,4,5}\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 NOTE\uff1a\u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de0\u3002\n\u94fe\u63a5\uff1ahttps://www.nowcoder.com/questionTerminal/9f3231a991af4f55b95579b44b7a01ba\n\u6765\u6e90\uff1a\u725b\u5ba2\u7f51\n\u65cb\u8f6c\u4e4b\u540e\u7684\u6570\u7ec4\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5212\u5206\u6210\u4e24\u4e2a\u6709\u5e8f\u7684\u5b50\u6570\u7ec4\uff1a\u524d\u9762\u5b50\u6570\u7ec4\u7684\u5927\u5c0f\u90fd\u5927\u4e8e\u540e\u9762\u5b50\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\n\u6ce8\u610f\u5230\u5b9e\u9645\u4e0a\u6700\u5c0f\u7684\u5143\u7d20\u5c31\u662f\u4e24\u4e2a\u5b50\u6570\u7ec4\u7684\u5206\u754c\u7ebf\u3002\u672c\u9898\u76ee\u7ed9\u51fa\u7684\u6570\u7ec4\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u6392\u5e8f\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u8bd5\u7740\u7528\u4e8c\u5206\u67e5\u627e\u6cd5\u5bfb\u627e\u8fd9\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002\n\u601d\u8def\uff1a\n\uff081\uff09\u6211\u4eec\u7528\u4e24\u4e2a\u6307\u9488left,right\u5206\u522b\u6307\u5411\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\u6309\u7167\u9898\u76ee\u7684\u65cb\u8f6c\u7684\u89c4\u5219\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5e94\u8be5\u662f\u5927\u4e8e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\uff08\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\uff09\u3002\n\u4f46\u662f\u5982\u679c\u4e0d\u662f\u65cb\u8f6c\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u80af\u5b9a\u5c0f\u4e8e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\n\uff082\uff09\u627e\u5230\u6570\u7ec4\u7684\u4e2d\u95f4\u5143\u7d20\u3002\n\u4e2d\u95f4\u5143\u7d20\u5927\u4e8e\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5219\u4e2d\u95f4\u5143\u7d20\u4f4d\u4e8e\u524d\u9762\u7684\u9012\u589e\u5b50\u6570\u7ec4\uff0c\u6b64\u65f6\u6700\u5c0f\u5143\u7d20\u4f4d\u4e8e\u4e2d\u95f4\u5143\u7d20\u7684\u540e\u9762\u3002\u6211\u4eec\u53ef\u4ee5\u8ba9\u7b2c\u4e00\u4e2a\u6307\u9488left\u6307\u5411\u4e2d\u95f4\u5143\u7d20\u3002\n\u79fb\u52a8\u4e4b\u540e\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488\u4ecd\u7136\u4f4d\u4e8e\u524d\u9762\u7684\u9012\u589e\u6570\u7ec4\u4e2d\u3002\n\u4e2d\u95f4\u5143\u7d20\u5c0f\u4e8e\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5219\u4e2d\u95f4\u5143\u7d20\u4f4d\u4e8e\u540e\u9762\u7684\u9012\u589e\u5b50\u6570\u7ec4\uff0c\u6b64\u65f6\u6700\u5c0f\u5143\u7d20\u4f4d\u4e8e\u4e2d\u95f4\u5143\u7d20\u7684\u524d\u9762\u3002\u6211\u4eec\u53ef\u4ee5\u8ba9\u7b2c\u4e8c\u4e2a\u6307\u9488right\u6307\u5411\u4e2d\u95f4\u5143\u7d20\u3002\n\u79fb\u52a8\u4e4b\u540e\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u4ecd\u7136\u4f4d\u4e8e\u540e\u9762\u7684\u9012\u589e\u6570\u7ec4\u4e2d\u3002\n\u8fd9\u6837\u53ef\u4ee5\u7f29\u5c0f\u5bfb\u627e\u7684\u8303\u56f4\u3002\n\uff083\uff09\u6309\u7167\u4ee5\u4e0a\u601d\u8def\uff0c\u7b2c\u4e00\u4e2a\u6307\u9488left\u603b\u662f\u6307\u5411\u524d\u9762\u9012\u589e\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488right\u603b\u662f\u6307\u5411\u540e\u9762\u9012\u589e\u7684\u6570\u7ec4\u5143\u7d20\u3002\n\u6700\u7ec8\u7b2c\u4e00\u4e2a\u6307\u9488\u5c06\u6307\u5411\u524d\u9762\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u540e\u9762\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\n\u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u5c06\u6307\u5411\u4e24\u4e2a\u76f8\u90bb\u7684\u5143\u7d20\uff0c\u800c\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u7684\u521a\u597d\u662f\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u8fd9\u5c31\u662f\u5faa\u73af\u7684\u7ed3\u675f\u6761\u4ef6\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\u4ee5\u4e0a\u601d\u8def\u5f88\u8017\u7684\u89e3\u51b3\u4e86\u6ca1\u6709\u91cd\u590d\u6570\u5b57\u7684\u60c5\u51b5\uff0c\u8fd9\u4e00\u9053\u9898\u76ee\u6dfb\u52a0\u4e0a\u4e86\u8fd9\u4e00\u8981\u6c42\uff0c\u6709\u4e86\u91cd\u590d\u6570\u5b57\u3002\n\u56e0\u6b64\u8fd9\u4e00\u9053\u9898\u76ee\u6bd4\u4e0a\u4e00\u9053\u9898\u76ee\u591a\u4e86\u4e9b\u7279\u6b8a\u60c5\u51b5\uff1a\n\u6211\u4eec\u770b\u4e00\u7ec4\u4f8b\u5b50\uff1a\uff5b1\uff0c0\uff0c1\uff0c1\uff0c1\uff5d \u548c \uff5b1\uff0c1\uff0c 1\uff0c0\uff0c1\uff5d \u90fd\u53ef\u4ee5\u770b\u6210\u662f\u9012\u589e\u6392\u5e8f\u6570\u7ec4\uff5b0\uff0c1\uff0c1\uff0c1\uff0c1\uff5d\u7684\u65cb\u8f6c\u3002\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u65e0\u6cd5\u7ee7\u7eed\u7528\u4e0a\u4e00\u9053\u9898\u76ee\u7684\u89e3\u6cd5\uff0c\u53bb\u89e3\u51b3\u8fd9\u9053\u9898\u76ee\u3002\u56e0\u4e3a\u5728\u8fd9\u4e24\u4e2a\u6570\u7ec4\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\uff0c\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4e2d\u95f4\u6570\u5b57\u90fd\u662f1\u3002\n\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e2d\u95f4\u6570\u5b57\u4f4d\u4e8e\u540e\u9762\u7684\u5b50\u6570\u7ec4\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u4e2d\u95f4\u6570\u5b57\u4f4d\u4e8e\u524d\u9762\u7684\u5b50\u6570\u7ec4\u3002\n\u56e0\u6b64\u5f53\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u6570\u5b57\u548c\u4e2d\u95f4\u6570\u5b57\u76f8\u540c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u4e2d\u95f4\u6570\u5b571\u662f\u5c5e\u4e8e\u524d\u9762\u7684\u5b50\u6570\u7ec4\uff08\u7eff\u8272\u8868\u793a\uff09\u8fd8\u662f\u5c5e\u4e8e\u540e\u9762\u7684\u5b50\u6570\u7ec4\uff08\u7d2b\u8272\u8868\u793a\uff09\u3002\n\u4e5f\u5c31\u65e0\u6cd5\u79fb\u52a8\u6307\u9488\u6765\u7f29\u5c0f\u67e5\u627e\u7684\u8303\u56f4\u3002\n\u52a8\u89c4\u6590\u6ce2\u90a3\u5951\n\u5927\u5bb6\u90fd\u77e5\u9053\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u73b0\u5728\u8981\u6c42\u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u8bf7\u4f60\u8f93\u51fa\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2cn\u9879\u3002\nn&lt;=39\nclass Solution {\npublic:\n    int Fibonacci(int n) {\n        int f=0, g=1;\n        while(n--){\n            g += f;\n            f = g-f;\n        }\n        return f;\n    }\n};\n\n\u9752\u86d9\u8df3\u53f0\u9636\n\u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7\u2026\u2026\u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0an\u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2an\u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002\n\u5148\u6570\u5b66\u5f52\u7eb3, \u518d\u76f4\u63a5\u8f93\u51fa\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        return 1&lt;&lt;--number;\n    }\n};\n\n\u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002\n\u5982\u679c\u4e00\u4e2a\u6574\u6570\u4e0d\u4e3a0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6574\u6570\u81f3\u5c11\u6709\u4e00\u4f4d\u662f1\u3002\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e2a\u6574\u6570\u51cf1\uff0c\u90a3\u4e48\u539f\u6765\u5904\u5728\u6574\u6570\u6700\u53f3\u8fb9\u76841\u5c31\u4f1a\u53d8\u4e3a0\uff0c\u539f\u6765\u57281\u540e\u9762\u7684\u6240\u6709\u76840\u90fd\u4f1a\u53d8\u62101(\u5982\u679c\u6700\u53f3\u8fb9\u76841\u540e\u9762\u8fd8\u67090\u7684\u8bdd)\u3002\u5176\u4f59\u6240\u6709\u4f4d\u5c06\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u65701100\uff0c\u4ece\u53f3\u8fb9\u6570\u8d77\u7b2c\u4e09\u4f4d\u662f\u5904\u4e8e\u6700\u53f3\u8fb9\u7684\u4e00\u4e2a1\u3002\u51cf\u53bb1\u540e\uff0c\u7b2c\u4e09\u4f4d\u53d8\u62100\uff0c\u5b83\u540e\u9762\u7684\u4e24\u4f4d0\u53d8\u6210\u4e861\uff0c\u800c\u524d\u9762\u76841\u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u6b64\u5f97\u5230\u7684\u7ed3\u679c\u662f1011.\u6211\u4eec\u53d1\u73b0\u51cf1\u7684\u7ed3\u679c\u662f\u628a\u6700\u53f3\u8fb9\u7684\u4e00\u4e2a1\u5f00\u59cb\u7684\u6240\u6709\u4f4d\u90fd\u53d6\u53cd\u4e86\u3002\u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u6211\u4eec\u518d\u628a\u539f\u6765\u7684\u6574\u6570\u548c\u51cf\u53bb1\u4e4b\u540e\u7684\u7ed3\u679c\u505a\u4e0e\u8fd0\u7b97\uff0c\u4ece\u539f\u6765\u6574\u6570\u6700\u53f3\u8fb9\u4e00\u4e2a1\u90a3\u4e00\u4f4d\u5f00\u59cb\u6240\u6709\u4f4d\u90fd\u4f1a\u53d8\u62100\u3002\u59821100&amp;1011=1000.\u4e5f\u5c31\u662f\u8bf4\uff0c\u628a\u4e00\u4e2a\u6574\u6570\u51cf\u53bb1\uff0c\u518d\u548c\u539f\u6574\u6570\u505a\u4e0e\u8fd0\u7b97\uff0c\u4f1a\u628a\u8be5\u6574\u6570\u6700\u53f3\u8fb9\u4e00\u4e2a1\u53d8\u62100.\u90a3\u4e48\u4e00\u4e2a\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u6709\u591a\u5c11\u4e2a1\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u591a\u5c11\u6b21\u8fd9\u6837\u7684\u64cd\u4f5c\u3002\n\nclass Solution {\npublic:\n     int  NumberOf1(int n) {\n         int count = 0;\n          while(n){\n              int temp = n-1;\n              n = n &amp; temp;\n              ++count;\n          }\n         return count;\n     }\n};\ndouble\u7684\u5e42\n1.\u5f53\u5e95\u6570\u4e3a0\u4e14\u6307\u6570&lt;0\u65f6 \u4f1a\u51fa\u73b0\u5bf90\u6c42\u5012\u6570\u7684\u60c5\u51b5\uff0c\u9700\u8fdb\u884c\u9519\u8bef\u5904\u7406\uff1b\n2.\u5224\u65ad\u5e95\u6570\u662f\u5426\u7b49\u4e8e0 \u7531\u4e8ebase\u4e3adouble\u578b\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528==\u5224\u65ad\n\u8981\u5224\u65ad\u4e00\u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff1a\u5219\u662fif( abs(f) &lt;= 1e-6)\uff1b\n\u8981\u5224\u65ad\u4e00\u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff1a\u5219\u662fif( abs(f) &lt;= 1e-15 )\uff1b\n\u4f7f\u7528\u5feb\u901f\u5e42\n\nclass Solution {\npublic:\n    double Power(double base, int exponent) {\n        if ((abs(base)&lt; 1e-15) &amp;&amp; exponent==0)\n            return 1;\n        else if (abs(base)&lt;1e-15 &amp;&amp; exponent&gt;0)\n            return 0;\n        else if (abs(base)&lt;1e-15 &amp;&amp; exponent&lt;0)\n            return NAN;\n\n        double ans = 1.0;\n        int p = abs(exponent);\n        while(p){\n            if(p%2)\n                ans *= base;\n            base  *= base;\n            p &gt;&gt;=1;\n        }\n        return (exponent&gt;0)? ans: 1/ans;\n    }\n};\n\u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762\nreturn sorted(array,key=lambda c:c%2,reverse=True)\n\n\u94fe\u8868\u5c31\u5730\u9006\u7f6e\n/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n            val(x), next(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    ListNode* ReverseList(ListNode* pHead) {\n        ListNode* h = NULL;\n        ListNode* p=pHead;\n        while(p){\n            ListNode* temp = p;\n            p=p-&gt;next;\n            temp-&gt;next = h;\n            h = temp;\n        }\n        return h;\n    }\n};\n\n\u6709\u5e8f\u94fe\u8868\u7684merge\n\u8f93\u5165\u4e24\u4e2a\u5355\u8c03\u9012\u589e\u7684\u94fe\u8868\uff0c\u8f93\u51fa\u4e24\u4e2a\u94fe\u8868\u5408\u6210\u540e\u7684\u94fe\u8868\uff0c\u5f53\u7136\u6211\u4eec\u9700\u8981\u5408\u6210\u540e\u7684\u94fe\u8868\u6ee1\u8db3\u5355\u8c03\u4e0d\u51cf\u89c4\u5219\u3002\n\u9012\u5f52\u7248\u672c\n\n/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n            val(x), next(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)\n    {\n        ListNode* result = NULL;\n        ListNode* current = NULL;\n        if (pHead1==NULL)\n            return pHead2;\n        if (pHead2 == NULL)\n            return pHead1;\n        if(pHead1-&gt;val &lt;= pHead2-&gt;val){\n            result = pHead1;\n            result-&gt;next = Merge(pHead1-&gt;next, pHead2);\n        }\n        else {\n            result = pHead2;\n            result-&gt;next = Merge(pHead1, pHead2-&gt;next);\n        }\n        return result;\n    }\n};\n\u975e\u9012\u5f52\u6b63\u5e38\u5199\n\npublic class Solution {\n\u00a0\u00a0\u00a0\u00a0public ListNode Merge(ListNode list1,ListNode list2) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u65b0\u5efa\u4e00\u4e2a\u5934\u8282\u70b9\uff0c\u7528\u6765\u5b58\u5408\u5e76\u7684\u94fe\u8868\u3002\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ListNode head=new ListNode(-1);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head.next=null;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ListNode root=head;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while(list1!=null&amp;&amp;list2!=null){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(list1.val&lt;list2.val){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head.next=list1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head=list1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list1=list1.next;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}else{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head.next=list2;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head=list2;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list2=list2.next;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u628a\u672a\u7ed3\u675f\u7684\u94fe\u8868\u8fde\u63a5\u5230\u5408\u5e76\u540e\u7684\u94fe\u8868\u5c3e\u90e8\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(list1!=null){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head.next=list1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(list2!=null){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0head.next=list2;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return root.next;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\u6811\u7684\u5b50\u7ed3\u6784\n\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\uff0cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002\uff08ps\uff1a\u6211\u4eec\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784\uff09\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\n    bool is_contain(TreeNode* t1, TreeNode* t2){\n            if(t2==NULL)\n                return true;\n            if(t1==NULL)\n                return false;\n            if(t1-&gt;val == t2-&gt;val)\n                return is_contain(t1-&gt;left, t2-&gt;left) &amp;&amp; is_contain(t1-&gt;right, t2-&gt;right);\n            else\n                return false;\n        }\npublic:\n    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)\n    {\n\n\n        if(pRoot1==NULL || pRoot2==NULL)\n            return false;\n        return is_contain(pRoot1, pRoot2) || is_contain(pRoot1-&gt;left, pRoot2) || is_contain(pRoot1-&gt;right, pRoot2);\n    }\n};\n\n\n            if(t2==NULL)\n                return true;\n            if(t1==NULL)\n                return false;\n\u5982\u679c\u8fd9\u4e24\u4e2a\u53cd\u4e86\u5c31\u4f1a\u9519\u8bef\n\u4e8c\u53c9\u6811\u955c\u50cf\n\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    void Mirror(TreeNode *pRoot) {\n        if (pRoot==NULL)\n            return ;\n        TreeNode* tmp;\n        tmp = pRoot-&gt;left;\n        pRoot-&gt;left = pRoot-&gt;right;\n        pRoot-&gt;right = tmp;\n        Mirror(pRoot-&gt;left);\n        Mirror(pRoot-&gt;right);\n    }\n};\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "SumatraPDF\u4fee\u6539\u80cc\u666f\u8272", "date": "2018-01-18T11:15:00-00.00", "path": "/archives/SumatraPDF\u4fee\u6539\u80cc\u666f\u8272/", "text": "\u56fe\u7247\u63cf\u8ff0\n\nBackgroundColor = #c7edcc\n\n# For documentation, see http://www.sumatrapdfreader.org/settings3.2.html\nMainWindowBackground = #80fff200\nEscToExit = false\nReuseInstance = false\nUseSysColors = false\nRestoreSession = true\n\nFixedPageUI [\n    TextColor = #000000\n    BackgroundColor = #c7edcc\n    SelectionColor = #f5fc0c\n    WindowMargin = 2 4 2 4\n    PageSpacing = 4 4\n]\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "Deep steganalysis", "date": "2017-12-25T15:21:00-00.00", "path": "/archives/Deep steganalysis/", "text": "Deep residual learning for image steganalysis\nhttp://futuremedia.szu.edu.cn/assets/files/Deep%20residual%20learning%20for%20image%20steganalysis.pdf\n\u56fe\u7247\u63cf\u8ff0\n\u4e00\u4e2aKV\u6838, \u5904\u7406\u56fe\u50cf, \u540e\u9762\u63a5\u4e0aresnet\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u8bb0\u4e00\u4e2a\u5de8\u50bb\u00d7\u7684\u9519\u8bef", "date": "2017-12-22T09:36:00-00.00", "path": "/archives/\u8bb0\u4e00\u4e2a\u5de8\u50bb\u00d7\u7684\u9519\u8bef/", "text": "\u524d\u4e24\u5929\u4f5c\u5206\u7c7b\u9519\u8bef\u7387\u4e00\u76f4\u6709\u95ee\u9898, \u6392\u67e5\u4e86\u4e00\u5708\u6700\u540e\u786e\u5b9a\u4e86\u95ee\u9898\u51fa\u5728\u6570\u636e\u4e0a, \u91cd\u65b0\u53c8\u68c0\u67e5\u4e86\u4e00\u904d\u751f\u6210tfrecords\u7684\u4ee3\u7801:\ndef encode(filename):\n    cwd = os.getcwd()\n    root = cwd + &#39;\\\\&#39; + filename + &#39;\\\\&#39;\n    name = filename + &#39;_Mnist_pgm.tfrecords&#39;\n    print(name)\n    writer = tf.python_io.TFRecordWriter(name)\n    classes = {&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;}\n\n    #for image_filename, label in zip(image_filename_list, label_list):\n    for index, name in enumerate(classes):\n        class_path = root + name + &#39;\\\\&#39;\n        for img_name in os.listdir(class_path):\n            img_path = class_path + img_name\n            img = Image.open(img_path)\n            print(img_name)\n            data = img.tobytes()\n            example = tf.train.Example(features=tf.train.Features(feature={\n                &quot;label&quot;: tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),\n                &#39;img_raw&#39;: tf.train.Feature(bytes_list=tf.train.BytesList(value=[data]))\n            }))\n            writer.write(example.SerializeToString())\n    writer.close()\n\n\n\n\u95ee\u9898\u5c31\u51fa\u5728\n\n    classes = {'0','1','2','3','4','5','6','7','8','9'}\n\n    for index, name in enumerate(classes):\n\u4e0a.\n\u9b3c\u77e5\u9053\u6211\u4e3a\u5565\u8981\u628aclasses\u5199\u6210set, \u54ea\u6015\u662ftuple\u90fd\u5c41\u4e8b\u6ca1\u6709\nfor index, item in enumerate([&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;]):\n    print (index, item)\n\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n\nfor index, item in enumerate({&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;}):\n    print (index, item)\n\n0 0\n1 4\n2 9\n3 2\n4 5\n5 8\n6 3\n7 1\n8 6\n9 7\n\nfor index, item in enumerate((&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;)):\n    print (index, item)\n\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "Hexo Blog\u76f8\u5173", "date": "2017-11-30T21:34:00-00.00", "path": "/archives/Hexo Blog\u76f8\u5173/", "text": "SEO\nhttp://www.jianshu.com/p/efaf72aab32e?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation\nCI\u65f6, npm\u5b89\u88c5\u5931\u8d25\n\u7f51\u7edc\u62bd\u98ce, \u81ea\u6c42\u591a\u798f. \n\u6216\u8005npm\u6362\u4e2a\u5916\u56fd\u7684\u6e90? \u5b9e\u5728\u62bd\u98ce\u4e25\u91cd\u5c31\u6362\u4e2ataobao\u6e90\u5148\u8bd5\u8bd5\n\n\nCI\u65f6, tag\u68c0\u7d22\u95ee\u9898\n\u9ed8\u8ba4\u7684node.js\u7248\u672c\u592a\u4f4e\nappveyor.yml\u4fee\u6539\u4e3a\n\nclone_depth: 5\n\nenvironment:\n  access_token:\n    secure: *******************************************************\n    nodejs_version: \"8\"\n\ninstall:\n  - ps: Install-Product node $env:nodejs_version\n  - node --version\n  - npm --version\n  - npm install\n  - npm install hexo-cli -g\n\nbuild_script:\n  - hexo generate\n\n...\nCI: \u5728github\u4e0a\u6258\u7ba1_post, \u81ea\u52a8deploy\nhttps://formulahendry.github.io/2016/12/04/hexo-ci/\n\n\u53c2\u8003:\nhttps://yq.aliyun.com/articles/8607\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u968f\u673a\u7684\u5c06data\u5206\u4e3a\u4e24\u90e8\u5206", "date": "2017-11-30T19:44:00-00.00", "path": "/archives/\u968f\u673a\u7684\u5c06data\u5206\u4e3a\u4e24\u90e8\u5206/", "text": "\u5c0640000\u4e2a\u6587\u4ef6\u968f\u673a\u5206\u4e00\u90e8\u5206\u6d4b\u8bd5\u96c6\u51fa\u53bb\n#! /usr/bin/python3\n# -*- coding: utf-8 -*-\n# @Time    : 2017/11/30 19:34\n# @Author  : Shiyu Li\n# @Software: PyCharm\n\nimport random\nimport os\nimport shutil\n\ndef makefile(root, data, typename, NUM):\n    &#39;&#39;&#39;\n    :param root: target file of &#39;/train&#39; and &#39;/test&#39;\n    :param data: the data file you want to corp\n    :param typename: data name\n    :param NUM: the num of data in &#39;/train&#39;\n    :return: None\n    &#39;&#39;&#39;\n\n    try:\n        os.makedirs(root + &#39;/train&#39;)\n        os.makedirs(root + &#39;/test&#39;)\n\n    except FileExistsError:\n        print(&#39;=================================================&#39;)\n        print(&quot;There exist &#39;/train&#39; &#39;/test&#39;, delete first please.&quot;)\n\n    try:\n        os.makedirs(root + &#39;/train/&#39; + typename)\n    except BaseException:\n        print(&quot;There exist &#39;/%s&#39;, delete first please.&quot; % typename)\n\n    name_list = os.listdir(data)\n    random.shuffle(name_list)\n\n    count = 0\n    for name in name_list:\n        if count &lt; NUM:\n            print(&#39;train data :%s&#39; % name)\n            shutil.copyfile(os.path.join(data, name), os.path.join(root + &#39;/train/&#39; + typename + &#39;/&#39;, typename + name))\n            count += 1\n        else:\n            print(&#39;test data :%s&#39; % name)\n            shutil.copyfile(os.path.join(data, name), os.path.join(root + &#39;/test&#39;, typename + name))\n\nif __name__ == &#39;__main__&#39;:\n    # \u5c0640000\u4e2acover\u548c40000\u4e2astego\u4e2d, \u5404\u62bd\u51fa8000\u4f5c\u4e3atest, \u5269\u4e0b\u7684\u4f5c\u4e3atrain data \u653e\u5728\u5bf9\u5e94\u6587\u4ef6\u5939\u91cc\n\n    cover_data = &#39;../database/CropedBoossBase/CroppedBossBase-1.0-256x256_cover&#39;\n    stego_data = &#39;../database/CropedBoossBase/CroppedBossBase-1.0-256x256_stego_SUniward0.4bpp&#39;\n    root = &#39;../database/CropedBoossBase&#39;\n    makefile(root, cover_data, typename=&#39;cover&#39;, NUM=32000)\n    makefile(root, stego_data, typename=&#39;stego&#39;, NUM=32000)\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u4eceLeNet\u5230DenseNet", "date": "2017-11-30T12:58:00-00.00", "path": "/archives/\u4eceLeNet\u5230DenseNet/", "text": "\u7f51\u7edc\u6a21\u578b\n\u8fd9\u7bc7\u662f\u5927\u81f4\u56de\u987e\u4e00\u4e0b\u4e00\u8def\u8d70\u6765\u7684\u8fd9\u4e9b\u6a21\u578b, \u4ee5\u540e\u4e00\u4e9b\u548c\u5177\u4f53\u6a21\u578b\u8054\u7cfb\u6bd4\u8f83\u7d27\u5bc6\u7684\u4e1c\u897f\u4e5f\u53ef\u4ee5\u6709\u5730\u65b9\u653e\u4e86.\nLeNet-5\nLeNet-5\u662fYann LeCun\u57281998\u5e74\u8bbe\u8ba1\u7684\u7528\u4e8e\u624b\u5199\u6570\u5b57\u8bc6\u522b\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u662f\u65e9\u671f\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u6700\u6709\u4ee3\u8868\u6027\u7684\u5b9e\u9a8c\u7cfb\u7edf\u4e4b\u4e00\u3002\nLeNet-5\u7684\u8fd9\u5f20\u56fe\u5e94\u8be5\u7b97\u662f\u968f\u5904\u53ef\u89c1\u4e86.\n\n\u9664\u4e86S2\u548cC3\u7684\u8fde\u63a5\u6bd4\u8f83\u5947\u602a\u5176\u4ed6\u90fd\u662f\u5f88\u5bb9\u6613\u7406\u89e3\u7684.\n\u53ef\u4ee5\u6ce8\u610f\u4e0b\u7684\u51e0\u70b9:\nfilter\u7684\u5927\u5c0f\u662f\u56fa\u5b9a5\u00d75, pooling\u5c42\u662f2\u00d72\u7684maxpooling, \u6ca1\u6709overlap, sigmoid\u7684\u6fc0\u6d3b\u51fd\u6570\n\n\nAlexNet\n2012 \u5e74\uff0cAlex Krizhevsky\u3001Ilya Sutskever \u548c Geoffrey Hinton \u521b\u9020\u4e86\u4e00\u4e2a\u201c\u5927\u578b\u7684\u6df1\u5ea6\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u201d\uff0c\u4e5f\u5373\u73b0\u5728\u4f17\u6240\u5468\u77e5\u7684 AlexNet\uff0c\u8d62\u5f97\u4e86\u5f53\u5e74\u7684 ILSVRC\u51a0\u519b\u3002\nAlexNet:\n\n\u8bad\u7ec3\u51fa\u5f53\u65f6\u6700\u5927\u89c4\u6a21\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\n\u5b9e\u73b0\u9ad8\u6548\u7684GPU\u5377\u79ef\u8fd0\u7b97\u7ed3\u6784\uff0c\u4e5f\u4f7f\u5f97\u6b64\u540eGPU\u6210\u4e3a\u6df1\u5ea6\u5b66\u4e60\u7684\u4e3b\u8981\u5de5\u5177\n\u901a\u8fc7\u4f17\u591a\u7684skills\uff08dropout\u3001RELU\u3001Data  Augmentation\uff09\u89e3\u51b3\u6df1\u5c42\u795e\u7ecf\u7f51\u7edc\u7684\u8fc7\u62df\u5408\u95ee\u9898\uff0c\u4f7f\u5f97\u8be5\u7f51\u7edc\u572860    million\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u4f9d\u65e7\u80fd\u5f88\u597d\u6536\u655b\u3002\u8fd9\u4e9b\u65b9\u6cd5\u73b0\u5728\u5df2\u7ecf\u6210\u4e3a\u4e86CNN\u4e0d\u53ef\u6216\u7f3a\u7684\u4e00\u90e8\u5206\u3002\n\n\nGPU\n\u5355\u4e2aGTX 580 GPU\u53ea\u67093GB\u5185\u5b58\uff0c\u8fd9\u9650\u5236\u4e86\u53ef\u4ee5\u5728\u5176\u4e0a\u8bad\u7ec3\u7684\u7f51\u7edc\u7684\u6700\u5927\u89c4\u6a21. 120\u4e07\u4e2a\u8bad\u7ec3\u6837\u672c\u624d\u8db3\u4ee5\u8bad\u7ec3\u7f51\u7edc\uff0c\u8fd9\u7f51\u7edc\u592a\u5927\u4e86\uff0c\u4e0d\u9002\u5408\u5728\u4e00\u4e2aGPU\u4e0a\u8bad\u7ec3. --&gt; \u5c06\u7f51\u7edc\u5206\u5e03\u5728\u4e24\u4e2aGPU\u4e0a, \u5728\u6bcf\u4e2aGPU\u4e2d\u653e\u7f6e\u4e00\u534akernel.\nRelu\n\u4f20\u7edf\u7684sigmoid\u548ctanh\u662f\u9971\u548c\u7684, \u5c31\u662f\u8f93\u5165\u503c\u8fbe\u5230\u4e00\u5b9a\u5927\u5c0f\u4e4b\u540e\u5c31\u53d8\u5316\u5f88\u5c0f\u4e86. \u800cRelu\u5219\u662f\u975e\u9971\u548c\u7684.\nSigmoid\u51fd\u6570\u5728\u6b63\u8d1f\u9971\u548c\u533a\u7684\u68af\u5ea6\u90fd\u63a5\u8fd1\u4e8e0\uff0c\u4f1a\u9020\u6210\u68af\u5ea6\u6d88\u5931.\nrelu\u51fd\u6570\u5728\u8d1f\u534a\u533a\u7684\u5bfc\u6570\u4e3a0\uff0c\u4e00\u65e6\u795e\u7ecf\u5143\u6fc0\u6d3b\u503c\u8fdb\u5165\u8d1f\u534a\u533a\uff0c\u90a3\u4e48\u68af\u5ea6\u5c31\u4f1a\u4e3a0\uff0c\u8fd9\u4e2a\u795e\u7ecf\u5143\u4e0d\u4f1a\u7ecf\u5386\u8bad\u7ec3\uff0c\u5373\u6240\u8c13\u7684\u7a00\u758f\u6027\uff0c\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7f13\u89e3\u8fc7\u62df\u5408.\n\u540c\u65f6, Relu\u7684\u5bfc\u6570\u975e0\u53731\u6613\u4e8e\u8ba1\u7b97(\u5ffd\u75650\u70b9\u7684\u4e0d\u53ef\u5bfc\u6027)\n\u5f53\u7136\uff0cReLU\u4e5f\u662f\u6709\u7f3a\u70b9\u7684\uff0c\u6bd4\u5982\u5de6\u8fb9\u5168\u90e8\u7f6e\u96f6\u5f88\u5bb9\u6613\u5bfc\u81f4\u67d0\u4e9b\u9690\u85cf\u8282\u70b9\u6c38\u65e0\u7ffb\u8eab\u4e4b\u65e5\uff0c\u6240\u4ee5\u540e\u6765\u53c8\u51fa\u73b0pReLU\u3001random ReLU\u7b49\u6539\u8fdb\uff0c\u800c\u4e14ReLU\u4f1a\u5f88\u5bb9\u6613\u6539\u53d8\u6570\u636e\u7684\u5206\u5e03\uff0c\u56e0\u6b64ReLU\u540e\u52a0Batch Normalization\u4e5f\u662f\u5e38\u7528\u7684\u6539\u8fdb\u7684\u65b9\u6cd5\u3002\n\nLRN\u5c42\n\u5c40\u90e8\u54cd\u5e94\u5f52\u4e00\u5316\u5c42\uff08Local Response Normalization Layer\uff09.\n\u76ee\u524d\u57fa\u672c\u88ab\u8ba4\u4e3a\u662f\u6ca1\u5927\u7528\u7684\u4e1c\u897f(\u4ec5\u67090.1%\u7684\u63d0\u5347). \u5927\u725b\u63d0\u51fa, \u7136\u540ecaffe\u5386\u53f2\u9057\u7559\u4ea7\u7269.\nData augmentation\n\u5e73\u79fb, \u955c\u50cf, corp\u7b49\u7b49, \u73b0\u5728\u57fa\u672c\u4e0a\u7528\u7684\u4e5f\u6bd4\u8f83\u591a\u4e86. \u548c\u6539\u53d8RGB\u901a\u9053\u5f3a\u5ea6\u8fd9\u79cd\u4e00\u8d77\u7b97\u4f5cdata\u9884\u5904\u7406\u8fc7\u7a0b.\nDropout\n\u901a\u5e38\u6765\u8bf4, Dropout\u90fd\u88ab\u8ba4\u4f5c\u662f\u7c7b\u4f3c\u4e8ebagging\u7684\u4e00\u79cd\u65b9\u6cd5.\nVGG\nILSVRC 2014\u7684\u7b2c\u4e8c\u540d\u662fKaren Simonyan\u548c Andrew Zisserman\u5b9e\u73b0\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u73b0\u5728\u79f0\u5176\u4e3aVGGNet\u3002\u5b83\u4e3b\u8981\u7684\u8d21\u732e\u662f\u5c55\u793a\u51fa\u7f51\u7edc\u7684\u6df1\u5ea6\u662f\u7b97\u6cd5\u4f18\u826f\u6027\u80fd\u7684\u5173\u952e\u90e8\u5206\u3002\n\u4ee3\u8868\u6027\u7684VGG-19\n\nVGG\u662f\u5728\u4eceAlex-net\u53d1\u5c55\u800c\u6765\u7684\u7f51\u7edc\u3002\u6700\u5173\u952e\u7684\u4e00\u70b9\u662f\u4f7f\u7528\u5c0f\u5377\u79ef\u6838.\n\u5f15\u5165cs231n\u4e0a\u9762\u4e00\u6bb5\u8bdd\uff1a\u51e0\u4e2a\u5c0f\u6ee4\u6ce2\u5668\u5377\u79ef\u5c42\u7684\u7ec4\u5408\u6bd4\u4e00\u4e2a\u5927\u6ee4\u6ce2\u5668\u5377\u79ef\u5c42\u597d\uff1a\u5047\u8bbe\u4f60\u4e00\u5c42\u4e00\u5c42\u5730\u91cd\u53e0\u4e863\u4e2a3x3\u7684\u5377\u79ef\u5c42\uff08\u5c42\u4e0e\u5c42\u4e4b\u95f4\u6709\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\uff09\u3002\u5728\u8fd9\u4e2a\u6392\u5217\u4e0b\uff0c\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\u4e2d\u7684\u6bcf\u4e2a\u795e\u7ecf\u5143\u90fd\u5bf9\u8f93\u5165\u6570\u636e\u4f53\u6709\u4e00\u4e2a3x3\u7684\u89c6\u91ce\u3002\u7b2c\u4e8c\u4e2a\u5377\u79ef\u5c42\u4e0a\u7684\u795e\u7ecf\u5143\u5bf9\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\u6709\u4e00\u4e2a3x3\u7684\u89c6\u91ce\uff0c\u4e5f\u5c31\u662f\u5bf9\u8f93\u5165\u6570\u636e\u4f53\u67095x5\u7684\u89c6\u91ce\u3002\u540c\u6837\uff0c\u5728\u7b2c\u4e09\u4e2a\u5377\u79ef\u5c42\u4e0a\u7684\u795e\u7ecf\u5143\u5bf9\u7b2c\u4e8c\u4e2a\u5377\u79ef\u5c42\u67093x3\u7684\u89c6\u91ce\uff0c\u4e5f\u5c31\u662f\u5bf9\u8f93\u5165\u6570\u636e\u4f53\u67097x7\u7684\u89c6\u91ce\u3002\u5047\u8bbe\u4e0d\u91c7\u7528\u8fd93\u4e2a3x3\u7684\u5377\u79ef\u5c42\uff0c\u4e8c\u662f\u4f7f\u7528\u4e00\u4e2a\u5355\u72ec\u7684\u67097x7\u7684\u611f\u53d7\u91ce\u7684\u5377\u79ef\u5c42\uff0c\u90a3\u4e48\u6240\u6709\u795e\u7ecf\u5143\u7684\u611f\u53d7\u91ce\u4e5f\u662f7x7\uff0c\u4f46\u662f\u5c31\u6709\u4e00\u4e9b\u7f3a\u70b9\u3002\u9996\u5148\uff0c\u591a\u4e2a\u5377\u79ef\u5c42\u4e0e\u975e\u7ebf\u6027\u7684\u6fc0\u6d3b\u5c42\u4ea4\u66ff\u7684\u7ed3\u6784\uff0c\u6bd4\u5355\u4e00\u5377\u79ef\u5c42\u7684\u7ed3\u6784\u66f4\u80fd\u63d0\u53d6\u51fa\u6df1\u5c42\u7684\u66f4\u597d\u7684\u7279\u5f81\u3002\u5176\u6b21\uff0c\u5047\u8bbe\u6240\u6709\u7684\u6570\u636e\u6709C\u4e2a\u901a\u9053\uff0c\u90a3\u4e48\u5355\u72ec\u76847x7\u5377\u79ef\u5c42\u5c06\u4f1a\u5305\u542b7\u00d77\u00d7C=49\u00d7C\u4e2a\u53c2\u6570\uff0c\u800c3\u4e2a3x3\u7684\u5377\u79ef\u5c42\u7684\u7ec4\u5408\u4ec5\u6709\u4e2a3\u00d7(3\u00d73\u00d7C)=27\u00d7C\u4e2a\u53c2\u6570\u3002\u76f4\u89c2\u8bf4\u6765\uff0c\u6700\u597d\u9009\u62e9\u5e26\u6709\u5c0f\u6ee4\u6ce2\u5668\u7684\u5377\u79ef\u5c42\u7ec4\u5408\uff0c\u800c\u4e0d\u662f\u7528\u4e00\u4e2a\u5e26\u6709\u5927\u7684\u6ee4\u6ce2\u5668\u7684\u5377\u79ef\u5c42\u3002\u524d\u8005\u53ef\u4ee5\u8868\u8fbe\u51fa\u8f93\u5165\u6570\u636e\u4e2d\u66f4\u591a\u4e2a\u5f3a\u529b\u7279\u5f81\uff0c\u4f7f\u7528\u7684\u53c2\u6570\u4e5f\u66f4\u5c11\u3002\u552f\u4e00\u7684\u4e0d\u8db3\u662f\uff0c\u5728\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u65f6\uff0c\u4e2d\u95f4\u7684\u5377\u79ef\u5c42\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5360\u7528\u66f4\u591a\u7684\u5185\u5b58\u3002\n\n\u867d\u7136VGG\u6bd4Alex-net\u6709\u66f4\u591a\u7684\u53c2\u6570\uff0c\u66f4\u6df1\u7684\u5c42\u6b21, \u4f46\u662fVGG\u53ea\u9700\u8981\u5f88\u5c11\u7684\u8fed\u4ee3\u6b21\u6570\u5c31\u5f00\u59cb\u6536\u655b:\n\n\u66f4\u6df1\u7684\u6df1\u5ea6\u548c\u5c0f\u7684\u5377\u79ef\u6838\u8d77\u5230\u4e86\u9690\u5f0f\u6b63\u5219\u5316\u4f5c\u7528\u3002\n\u8fd9\u70b9\u5176\u5b9e\u633a\u4ee4\u4eba\u8ff7\u60d1\u7684, \u4eba\u4eba\u90fd\u6709\u81ea\u5df1\u7684\u8bf4\u6cd5, \u6211\u6765\u8bf4\u8bf4\u76ee\u524d\u6211\u81ea\u5df1\u7684\u770b\u6cd5. \u66f4\u6df1\u7684\u6df1\u5ea6, \u4e00\u5b9a\u7a0b\u5ea6\u4e0b\u662f\u53ef\u4ee5\u63d0\u9ad8\u6574\u4e2a\u7f51\u7edc\u7684\u80fd\u529b, \u4f46\u6ca1\u6709\u7ecf\u8fc7\u7279\u6b8a\u8bbe\u8ba1\u7684\u7f51\u7edc\u7ed3\u6784\u52a0\u6df1\u53cd\u800c\u4f1a\u51fa\u95ee\u9898, \u524d\u534a\u53e5\u4e2a\u4eba\u8fd8\u662f\u5b58\u7591\u7684. \u5c0f\u7684\u5377\u79ef\u6838, \u5c0f\u7684stride, \u76f4\u89c2\u4e0a\u6765\u8bb2\u5c31\u662f\u5c06\u4e00\u4e2a\u5927\u5377\u79ef\u6838\u5206\u6563\u5728\u4e86\u591a\u4e2alayer\u5f53\u4e2d, \u90a3\u76f8\u5e94\u7684\u4e5f\u7ecf\u5386\u4e86pooling\u548crefilter, \u5c31\u50cf\u662f\u4e00\u4e2aNN\u6784\u6210\u4e86\u8fd9\u4e2a\u5927\u7684\u5377\u79ef\u6838, \u91cc\u9762\u5c0f\u7684\u6838\u5728\u6295\u7968.\n\n\u4e00\u4e9b\u5c42\u7684pre-initialisationpre-initialisation\uff1a\u7f51\u7edcA\u7684\u6743\u503cW~(0,0.01)\u7684\u9ad8\u65af\u5206\u5e03\uff0cbias\u4e3a0\uff1b\u7531\u4e8e\u5b58\u5728\u5927\u91cf\u7684ReLU\u51fd\u6570\uff0c\u4e0d\u597d\u7684\u6743\u503c\u521d\u59cb\u503c\u5bf9\u4e8e\u7f51\u7edc\u8bad\u7ec3\u5f71\u54cd\u8f83\u5927\u3002\u4e3a\u4e86\u7ed5\u5f00\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f5c\u8005\u73b0\u5728\u901a\u8fc7\u968f\u673a\u7684\u65b9\u5f0f\u8bad\u7ec3\u6700\u6d45\u7684\u7f51\u7edcA\uff1b\u7136\u540e\u5728\u8bad\u7ec3\u5176\u4ed6\u7f51\u7edc\u65f6\uff0c\u628aA\u7684\u524d4\u4e2a\u5377\u79ef\u5c42\u548c\u6700\u540e\u5168\u8fde\u63a5\u5c42\u7684\u6743\u503c\u5f53\u505a\u5176\u4ed6\u7f51\u7edc\u7684\u521d\u59cb\u503c\uff0c\u672a\u8d4b\u503c\u7684\u4e2d\u95f4\u5c42\u901a\u8fc7\u968f\u673a\u521d\u59cb\u5316\u3002\n\n\nGoogLeNet\u4e00\u5bb6\u5b50---Inception v1\nVGG\u7ed9\u4eba\u5e26\u6765\u4e86\u542f\u53d1, \u66f4\u6df1\u7684\u7f51\u7edc\u53ef\u80fd\u5c31\u80fd\u591f\u5e26\u6765\u66f4\u597d\u7684\u8868\u8fbe\u80fd\u529b. \u4f46\u5e76\u4e0d\u662f\u8bf4\u6df1\u5c31\u80fd\u6df1\u7684, \u7f51\u7edc\u7684\u8bbe\u8ba1\u662f\u81f3\u5173\u91cd\u8981\u7684\u4e00\u73af.\nGoogLeNet Inception v1\u662fGoogLeNet\u7684\u6700\u65e9\u7248\u672c\uff0c\u51fa\u73b0\u57282014\u5e74\u7684\u300aGoing deeper with convolutions\u300b\u3002\u4e4b\u6240\u4ee5\u540d\u4e3a\u201cGoogLeNet\u201d\u800c\u975e\u201cGoogleNet\u201d,\u6587\u7ae0\u8bf4\u662f\u4e3a\u4e86\u5411\u65e9\u671f\u7684LeNet\u81f4\u656c\u3002\u800cInception\u8fd9\u4e2a\u540d\u5b57\u66f4\u662f\u4ee4\u4eba\u6d6e\u60f3\u8054\u7fe9, \u7b2c\u4e00\u77ac\u95f4\u5c31\u60f3\u5230\n\nkey: \u7a00\u758f\u8fde\u63a5:\n\n\u4e00\u65b9\u9762\u73b0\u5b9e\u751f\u7269\u795e\u7ecf\u7cfb\u7edf\u7684\u8fde\u63a5\u4e5f\u662f\u7a00\u758f\u7684\uff0c\n\n\u53e6\u4e00\u65b9\u9762\u6709\u6587\u732e\u8868\u660e\uff1a\u5bf9\u4e8e\u5927\u89c4\u6a21\u7a00\u758f\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u53ef\u4ee5\u901a\u8fc7\u5206\u6790\u6fc0\u6d3b\u503c\u7684\u7edf\u8ba1\u7279\u6027\u548c\u5bf9\u9ad8\u5ea6\u76f8\u5173\u7684\u8f93\u51fa\u8fdb\u884c\u805a\u7c7b\u6765\u9010\u5c42\u6784\u5efa\u51fa\u4e00\u4e2a\u6700\u4f18\u7f51\u7edc\u3002\u8fd9\u70b9\u8868\u660e\u81c3\u80bf\u7684\u7a00\u758f\u7f51\u7edc\u53ef\u80fd\u88ab\u4e0d\u5931\u6027\u80fd\u5730\u7b80\u5316\u3002\n\n\n\n1 . \u91c7\u7528\u4e0d\u540c\u5927\u5c0f\u7684\u5377\u79ef\u6838\u610f\u5473\u7740\u4e0d\u540c\u5927\u5c0f\u7684\u611f\u53d7\u91ce\uff0c\u6700\u540e\u62fc\u63a5\u610f\u5473\u7740\u4e0d\u540c\u5c3a\u5ea6\u7279\u5f81\u7684\u878d\u5408\uff1b \n2 . \u4e4b\u6240\u4ee5\u5377\u79ef\u6838\u5927\u5c0f\u91c7\u75281\u30013\u548c5\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u65b9\u4fbf\u5bf9\u9f50\u3002\u8bbe\u5b9a\u5377\u79ef\u6b65\u957fstride=1\u4e4b\u540e\uff0c\u53ea\u8981\u5206\u522b\u8bbe\u5b9apad=0\u30011\u30012(\u8fd9\u662fcaffe\u7684pading\u53c2\u6570)\uff0c\u90a3\u4e48\u5377\u79ef\u4e4b\u540e\u4fbf\u53ef\u4ee5\u5f97\u5230\u76f8\u540c\u7ef4\u5ea6\u7684\u7279\u5f81\uff0c\u7136\u540e\u8fd9\u4e9b\u7279\u5f81\u5c31\u53ef\u4ee5\u76f4\u63a5\u62fc\u63a5\u5728\u4e00\u8d77\u4e86\uff1b \n3 . \u6587\u7ae0\u8bf4\u5f88\u591a\u5730\u65b9\u90fd\u8868\u660epooling\u633a\u6709\u6548\uff0c\u6240\u4ee5Inception\u91cc\u9762\u4e5f\u5d4c\u5165\u4e86\u3002 \n4 . \u7f51\u7edc\u8d8a\u5230\u540e\u9762\uff0c\u7279\u5f81\u8d8a\u62bd\u8c61\uff0c\u800c\u4e14\u6bcf\u4e2a\u7279\u5f81\u6240\u6d89\u53ca\u7684\u611f\u53d7\u91ce\u4e5f\u66f4\u5927\u4e86\uff0c\u56e0\u6b64\u968f\u7740\u5c42\u6570\u7684\u589e\u52a0\uff0c3x3\u548c5x5\u5377\u79ef\u7684\u6bd4\u4f8b\u4e5f\u8981\u589e\u52a0\u3002\n\u5b9e\u9645\u4e0a\u5377\u79ef\u7684\u4f7f\u7528\u5c31\u4f1a\u5e26\u6765\u7a00\u758f\u6027. \u8fd9\u91cc\u5f15\u4eba\u6ce8\u76ee\u7684\u662f\u8fd9\u4e2a3\u00d73 \u7684pooling, \u770b\u770bresnet, \u6709\u51e0\u5206\u795e\u4f3c. \u8fd9\u6837\u7684\u4e00\u4e2apooling, \u5b9e\u9645\u4e0a\u53ef\u4ee5\u770b\u4f5c\u4e0a\u5c42\u7684\u76f4\u63a5\u4fe1\u606f\u8f93\u5165, \u76ee\u524d\u6765\u770b, \u76f4\u63a5\u5f15\u5165\u4e0a\u5c42\u7684\u4fe1\u606f\u4f1a\u6709\u76f8\u5f53\u597d\u7684\u6548\u679c. \u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4e5f\u51cf\u5c11\u4e86train\u8fc7\u7a0b\u4e2d\u68af\u5ea6\u6d88\u5931\u548c\u7206\u70b8. \u548c\u540e\u9762\u5177\u4f53\u7ed3\u6784\u56fe\u4e2d\u770b\u5230\u7684\u524d\u4e24\u4e2asoftmax\u4e00\u4e2a\u6548\u679c.\n\u4f46\u662f\uff0c\u4f7f\u75285x5\u7684\u5377\u79ef\u6838\u4ecd\u7136\u4f1a\u5e26\u6765\u5de8\u5927\u7684\u8ba1\u7b97\u91cf\u3002 \u4e3a\u6b64\uff0c\u6587\u7ae0\u501f\u9274'Network in network'\uff0c\u91c7\u75281x1\u5377\u79ef\u6838\u6765\u8fdb\u884c\u964d\u7ef4\u3002\n\u6539\u8fdb\u4e3a\n\n\u6700\u540e\u7684GoogLeNet\uff08Inception-V1\uff09\u7684\u7ed3\u6784\u56fe\u5982\u4e0b\uff1a\n\n1 . GoogLeNet\u91c7\u7528\u4e86\u6a21\u5757\u5316\u7684\u7ed3\u6784\uff0c\u65b9\u4fbf\u589e\u6dfb\u548c\u4fee\u6539\uff1b \n2 . \u7f51\u7edc\u6700\u540e\u91c7\u7528\u4e86average pooling\u6765\u4ee3\u66ff\u5168\u8fde\u63a5\u5c42\uff0c\u60f3\u6cd5\u6765\u81eaNIN,\u4e8b\u5b9e\u8bc1\u660e\u53ef\u4ee5\u5c06TOP1 accuracy\u63d0\u9ad80.6%\u3002\u4f46\u662f\uff0c\u5b9e\u9645\u5728\u6700\u540e\u8fd8\u662f\u52a0\u4e86\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u5927\u5bb6finetune \n3 . \u7f51\u7edc\u4e2d\u4f9d\u7136\u4f7f\u7528\u4e86Dropout\n4 . \u4e3a\u4e86\u907f\u514d\u68af\u5ea6\u6d88\u5931\uff0c\u7f51\u7edc\u989d\u5916\u589e\u52a0\u4e862\u4e2a\u8f85\u52a9\u7684softmax\u7528\u4e8e\u5411\u524d\u4f20\u5bfc\u68af\u5ea6\u3002\nGoogLeNet\u4e00\u5bb6\u5b50---Inception v2v3\n\u300aRethinking the Inception Architecture for Computer Vision\u300b, V1\u7684\u8fdb\u5316\u7248.\n\u9996\u5148\u901a\u8fc7\u5b9e\u9a8c \u7ed9\u51fa\u4e86\u4e00\u4e9b\u5df2\u7ecf\u88ab\u8bc1\u660e\u6709\u6548\u7684\u7528\u4e8e\u653e\u5927\u7f51\u7edc\u7684\u901a\u7528\u51c6\u5219\u548c\u4f18\u5316\u65b9\u6cd5\u3002\u8fd9\u4e9b\u51c6\u5219\u548c\u65b9\u6cd5\u9002\u7528\u4f46\u4e0d\u5c40\u9650\u4e8eInception\u7ed3\u6784\u3002\n\n\u907f\u514d\u8868\u8fbe\u74f6\u9888\uff0c\u7279\u522b\u662f\u5728\u7f51\u7edc\u9760\u524d\u7684\u5730\u65b9\u3002 \u4fe1\u606f\u6d41\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u663e\u7136\u4e0d\u80fd\u7ecf\u8fc7\u9ad8\u5ea6\u538b\u7f29\u7684\u5c42\uff0c\u5373\u8868\u8fbe\u74f6\u9888\u3002\u4eceinput\u5230output\uff0cfeature map\u7684\u5bbd\u548c\u9ad8\u57fa\u672c\u90fd\u4f1a\u9010\u6e10\u53d8\u5c0f\uff0c\u4f46\u662f\u4e0d\u80fd\u4e00\u4e0b\u5b50\u5c31\u53d8\u5f97\u5f88\u5c0f\u3002\u6bd4\u5982\u4f60\u4e0a\u6765\u5c31\u6765\u4e2akernel = 7, stride = 5 ,\u8fd9\u6837\u663e\u7136\u4e0d\u5408\u9002\u3002 \u53e6\u5916\u8f93\u51fa\u7684\u7ef4\u5ea6channel\uff0c\u4e00\u822c\u6765\u8bf4\u4f1a\u9010\u6e10\u589e\u591a(\u6bcf\u5c42\u7684num_output)\uff0c\u5426\u5219\u7f51\u7edc\u4f1a\u5f88\u96be\u8bad\u7ec3\u3002\uff08\u7279\u5f81\u7ef4\u5ea6\u5e76\u4e0d\u4ee3\u8868\u4fe1\u606f\u7684\u591a\u5c11\uff0c\u53ea\u662f\u4f5c\u4e3a\u4e00\u79cd\u4f30\u8ba1\u7684\u624b\u6bb5\uff09\n\u9ad8\u7ef4\u7279\u5f81\u66f4\u6613\u5904\u7406\u3002 \u9ad8\u7ef4\u7279\u5f81\u66f4\u6613\u533a\u5206\uff0c\u4f1a\u52a0\u5feb\u8bad\u7ec3\u3002\n\u53ef\u4ee5\u5728\u4f4e\u7ef4\u5d4c\u5165\u4e0a\u8fdb\u884c\u7a7a\u95f4\u6c47\u805a\u800c\u65e0\u9700\u62c5\u5fc3\u4e22\u5931\u5f88\u591a\u4fe1\u606f\u3002 \u6bd4\u5982\u5728\u8fdb\u884c3x3\u5377\u79ef\u4e4b\u524d\uff0c\u53ef\u4ee5\u5bf9\u8f93\u5165\u5148\u8fdb\u884c\u964d\u7ef4\u800c\u4e0d\u4f1a\u4ea7\u751f\u4e25\u91cd\u7684\u540e\u679c\u3002(\u9488\u5bf91\u00d71kernel)\n\u5e73\u8861\u7f51\u7edc\u7684\u5bbd\u5ea6\u4e0e\u6df1\u5ea6\u3002\n\n\u518d\u6765\u8bf4V2\u5728\u54ea\u91cc\u6539\u8fdb\u4e86.\n\u9996\u5148\u5c31\u6b7b, \u7528\u4e24\u4e2a\u8fde\u7eed\u76843\u00d73\u5377\u79ef\u5c42\u6765\u4ee3\u66ff5\u00d75\u7684kernel. \u5e26\u6765\u7684\u4e24\u4e2a\u95ee\u9898:\n1 . \u8fd9\u79cd\u66ff\u4ee3\u4f1a\u9020\u6210\u8868\u8fbe\u80fd\u529b\u7684\u4e0b\u964d\u5417\uff1f \n\u540e\u9762\u6709\u5927\u91cf\u5b9e\u9a8c\u53ef\u4ee5\u8868\u660e\u4e0d\u4f1a\u9020\u6210\u8868\u8fbe\u7f3a\u5931\uff1b\n2 . 3x3\u5377\u79ef\u4e4b\u540e\u8fd8\u8981\u518d\u52a0\u6fc0\u6d3b\u5417\uff1f \n\u4f5c\u8005\u4e5f\u505a\u4e86\u5bf9\u6bd4\u8bd5\u9a8c\uff0c\u8868\u660e\u6dfb\u52a0\u975e\u7ebf\u6027\u6fc0\u6d3b\u4f1a\u63d0\u9ad8\u6027\u80fd\u3002\n\u4ece\u8fd9\u91cc\u51fa\u53d1, 3\u00d73\u8fd8\u80fd\u600e\u4e48\u53d8\u5f97\u66f4\u5c0f\u5462? --&gt;\u91c7\u75281\u00d7n\u5377\u79ef\u6838\n\u5176\u6b21\uff0c\u5f15\u5165\u975e\u5bf9\u79f0\u5377\u79ef\u3002\u4f8b\u5982\uff0c\u5c063x1\u7684\u5377\u79ef\u548c1x3\u7684\u5377\u79ef\u4e32\u8054\u8d77\u6765\uff0c\u4e0e\u76f4\u63a5\u8fdb\u884c3x3\u5377\u79ef\u7684\u7ed3\u679c\u662f\u7b49\u4ef7\u7684\u3002\u8fd9\u79cd\u5377\u79ef\u65b9\u5f0f\u5927\u5927\u964d\u4f4e\u4e86\u53c2\u6570\u91cf\uff0c\u4ecenxn\u964d\u5230\u4e862xn\uff0c\u6240\u4ee5\u5f53n\u8d8a\u5927\uff0c\u964d\u4f4e\u5f97\u8d8a\u591a\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u4f5c\u8005\u53d1\u73b0\u5728\u7f51\u7edc\u7684\u524d\u671f\u4f7f\u7528\u8fd9\u79cd\u5206\u89e3\u6548\u679c\u5e76\u4e0d\u597d\uff0c\u8fd8\u6709\u5728\u4e2d\u5ea6\u5927\u5c0f\u7684feature map\u4e0a\u4f7f\u7528\u6548\u679c\u624d\u4f1a\u66f4\u597d\u3002\uff08\u5bf9\u4e8emxm\u5927\u5c0f\u7684feature map,\u5efa\u8baem\u572812\u523020\u4e4b\u95f4\uff09.\n\n\n\u56fe5\u662f\u75283x3\u5377\u79ef\u5e8f\u5217\u6765\u4ee3\u66ff\u5927\u5377\u79ef\u6838\uff1b\n\u56fe6\u662f\u7528nx1\u5377\u79ef\u6765\u4ee3\u66ff\u5927\u5377\u79ef\u6838. \u8be5\u7ed3\u6784\u88ab\u6b63\u5f0f\u7528\u5728GoogLeNet V2\u4e2d.\n\n\u7b2c\u4e09\u79cd\u6a21\u5f0f\u4f1a\u5728\u6bd4\u8f83\u6df1\u7684\u5730\u65b9\u624d\u91c7\u7528.\nv3\u5728raw\u7684v2\u4e0a\u505a\u4e86\u5982\u4e0b\u53d8\u5316\uff1aRMSProp\u66ff\u4ee3SGD\uff0c\u5728\u7c7b\u522b\u5168\u8fde\u63a5\u5c42\u540e\u52a0\u5165 LSR\u5c42\uff0c\u5c067x7\u5377\u79ef\u6838\u7531\u4e09\u4e2a3x3\u5377\u79ef\u6838\u66ff\u4ee3\u3002\n\nBN\u65b9\u9762\u4f1a\u653e\u5728\u8fd9\u91cc\nhttps://lishiyuwhu.github.io/2017-11/%E6%89%8B%E6%92%95Batch%20normalization/\nLSR:label smooth regularization\n\u6df1\u5ea6\u5b66\u4e60\u7528\u7684labels\u4e00\u822c\u90fd\u662fone hot\u5411\u91cf\uff0c\u7528\u6765\u6307\u793aclassifier\u7684\u552f\u4e00\u7ed3\u679c\uff0c\u8fd9\u6837\u7684label\u50cf\u4e2a\u8109\u51b2\u51fd\u6570, \u6709Dirac delta function\u7684\u611f\u89c9\nLabels\u7684\u8109\u51b2\u6027\u8d28\u4f1a\u5f15\u53d1\u4e24\u4e2a\u4e0d\u826f\u540e\u679c\uff1a\u4e00\u662fover-fitting\uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u964d\u4f4e\u4e86\u7f51\u7edc\u7684\u9002\u5e94\u6027\u3002\nFirst, it may result in over-fitting: if the model learns to assign full probability to the groundtruth label for each training example, it is not guaranteed to generalize. Second, it encourages the differences between the largest logit and all others to become large, and this, combined with the bounded gradient, reduces the ability of the model to adapt.\nIntuitively, this happens because the model becomes too confident about its predictions.\n\n\nnew_labels = (1.0 - label_smoothing) * one_hot_labels + label_smoothing / num_classes\n1\u00d71 kernel\n1\u00d71\u7684kernel\u5728\u4e4b\u540e\u7684\u6781\u6df1\u7f51\u7edc\u4e2d\u90fd\u6709\u91cd\u8981\u7684\u4f4d\u7f6e. \u672c\u8d28\u4e0a\u6765\u8bf4, 1\u00d71 kernel\u5c31\u662f\u628afeature map\u6309\u901a\u9053\u505a\u53e0\u52a0, \u53ea\u4e0d\u8fc7\u5199\u6210kernel\u5f62\u5f0f\u5728\u73b0\u6709\u7f51\u7edc\u7ed3\u6784\u4e2d\u597d\u8868\u8fbe\u800c\u5df2, \u63a5\u4e0d\u63a5relu\u90fd\u662f\u6b21\u8981\u7684. (\u6ce8\u610f, 1\u00d71\u7684kernel\u4e00\u4e2a\u95ee\u9898\u662f\u5e76\u4e0d\u4f1a\u8003\u8651\u76f8\u90bb\u50cf\u7d20\u4e4b\u95f4\u7684\u8054\u7cfb. )(NIN\u539f\u6587\u4e2d, \u5c06\u5176\u5176\u770b\u4f5c\u4e00\u4e2a\u8de8\u901a\u9053\u7684GAP)\n\u4f5c\u7528:\n\n\u964d\u7ef4. \u975e\u5e38\u663e\u8457\u7684\u964d\u7ef4\u6548\u679c\nbottleneck layer\u7684\u5177\u4f53\u6548\u679c\u8ba1\u7b97:\n\u56fe\u7247\u63cf\u8ff0\n\u56fe\u7247\u63cf\u8ff0\n\n\u540e\u9762\u5982\u679c\u52a0\u4e0arelu\u8fd9\u79cd\u6fc0\u6d3b\u51fd\u6570, \u540c\u65f6\u4e5f\u5f15\u5165\u4e86\u975e\u7ebf\u6027.\n\n\nResNet\n\n\n\u5206\u6790:\n[1605.06431] Residual Networks Behave Like Ensembles of Relatively Shallow Networks\n\u4e3b\u8981\u601d\u60f3\u5c31\u662f, ResNet\u5176\u5b9e\u662f\u4e00\u4e2aensemble\u7cfb\u7edf.\n\n\u6587\u7ae0\u4e2d\u901a\u8fc7\u5206\u6790\u68af\u5ea6, \u53d1\u73b0ResNet\u5176\u5b9e\u5927\u90e8\u5206\u90fd\u662f\u4e2d\u7b49\u6df1\u5ea6\u7684\u7f51\u7edc.\n\u6240\u4ee5\u8bf4, resnet\u771f\u7684\u89e3\u51b3\u4e86\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u5417? \u5e76\u6ca1\u6709, \u90a3\u4e9b\u5c11\u6570\u7684\u6700\u6df1\u7684\u7f51\u7edc\u968f\u7740BP\u68af\u5ea6\u4f9d\u7136\u8d8a\u6765\u8d8a\u5c0f, \u53ea\u4e0d\u8fc7\u7684skip connect\u628a\u68af\u5ea6\u76f4\u63a5\u4f20\u56de\u53bb, \u8ba9\u603b\u4f53\u7f51\u7edc\u68af\u5ea6\u6d88\u5931\u4e0d\u660e\u663e\u4e86.\n\u800cSzegedy\u5728V4\u7248\u672c\u6587\u7ae0\u4e2d, \u8868\u793a: Residual Connections\u52a0\u901f\u4e86\u7f51\u7edc\u6536\u655b\uff0c\u771f\u6b63\u63d0\u9ad8\u7f51\u7edc\u7cbe\u5ea6\u7684\u662f\u66f4\u5927\u7684\u7f51\u7edc\u89c4\u6a21\nAlthough the residual version converges faster, the final accuracy seems to mainly depend on the model size.\n\nDenseNet\nDensely Connected Convolutional Networks\nPrior work has shown that there is great redundancy within the feature maps of the individual layers in ResNets. In DenseNets, all layers have direct access to every feature map from all preceding layers, which means that there is no need to re-learn redundant feature maps. Consequently, DenseNet layers are very narrow (on the order of 12 feature maps per layer) and only add a small set of feature maps to the \u201ccollective knowledge\u201d of the whole network.\n\nDenseNet\u7684\u5173\u952e\u8bcd: Feature Reuse . \u800c\u6b63\u662f\u9ad8\u5ea6\u7684\u91cd\u7528, \u53ef\u4ee5\u8ba9\u5176\u628a\u7f51\u7edc\u8bbe\u8ba1\u7684\u7279\u522b\u7684\u7a84, \u6bcf\u5c42\u53ea\u6709\u5c11\u91cf\u7279\u5f81\u56fe\u7684\u5b66\u4e60, \u964d\u4f4e\u5197\u4f59.\n\u5177\u4f53\u7ed3\u6784:\n\u56fe\u7247\u63cf\u8ff0\n\u56fe\u7247\u63cf\u8ff0\n\u5176\u5b9e\u65e0\u8bbadensenet\u8fd8\u662fresnet, \u90fd\u662fhighway net\u7684\u90a3\u4e2askip connection\u7b56\u7565:\n\u5bf9\u4e8e\u67d0\u4e9b\u7684\u8f93\u5165\u4e0d\u52a0\u9009\u62e9\u7684\u8ba9\u5176\u8fdb\u5165\u4e4b\u540e\u7684layer(skip)\uff0c\u4ece\u800c\u5b9e\u73b0\u4fe1\u606f\u6d41\u7684\u6574\u5408\uff0c\u907f\u514d\u4e86\u4fe1\u606f\u5728\u5c42\u95f4\u4f20\u9012\u7684\u4e22\u5931\u548c\u68af\u5ea6\u6d88\u5931\u7684\u95ee\u9898(\u8fd8\u6291\u5236\u4e86\u67d0\u4e9b\u566a\u58f0\u7684\u4ea7\u751f).\nDenseNet\u7684\u4f18\u70b9\u662f\u53c2\u6570\u5c11, \u8ba1\u7b97\u901f\u5ea6\u5feb, \u9ad8\u5ea6\u7684\u7279\u5f81\u91cd\u7528\u8fd8\u5e26\u6765\u4e86\u4e00\u5b9a\u7684\u6297\u8fc7\u62df\u5408\u80fd\u529b(\u5f53\u7136\u4e5f\u53ef\u80fd\u53ea\u662f\u53c2\u6570\u51cf\u5c11\u5e26\u6765\u7684).  \u6bcf\u4e00\u5c42\u90fd\u76f4\u63a5\u7684\u4e0eloss\u548cinput\u76f8\u8fde, \u6781\u5927\u7684\u51cf\u8f7b\u4e86\u68af\u5ea6\u6d88\u5931\u95ee\u9898, \u4f7f\u5f97densenet\u5728\u6781\u6df1\u60c5\u5f62\u4e0b\u4f9d\u7136\u4fdd\u6301\u826f\u597d\u7684\u6027\u80fd.\n(\u5185\u5b58\u4f7f\u7528\u5c31\u662f\u53e6\u4e00\u56de\u4e8b\u4e86, \u4e13\u95e8\u6709\u7bc7\u4f18\u5316\u5185\u5b58\u4f7f\u7528\u7684\u6587\u7ae0Memory-Efficient Implementation of DenseNets)\n\u4f5c\u8005\u9ec4\u9ad8\u535a\u58eb\u53ca\u5218\u58ee\u5728\u8bbf\u8c08\u4e2d\u4e5f\u63d0\u5230:\nDenseNet \u7684\u60f3\u6cd5\u5f88\u5927\u7a0b\u5ea6\u4e0a\u6e90\u4e8e\u6211\u4eec\u53bb\u5e74\u53d1\u8868\u5728 ECCV \u4e0a\u7684\u4e00\u4e2a\u53eb\u505a\u968f\u673a\u6df1\u5ea6\u7f51\u7edc\uff08Deep networks with stochastic depth\uff09\u5de5\u4f5c\u3002\u5f53\u65f6\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u7c7b\u4f3c\u4e8e Dropout \u7684\u65b9\u6cd5\u6765\u6539\u8fdbResNet\u3002\u6211\u4eec\u53d1\u73b0\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u6bcf\u4e00\u6b65\u90fd\u968f\u673a\u5730\u300c\u6254\u6389\u300d\uff08drop\uff09\u4e00\u4e9b\u5c42\uff0c\u53ef\u4ee5\u663e\u8457\u7684\u63d0\u9ad8 ResNet \u7684\u6cdb\u5316\u6027\u80fd\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7684\u6210\u529f\u81f3\u5c11\u5e26\u7ed9\u6211\u4eec\u4e24\u70b9\u542f\u53d1\uff1a\n\u9996\u5148\uff0c\u5b83\u8bf4\u660e\u4e86\u795e\u7ecf\u7f51\u7edc\u5176\u5b9e\u5e76\u4e0d\u4e00\u5b9a\u8981\u662f\u4e00\u4e2a\u9012\u8fdb\u5c42\u7ea7\u7ed3\u6784\uff0c\u4e5f\u5c31\u662f\u8bf4\u7f51\u7edc\u4e2d\u7684\u67d0\u4e00\u5c42\u53ef\u4ee5\u4e0d\u4ec5\u4ec5\u4f9d\u8d56\u4e8e\u7d27\u90bb\u7684\u4e0a\u4e00\u5c42\u7684\u7279\u5f81\uff0c\u800c\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u66f4\u524d\u9762\u5c42\u5b66\u4e60\u7684\u7279\u5f81\u3002\u60f3\u50cf\u4e00\u4e0b\u5728\u968f\u673a\u6df1\u5ea6\u7f51\u7edc\u4e2d\uff0c\u5f53\u7b2c l \u5c42\u88ab\u6254\u6389\u4e4b\u540e\uff0c\u7b2c l+1 \u5c42\u5c31\u88ab\u76f4\u63a5\u8fde\u5230\u4e86\u7b2c l-1 \u5c42\uff1b\u5f53\u7b2c 2 \u5230\u4e86\u7b2c l \u5c42\u90fd\u88ab\u6254\u6389\u4e4b\u540e\uff0c\u7b2c l+1 \u5c42\u5c31\u76f4\u63a5\u7528\u5230\u4e86\u7b2c 1 \u5c42\u7684\u7279\u5f81\u3002\u56e0\u6b64\uff0c\u968f\u673a\u6df1\u5ea6\u7f51\u7edc\u5176\u5b9e\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u5177\u6709\u968f\u673a\u5bc6\u96c6\u8fde\u63a5\u7684 DenseNet\u3002\n\u5176\u6b21\uff0c\u6211\u4eec\u5728\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e2d\u968f\u673a\u6254\u6389\u5f88\u591a\u5c42\u4e5f\u4e0d\u4f1a\u7834\u574f\u7b97\u6cd5\u7684\u6536\u655b\uff0c\u8bf4\u660e\u4e86 ResNet \u5177\u6709\u6bd4\u8f83\u660e\u663e\u7684\u5197\u4f59\u6027\uff0c\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e00\u5c42\u90fd\u53ea\u63d0\u53d6\u4e86\u5f88\u5c11\u7684\u7279\u5f81\uff08\u5373\u6240\u8c13\u7684\u6b8b\u5dee\uff09\u3002\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5c06\u8bad\u7ec3\u597d\u7684 ResNet \u968f\u673a\u7684\u53bb\u6389\u51e0\u5c42\uff0c\u5bf9\u7f51\u7edc\u7684\u9884\u6d4b\u7ed3\u679c\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u592a\u5927\u7684\u5f71\u54cd\u3002\u65e2\u7136\u6bcf\u4e00\u5c42\u5b66\u4e60\u7684\u7279\u5f81\u8fd9\u4e48\u5c11\uff0c\u80fd\u4e0d\u80fd\u964d\u4f4e\u5b83\u7684\u8ba1\u7b97\u91cf\u6765\u51cf\u5c0f\u5197\u4f59\u5462\uff1f\nDenseNet \u7684\u8bbe\u8ba1\u6b63\u662f\u57fa\u4e8e\u4ee5\u4e0a\u4e24\u70b9\u89c2\u5bdf\u3002\u6211\u4eec\u8ba9\u7f51\u7edc\u4e2d\u7684\u6bcf\u4e00\u5c42\u90fd\u76f4\u63a5\u4e0e\u5176\u524d\u9762\u5c42\u76f8\u8fde\uff0c\u5b9e\u73b0\u7279\u5f81\u7684\u91cd\u590d\u5229\u7528\uff1b\u540c\u65f6\u628a\u7f51\u7edc\u7684\u6bcf\u4e00\u5c42\u8bbe\u8ba1\u5f97\u7279\u522b\u300c\u7a84\u300d\uff0c\u5373\u53ea\u5b66\u4e60\u975e\u5e38\u5c11\u7684\u7279\u5f81\u56fe\uff08\u6700\u6781\u7aef\u60c5\u51b5\u5c31\u662f\u6bcf\u4e00\u5c42\u53ea\u5b66\u4e60\u4e00\u4e2a\u7279\u5f81\u56fe\uff09\uff0c\u8fbe\u5230\u964d\u4f4e\u5197\u4f59\u6027\u7684\u76ee\u7684\u3002\u8fd9\u4e24\u70b9\u4e5f\u662f DenseNet \u4e0e\u5176\u4ed6\u7f51\u7edc\u6700\u4e3b\u8981\u7684\u4e0d\u540c\u3002\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u7b2c\u4e00\u70b9\u662f\u7b2c\u4e8c\u70b9\u7684\u524d\u63d0\uff0c\u6ca1\u6709\u5bc6\u96c6\u8fde\u63a5\uff0c\u6211\u4eec\u662f\u4e0d\u53ef\u80fd\u628a\u7f51\u7edc\u8bbe\u8ba1\u5f97\u592a\u7a84\u7684\uff0c\u5426\u5219\u8bad\u7ec3\u4f1a\u51fa\u73b0\u6b20\u62df\u5408\uff08under-fitting\uff09\u73b0\u8c61\uff0c\u5373\u4f7f ResNet \u4e5f\u662f\u5982\u6b64\u3002\n\n\n\u6a21\u5757\u8ba4\u77e5\n\u63a5\u4e0b\u6765, \u5c31\u5bf9\u539f\u59cbCNN\u7684\u56db\u4e2a\u6a21\u5757\u6765\u5206\u522b\u8bf4\u8bf4.\nKernel\n\u65e9\u671f\u7684kernel\u90fd\u8bbe\u8ba1\u7684\u6bd4\u8f83\u5927, 7\u00d77\u8fd9\u79cd, \u5f53\u65f6\u7684\u89c2\u70b9\u662f\u9700\u8981\u6355\u6349\u90bb\u57df\u4fe1\u606f(\u5f53\u7136CNN\u4e5f\u662f\u4e3a\u4e86\u5904\u7406\u8fd9\u79cd\u76f8\u5173\u6027\u8f83\u5f3a\u7684\u4fe1\u606f). \u800c\u540e\u53d1\u73b0, \u8fde\u7eed\u7684\u5c0f\u7684kernel\u4e00\u6837\u80fd\u6709\u5927\u5377\u79ef\u6838\u7684\u9ad8\u7ef4\u62bd\u8c61\u7684\u6548\u679c, \u5e76\u4e14\u505a\u91cd\u8981\u7684\u662f, \u5c0f\u5377\u79ef\u6838\u5728\u4fdd\u6301\u6a21\u578b\u7684capacity\u540c\u65f6, \u8fd8\u6709\u5c11\u5f97\u591a\u7684\u53c2\u6570, \u8fd9\u5bf9\u8ba1\u7b97\u4ee5\u53ca\u6297\u8fc7\u62df\u5408\u90fd\u8d77\u5230\u4e86\u5f88\u5927\u7684\u5e2e\u52a9. \u540e\u6765\u5927\u91cf\u4f7f\u75283\u00d73\u7684kernel, \u4e43\u81f31\u00d73 3\u00d71\u8fd9\u79cd\u975e\u5bf9\u79f0\u5377\u79ef(\u9700\u8981\u5c0f\u5fc3\u4f7f\u7528). \u800c1\u00d71kernel\u66f4\u591a\u662f\u8d77\u5230\u4e86\u964d\u7ef4\u7684\u4f5c\u7528.\nActivate function\nSigmoid\u51fd\u6570$Sigmoid(x) = \\frac{1}{1+e^{-x}}$, tanh\u51fd\u6570$tanh(x) = 2Sigmoid(2x) - 1$\n\u539f\u59cb\u7684sigmoid/tanh\u6709\u4e00\u4e2a\u975e\u5e38\u81f4\u547d\u7684\u7f3a\u70b9\uff0c\u4ed6\u4eec\u662f\u9971\u548c(saturate)\u51fd\u6570. \u5f53\u8f93\u5165\u975e\u5e38\u5927\u6216\u8005\u975e\u5e38\u5c0f\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u795e\u7ecf\u5143\u7684\u68af\u5ea6\u662f\u63a5\u8fd1\u4e8e0\u7684. \u5982\u679c\u4f60\u7684\u521d\u59cb\u503c\u5f88\u5927\u7684\u8bdd\uff0c\u5927\u90e8\u5206\u795e\u7ecf\u5143\u53ef\u80fd\u90fd\u4f1a\u5904\u5728\u9971\u548c\u7684\u72b6\u6001\u800c\u628agradient kill\u6389\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u7f51\u7edc\u53d8\u7684\u5f88\u96be\u5b66\u4e60\u3002\n\u4f7f\u7528 ReLU\u5f97\u5230\u7684SGD\u7684\u6536\u655b\u901f\u5ea6\u4f1a\u6bd4sigmoid/tanh\u5feb\u5f88\u591a\uff0c\u76f8\u6bd4\u4e8esigmoid/tanh\uff0cReLU\u53ea\u9700\u8981\u4e00\u4e2a\u9608\u503c\u5c31\u53ef\u4ee5\u5f97\u5230\u6fc0\u6d3b\u503c\uff0c\u800c\u4e0d\u7528\u53bb\u7b97\u4e00\u5927\u5806\u590d\u6742\u7684\u8fd0\u7b97\u3002Relu\u80fd\u52a0\u901f\u8bad\u7ec3\uff0c\u5bfc\u6570\u597d\u6c42\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u65f6\u901f\u5ea6\u5feb\uff0c\u6fc0\u6d3b\u90e8\u5206\u68af\u5ea6\u662f1\uff0c\u68af\u5ea6\u4e0d\u5bb9\u6613\u6d88\u5931\uff0c\u800cSigmoid\u548ctanh\u5728\u4e24\u7aef\u68af\u5ea6\u6d88\u5931\u4e25\u91cd\u3002\nRelu\u7684\u7f3a\u9677:\n\n\u5728x&lt;0\u65f6, \u8f93\u51fay&lt;0, \u540c\u65f6\u5bfc\u6570\u4e5f\u7b49\u4e8e0, \u5bfc\u81f4\u53c2\u6570\u4e0d\u4f1a\u518d\u66f4\u65b0, \u8fd9\u79cd\u60c5\u51b5\u88ab\u79f0\u4e3adying relu.(\u5f53\u7136\u8fd9\u4e2a\u662f\u597d\u662f\u574f\u53e6\u8fd8\u662f\u6709\u4e89\u8bae, \u6709\u4eba\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u6709\u9009\u62e9\u7684drop out)\n\u5f53\u6211\u4eec\u7684\u8f93\u5165\u65f6\u4e00\u822c\u4f1a\u7ecf\u8fc7\u5904\u7406\u8ba9\u5176\u6b63\u89c4\u5316, \u4f46\u7ecf\u8fc7relu\u5355\u5143\u8fc7\u540e\u5c31\u4e0d\u53ef\u907f\u514d\u7684\u4ea7\u751f\u4e86bias.(BN\u5c42\u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898)\n\n\u56fe\u7247\u63cf\u8ff0\n\u5176\u5b9e\u6fc0\u6d3b\u51fd\u6570\u8fd9\u65b9\u9762\u8fd8\u662f\u4e00\u56e2\u8ff7\u96fe, CNN\u91cc\u9762\u5927\u5bb6\u90fd\u8bf4\u9971\u548c\u7684\u6fc0\u6d3b\u51fd\u6570\u4e0d\u597d, \u770b\u4e00\u773c\u9694\u58c1RNN tanh\u53cd\u800c\u662f\u7b2c\u4e00\u9009\u62e9.\nPooling\npooling\u5c42:\n\n\u5f15\u5165\u975e\u7ebf\u6027.\nsubsampling\n\nsubsampling\u9996\u5148\u662f\u5f15\u5165\u4e86\u4e00\u5b9a\u7684\u5e73\u79fb\u4e0d\u53d8\u6027, \u5176\u6b21\u662f\u4ee5\u4e00\u5b9a\u4fe1\u606f\u635f\u5931\u7684\u4ee3\u4ef7\u51cf\u5c11\u4e86\u53c2\u6570, \u51cf\u5c11\u4e86\u8ba1\u7b97\u91cf, \u4e5f\u662f\u8ba1\u7b97\u91cf\u548c\u6027\u80fd\u7684trade-off.\nstride=1\u7684pooling layer, \u4e3b\u8981\u662f\u589e\u5927\u4e86\u611f\u53d7\u91ce, \u6240\u4ee5\u4e5f\u5927\u90fd\u662fmeanpool\nstrde&gt;1 \u7684pooling layer, \u5c31\u662f\u964d\u7ef4\u51cf\u5c11\u8ba1\u7b97\u91cf\n\u5c31\u8fd9\u51e0\u4e2a\u65b0\u7684\u6a21\u578b\u6765\u770b, \u4f3c\u4e4eavgpool\u4e5f\u5e76\u4e0d\u662f\u90a3\u4e48\u7684\u4e0d\u582a, \u5728\u7f51\u7edc\u7684\u540e\u6bb5, \u9ad8\u7ef4\u7279\u5f81\u90e8\u5206, \u4f7f\u7528avgpool\u51cf\u5c11\u4fe1\u606f\u7684\u635f\u5931\u4f3c\u4e4e\u662f\u4e2a\u53ef\u9009\u9879. \n \u6bd4\u5982\u8bf4\u8fd9\u4e2a\u5feb\u901fcifar-10\u7ed3\u6784\n (http://www.cnblogs.com/neopenx/p/4480701.html)\nFull Connected Layer\n\u5173\u4e8e\u5168\u8fde\u63a5\u5c42\u7684\u8bbe\u8ba1\u7406\u5ff5. \u6e90\u4e8e\u65e9\u671fCV\u4e2d\u7684\u5de5\u4f5c\u65b9\u6cd5, \u624b\u5de5\u8bbe\u8ba1\u7279\u5f81\u63d0\u53d6\u7b97\u5b50\u7528\u4e8e\u63d0\u53d6\u7279\u5f81, \u518d\u7528adaboost svm\u53bb\u4f5c\u5206\u7c7b.\n\u5230\u4e86NN\u7ed3\u6784\u7684\u8bbe\u8ba1\u4e2d, \u4f9d\u7136\u6709\u4e00\u5b9a\u7684\u8fd9\u79cd\u60f3\u6cd5\u5b58\u5728: conv+relu+pooling\u5806\u53e0\u4f5c\u7279\u5f81\u63d0\u53d6, \u4e4b\u540e\u4e00\u4e2aflatten\u5c42\u4f5c\u4e3a\u6700\u540e\u5168\u8fde\u63a5\u5c42\u8f93\u5165\u8fdb\u884c\u5206\u7c7b. \u867d\u7136\u6574\u4e2aCNN\u662f\u4e00\u4e2aend-to-end\u7684\u6a21\u5f0f, \u4f46\u5185\u5728\u7684\u7279\u5f81\u63d0\u53d6\u548c\u5206\u7c7b\u8fc7\u7a0b\u4f9d\u7136\u662f\u5206\u79bb\u7684.\n\u8fd9\u5f53\u7136\u662f\u5f88\u81ea\u7136\u7684\u60f3\u6cd5. \u4f46\u662f\u4e4b\u540e\u901a\u8fc7\u5206\u6790\u53d1\u73b0, FC\u5c42\u5728\u6574\u4e2a\u7f51\u7edc\u7684\u53c2\u6570\u4e2d\u5360\u4e86\u76f8\u5f53\u5927\u4e00\u90e8\u5206\u7684\u6bd4\u4f8b(80%), \u4e8e\u662fNIN\u5c31\u51fa\u73b0\u4e86GAP(global average pooling)\u6765\u4ee3\u66ffFC\u5c42\u7684\u505a\u6cd5, \u6700\u540e\u7684\u6548\u679c\u53d1\u73b0\u6a21\u578b\u51c6\u786e\u6027\u5e76\u6ca1\u6709\u964d\u4f4e, \u540c\u65f6\u53c2\u6570\u91cf\u4e5f\u4e0b\u964d\u4e86\u4e0d\u5c11. \u76f4\u63a5\u5728\u5377\u79ef\u5806\u53e0\u6700\u540e\u62c9\u51fa\u676510\u4e2afeature map(\u5047\u8bbe10\u7c7b), \u6bcf\u4e2afeature map\u4f5cGAP\u5f97\u5230\u7684\u503c\u5f53\u4f5c\u8fd9\u4e2a\u7c7b\u7684confidence value, \u518d\u6254\u8fdbsoftmax\u4e2d\u5206\u7c7b.\n\n\u53c2\u8003:\nhttp://blog.csdn.net/KangRoger/article/details/69218625\nhttps://zhuanlan.zhihu.com/p/31006686\nhttp://blog.csdn.net/shuzfan/article/details/50738394\nhttp://kaiminghe.com/ilsvrc15/ilsvrc2015_deep_residual_learning_kaiminghe.pdf\nhttp://www.jianshu.com/p/0cc42b8e6d25\nhttp://www.sohu.com/a/161923204_651893\nhttp://www.caffecn.cn/?/question/136\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "M", "slug": "M", "permalink": "/tag/M/"}, {"name": "L", "slug": "L", "permalink": "/tag/L/"}]}, {"title": "TFrecords\u4f7f\u7528, \u6570\u636e\u96c6\u5236\u4f5c\u76f8\u5173\u603b\u7ed3", "date": "2017-11-30T09:15:00-00.00", "path": "/archives/TFrecords\u4f7f\u7528, \u6570\u636e\u96c6\u5236\u4f5c\u76f8\u5173\u603b\u7ed3/", "text": "\u5728TensorFlow\u4e2d\u4ee5\u8f38\u5165\u7ba1\u7dda\u7684\u65b9\u5f0f\u5f9e\u6a94\u6848\u8b80\u53d6\u8cc7\u6599\u6642\uff0c\u6d41\u7a0b\u901a\u5e38\u5305\u542b\u4ee5\u4e0b\u5e7e\u500b\u6b65\u9a5f\uff1a\n\n\u63d0\u4f9b\u6a94\u6848\u540d\u7a31\u3002\n\u6253\u6563\u6a94\u6848\u540d\u7a31\u3002\uff08\u53ef\u7701\u7565\uff09\n\u8a2d\u5b9a epoch \u9650\u5236\u3002\uff08\u53ef\u7701\u7565\uff09\n\u5efa\u7acb\u6a94\u6848\u540d\u7a31\u4f47\u5217\uff08filename queue\uff09\u3002\n\u6839\u64da\u6a94\u6848\u683c\u5f0f\uff0c\u5efa\u7acb\u6a94\u6848\u8b80\u53d6\u5668\u3002\n\u6839\u64da\u8cc7\u6599\u683c\u5f0f\uff0c\u5efa\u7acb\u8cc7\u6599\u89e3\u6790\u5668\u3002\n\u8cc7\u6599\u524d\u8655\u7406\u3002\uff08\u53ef\u7701\u7565\uff09\n\u5efa\u7acb\u8cc7\u6599\u4f47\u5217\u3002\n\n\n\u5148\u671f\u51c6\u5907\u548c\u8f6c\u6362TFrecords\u683c\u5f0f\n\n\n#! /usr/bin/python3\n# -*- coding: utf-8 -*-\n# @Time    : 2017/12/12 20:08\n# @Author  : Shiyu Li\n# @Software: PyCharm\n#\nimport tensorflow as tf\nimport os\nfrom PIL import Image\nimport random\nimport shutil\n\ndef makefile(root, data, typename, NUM):\n    &#39;&#39;&#39;\n    :param root: target file of &#39;/train&#39; and &#39;/test&#39;\n    :param data: the data file you want to corp\n    :param typename: file name in &#39;/train&#39; and &#39;/test&#39;\n    :param NUM: the num of data in &#39;/train&#39;\n    :return: None\n    &#39;&#39;&#39;\n\n    try:\n        os.makedirs(root + &#39;/train&#39;)\n        os.makedirs(root + &#39;/test&#39;)\n\n    except BaseException:\n        print(&#39;=================================================&#39;)\n        print(&quot;There exist &#39;/train&#39; &#39;/test&#39;, delete first please.&quot;)\n\n    try:\n        os.makedirs(root + &#39;/train/&#39; + typename)\n        os.makedirs(root + &#39;/test/&#39; + typename)\n    except BaseException:\n        print(&quot;There exist &#39;/%s&#39;, delete first please.&quot; % typename)\n\n\n    name_list = os.listdir(data)\n    random.shuffle(name_list)\n\n    count = 0\n    for name in name_list:\n        if count &lt; NUM:\n            print(&#39;train data :%s&#39; % name)\n            shutil.copyfile(os.path.join(data, name), os.path.join(root + &#39;/train/&#39; + typename + &#39;/&#39;, typename + name))\n            count += 1\n        else:\n            print(&#39;test data :%s&#39; % name)\n            shutil.copyfile(os.path.join(data, name), os.path.join(root + &#39;/test/&#39;+ typename + &#39;/&#39;, typename + name))\n\ndef encode(filename):\n    &#39;&#39;&#39;\n    file structure\n    -img-to-TR.py\n    -train\n      -cover\n        -1.pgm\n        -3.pgm\n      -stego\n        -2.pgm\n        -6.pgm\n    -test\n      -cover\n        -5.pgm\n        -8.pgm\n      -stego\n        -213.pgm\n        -223.pgm\n\n    :param filename:\n    :return:\n    &#39;&#39;&#39;\n    cwd = os.getcwd()\n    root = cwd + &#39;\\\\&#39; + filename + &#39;\\\\&#39;\n    name = filename + &#39;BossBase-1.01-hugo-alpha=0.4.tfrecords&#39;\n    print(name)\n    writer = tf.python_io.TFRecordWriter(name)\n    classes = {&#39;cover&#39;, &#39;stego&#39;}\n\n    #for image_filename, label in zip(image_filename_list, label_list):\n\n    for index, name in enumerate(classes):\n        class_path = root + name + &#39;\\\\&#39;\n        for img_name in os.listdir(class_path):\n            img_path = class_path + img_name\n            img = Image.open(img_path)\n            print(img_name)\n\n            #data = np.array(img.getdata())\n            # \u53ef\u89c6\u5316 Image.fromarray(data.reshape([512,512])).show()\n\n            data = img.tobytes()\n            # \u53ef\u89c6\u5316 Image.frombytes(&#39;L&#39;, [512,512], data).show()\n            example = tf.train.Example(features=tf.train.Features(feature={\n                &quot;label&quot;: tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),\n                &#39;img_raw&#39;: tf.train.Feature(bytes_list=tf.train.BytesList(value=[data]))\n            }))\n            writer.write(example.SerializeToString())\n    writer.close()\n\nif __name__ == &#39;__main__&#39;:\n\n    # cover_data = &#39;BossBase-1.01-cover&#39;\n    # stego_data = &#39;BossBase-1.01-hugo-alpha=0.4&#39;\n    # root = os.getcwd()\n    # makefile(root, cover_data, typename=&#39;cover&#39;, NUM=8000)\n    # makefile(root, stego_data, typename=&#39;stego&#39;, NUM=8000)\n\n    encode(&#39;train&#39;)\n    encode(&#39;test&#39;)\n\n\u8bfb\u53d6\u548cTFrecords\u4e2d\u56fe\u7247\u7684\u89e3\u7801\u53ef\u89c6\u5316\n#! /usr/bin/python3\n# -*- coding: utf-8 -*-\n# @Time    : 2017/12/12 20:08\n# @Author  : Shiyu Li\n# @Software: PyCharm\n\nimport tensorflow as tf\nimport numpy as np\nfrom PIL import Image\n\n\ndef read_and_decode(filename):\n    &quot;&quot;&quot; Return tensor to read from TFRecord &quot;&quot;&quot;\n    filename_queue = tf.train.string_input_producer([filename])\n    reader = tf.TFRecordReader()\n    _, serialized_example = reader.read(filename_queue)\n    features = tf.parse_single_example(serialized_example,\n                                       features={\n                                           &#39;label&#39;: tf.FixedLenFeature([], tf.int64),\n                                           &#39;img_raw&#39; : tf.FixedLenFeature([], tf.string),\n                                       })\n    img = tf.decode_raw(features[&#39;img_raw&#39;], tf.uint8)\n    img = tf.reshape(img, [512, 512, 1])\n    # img = tf.cast(img, tf.float32) # if you want to use tfrecords as input.\n    label = tf.cast(features[&#39;label&#39;], tf.int32)\n    return img, label\n\n# visualize data\nimg, label = read_and_decode(&quot;testBossBase-1.01-hugo-alpha=0.4.tfrecords&quot;)\nimg_batch, label_batch = tf.train.shuffle_batch([img, label],\n                                                batch_size=4,\n                                                capacity=50000,\n                                                min_after_dequeue=10000,\n                                                num_threads=1)\nprint(&quot;img_batch   : %s&quot; % img_batch._shape)\nprint(&quot;label_batch : %s&quot; % label_batch._shape)\n\ninit = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    sess.run(init)\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n    val, l = sess.run([img_batch, label_batch])\n    print(type(val))\n    show_img = Image.fromarray(np.squeeze(val[0], axis=(2,)))\n    show_img.show()\n\n    coord.request_stop()\n    coord.join(threads)\n    sess.close()\n\n\u53c2\u8003\u6587\u7ae0\nhttp://ycszen.github.io/2016/08/17/TensorFlow%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE/\nhttp://blog.csdn.net/u012759136/article/details/52232266\nhttp://blog.csdn.net/tengxing007/article/details/56847828\nhttp://blog.csdn.net/tengxing007/article/details/54428262\nhttp://www.shellsec.com/news/33788.html\nhttps://github.com/ycszen/TensorFlowLaboratory/tree/master/mcnn\nhttps://blog.gtwang.org/programming/tensorflow-input-pipeline-notes/\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "M", "slug": "M", "permalink": "/tag/M/"}, {"name": "L", "slug": "L", "permalink": "/tag/L/"}]}, {"title": "ML Lecture 19 Transfer Learning", "date": "2017-11-28T15:40:00-00.00", "path": "/archives/ML Lecture 19 Transfer Learning/", "text": "\u4ec0\u4e48\u662f\u8fc1\u79fb\u5b66\u4e60? Data not directly related to the task considered\n\n\n\nFine-tuning\n\u6700\u5e38\u89c1\u7684\u5c31\u662fFine-tuning\n\u7528\u5c11\u7684target data\u53bbfine-tune\u539f\u6765\u7684model(target data\u6781\u5c11\u7684\u65f6\u5019, \u5c31\u662fOne-shot learning\u4e86)\n\u4e00\u4e9btrick:\n\nConservative Training\ntrain\u65b0model\u7684\u65f6\u5019\u52a0\u4e00\u4e9b\u9650\u5236, \u52a0\u4e00\u4e9b\"normalization\". \u6bd4\u5982\u52a0\u4e2aL2\u8303\u6570\u548c\u539f\u6a21\u578b\u4e0d\u8981\u5dee\u592a\u591a\n\nLayer Transfer\n\u9650\u5236\u4e00\u4e9blayer\u5728\u8bad\u7ec3\u4e2d\u4e0d\u6539\u53d8\u53c2\u6570. \u8fd9\u79cd\u65b9\u6cd5\u662f\u975e\u5e38\u5e38\u89c1\u7684\u4f5c\u6cd5\n\u5bf9\u4e8e\u56fe\u7247: \u4e00\u822c\u53d6\u524d\u9762\u51e0\u5c42\u7684layer -&gt; \u4fdd\u7559filter, \u6700\u57fa\u7840\u7684\u7279\u5f81\u62bd\u53d6\n\u5bf9\u4e8e\u8bed\u97f3: \u4e00\u822c\u53d6\u6700\u540e\u51e0\u5c42\u7684layer -&gt; \u4fdd\u7559\u53d1\u58f0\u65b9\u5f0f \u58f0\u8272\u7b49\u4fe1\u606f\n\u56fe\u7247\u63cf\u8ff0\n\u4e24\u4e2a\u7ea2\u6846\u8bf4\u660e\u4e86\u4ec0\u4e48? \u8bf4\u660elayer transfer\u7684\u786e\u662f\u53ef\u884c\u7684, \u56fa\u5b9a\u4f4f\u524d\u4e09\u4e2alayer\u518d\u5728\u540e\u9762layer\u4f5cfine-tune, \u53ef\u4ee5\u8fbe\u5230\u4e0e\u539fdata\u4e0a\u7c7b\u4f3c\u7684\u6548\u679c. (\u4f46\u662f\u8fd9\u91cc, target data\u53ef\u662f\u548csource data\u4e00\u4e2a\u91cf\u7ea7\u7684)\n\n\nMultitask Learning\n\u548cfinetune\u4e0d\u540c\u7684\u662f, \u9700\u8981\u5728target domain \u548csource domain\u90fd\u6709\u597d\u7684\u8868\u73b0, \u800c\u4e0d\u662f\u50cffinetune\u90a3\u6837\u4e0d\u7ba1source\u53ea\u5173\u5fc3target domain\n\u76f4\u89c2\u6765\u8bb2\u5c31\u662f\u8fd9\u6837\u7684\u4efb\u52a1\n\u56fe\u7247\u63cf\u8ff0\n\u66f4\u52a0\u6df1\u5165\u7684\u60f3\u6cd5\u662f, \n\u56fe\u7247\u63cf\u8ff0\n\u53ef\u4ee5\u5728\u4e2d\u95f4\u516c\u7528\u4e00\u90e8\u5206\u7684layer\nDomain-adversarial training\ntarget data\u6ca1\u6709label, \u8fd9\u5c31\u5f88excited\u4e86. \u800c\u4e14source data\u548ctarget data\u662f\u975e\u5e38mismatch\u7684\n\n\u95ee\u9898\u5728\u4e8e: \u4e24\u62e8data, \u5728\u7ecf\u8fc7CNN\u524d\u51e0\u5c42\u62bd\u53d6\u7279\u5f81\u7136\u540et-sne\u53ef\u89c6\u5316\u4e4b\u540e, \u53ef\u80fd\u6839\u672c\u5c31\u4e0d\u4f1a\u76f8\u90bb, \u4e24\u7ec4data\u5206\u7684\u5f00\u5f00\u7684, \u90a3\u524d\u51e0\u5c42filter\u5c31\u6ca1\u6cd5\u8d77\u4f5c\u7528\u4e86.\n\u65b9\u6cd5: \u53bb\u5148\u628adomain\u7684\u7279\u6027\u6d88\u9664\u6389, \u4e0d\u540c\u7684domain\u5e94\u8be5\u6df7\u5728\u4e00\u8d77 --&gt; \u90a3\u5c31\u63a5\u4e2aDomain classifier\u53bb\u5224\u65ad. \u6709\u4e00\u79cdGAN\u7684\u611f\u89c9\nZero-shot Learning\n\u56fe\u7247\u63cf\u8ff0\n\u4e3a\u4ec0\u4e48\u5927\u5bb6\u90fd\u559c\u6b22\u7528\u7f8a\u9a7c\n\u65b9\u6cd5: \u628a\u6bcf\u4e00\u4e2aclass\u90fd\u7528\u4e00\u7cfb\u5217\u7684attribute\u8868\u793a\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "M", "slug": "M", "permalink": "/tag/M/"}, {"name": "L", "slug": "L", "permalink": "/tag/L/"}]}, {"title": "tensorlayer\u7684\u5751.md", "date": "2017-11-28T09:29:00-00.00", "path": "/archives/tensorlayer\u7684\u5751.md/", "text": "tl.cost.cross_entropy\n\u9ed8\u8ba4\u7684tl.cost.cross_entropy\u662fsparse_softmax, \u5373\u662f\u5bf9\u4e8elabel\u662f[2,4,1]\u8fd9\u79cd, \u800c\u975e[[0,1,0,0],[0,0,0,1],[1,0,0,0]]\u8fd9\u79cd\u5f62\u5f0f\ncost = tl.cost.cross_entropy(y, y_, name=&#39;xentropy&#39;)\n\n    # tl.cost.cross_entropy is tf.nn.sparse_softmax_cross_entropy_with_logits\n    #cost = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(y, y_,name=&#39;xentropy&#39;))\n\n\n\nall_layers in TF-Slim\nThe due to TF-Slim stores the layers as dictionary, the all_layers in this network  is not in order !  Fortunately, the all_params are in order.\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "M", "slug": "M", "permalink": "/tag/M/"}, {"name": "L", "slug": "L", "permalink": "/tag/L/"}]}, {"title": "pandas \u64cd\u4f5cCSV", "date": "2017-11-25T14:45:31-00.00", "path": "/archives/pandas \u64cd\u4f5cCSV/", "text": "\nimport pandas as pd  \ntrain_data = pd.read_csv(\"test.csv\")\nread_csv, \u8fd4\u56de\u6570\u636e\u7c7b\u578b DataFrame\n\u4ee5\u67d0\u5217\u4e3a\u4e3b\u952emerge\u4e24\u4e2aCSV\n\npd.merge(data_employee_ri,data_employee_ri,on='name')\n\n\n\u62bd\u53d6\u6570\u636e\ndata.loc[1] //\u8fd4\u56de\u5355\u5217\u6570\u636e\ndata.loc[1:3] //\u8fd4\u56de\u5207\u7247\u5217\u6570\u636e\uff0c\u76f8\u5f53\u4e8e data.loc[[1,2,3]]\ndata.loc[:,[&#39;ID\u2019]]\ndata.loc[:4,[&#39;ID&#39;,&#39;YELP\u2019]] //\u8fd4\u56de\u6307\u5b9a\u884c\u7684\u6307\u5b9a\u7c7b\uff0c\u4ece0\u884c\u52304\u884c\uff0c\u5305\u62ec\u7b2c4\u884c\n\ndata.iloc[:,:] //\u8fd4\u56de\u6240\u6709\u6570\u636e\ndata.iloc[:2,1:3] //\u8fd4\u56de\u7279\u5b9a\u884c\u7279\u5b9a\u5217\u7684\u6570\u636e\n\ndata[\u2018ID\u2019] //\u8fd4\u56de\u5217\ndata[2:5] //\u8fd4\u56de\u884c\ndata[3:6][:2]\ndata[\u2018ID\u2019][3:6]\ndata[3:6][\u2018ID\u2019]\n\n1.\u9009\u62e9\u7279\u5b9a\u5217\u548c\u884c\u7684\u6570\u636e\na['x'] \u90a3\u4e48\u5c06\u4f1a\u8fd4\u56decolumns\u4e3ax\u7684\u5217\uff0c\u6ce8\u610f\u8fd9\u79cd\u65b9\u5f0f\u4e00\u6b21\u53ea\u80fd\u8fd4\u56de\u4e00\u4e2a\u5217\u3002a.x\u4e0ea['x']\u610f\u601d\u4e00\u6837\u3002\n\u53d6\u884c\u6570\u636e\uff0c\u901a\u8fc7\u5207\u7247[]\u6765\u9009\u62e9, \u5982\uff1aa[0:3] \u5219\u4f1a\u8fd4\u56de\u524d\u4e09\u884c\u7684\u6570\u636e\u3002\n\u5c31\u662f\u53d6\u5217, \u76f4\u63a5a['A'], \u53d6\u884c\u8981\u6309\u5207\u7247\u65b9\u5f0f\u53d6\n2.loc\u662f\u901a\u8fc7\u6807\u7b7e\u6765\u9009\u62e9\u6570\u636e\na.loc['one']\u5219\u4f1a\u9ed8\u8ba4\u8868\u793a\u9009\u53d6\u884c\u4e3a'one'\u7684\u884c\uff1b\na.loc[:,['a','b'] ] \u8868\u793a\u9009\u53d6\u6240\u6709\u7684\u884c\u4ee5\u53cacolumns\u4e3aa,b\u7684\u5217\uff1b\na.loc[['one','two'],['a','b']] \u8868\u793a\u9009\u53d6'one'\u548c'two'\u8fd9\u4e24\u884c\u4ee5\u53cacolumns\u4e3aa,b\u7684\u5217\uff1b\na.loc['one','a']\u4e0ea.loc[['one'],['a']]\u4f5c\u7528\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u8fc7\u524d\u8005\u53ea\u663e\u793a\u5bf9\u5e94\u7684\u503c\uff0c\u800c\u540e\u8005\u4f1a\u663e\u793a\u5bf9\u5e94\u7684\u884c\u548c\u5217\u6807\u7b7e\u3002\n3.iloc\u5219\u662f\u76f4\u63a5\u901a\u8fc7\u4f4d\u7f6e\u6765\u9009\u62e9\u6570\u636e\n\u8fd9\u4e0e\u901a\u8fc7\u6807\u7b7e\u9009\u62e9\u7c7b\u4f3c\n a.iloc[1:2,1:2] \u5219\u4f1a\u663e\u793a\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u7684\u6570\u636e;(\u5207\u7247\u540e\u9762\u7684\u503c\u53d6\u4e0d\u5230)\na.iloc[1:2] \u5373\u540e\u9762\u8868\u793a\u5217\u7684\u503c\u6ca1\u6709\u65f6\uff0c\u9ed8\u8ba4\u9009\u53d6\u884c\u4f4d\u7f6e\u4e3a1\u7684\u6570\u636e;\na.iloc[[0,2],[1,2]] \u5373\u53ef\u4ee5\u81ea\u7531\u9009\u53d6\u884c\u4f4d\u7f6e\uff0c\u548c\u5217\u4f4d\u7f6e\u5bf9\u5e94\u7684\u6570\u636e\u3002\ndata.iloc[-1]   #\u9009\u53d6DataFrame\u6700\u540e\u4e00\u884c\uff0c\u8fd4\u56de\u7684\u662fSeries\n data.iloc[-1:]   #\u9009\u53d6DataFrame\u6700\u540e\u4e00\u884c\uff0c\u8fd4\u56de\u7684\u662fDataFrame\n4.\u4f7f\u7528\u6761\u4ef6\u6765\u9009\u62e9\n\u4f7f\u7528\u5355\u72ec\u7684\u5217\u6765\u9009\u62e9\u6570\u636e\n a[a.c&gt;0] \u8868\u793a\u9009\u62e9c\u5217\u4e2d\u5927\u4e8e0\u7684\u6570\u636e\n\u4f7f\u7528where\u6765\u9009\u62e9\u6570\u636e\n a[a&gt;0] \u8868\u76f4\u63a5\u9009\u62e9a\u4e2d\u6240\u6709\u5927\u4e8e0\u7684\u6570\u636e\n\u4f7f\u7528isin()\u9009\u51fa\u7279\u5b9a\u5217\u4e2d\u5305\u542b\u7279\u5b9a\u503c\u7684\u884c\n a1=a.copy()\n a1[a1['one'].isin(['2','3'])] \u8868\u663e\u793a\u6ee1\u8db3\u6761\u4ef6\uff1a\u5217one\u4e2d\u7684\u503c\u5305\u542b'2','3'\u7684\u6240\u6709\u884c\u3002\n\u64cd\u4f5c\n\u7edf\u8ba1\u67d0\u4e00\u5217x\u4e2d\u5404\u4e2a\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff1aa['x'].value_counts()\n\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5143\n\u4f7f\u7528np.bincount()\u548cnp.argmax()\u51fd\u6570\u6765\u5b9e\u73b0\u3002\nnp.bincount()\u53ef\u4ee5\u628a\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6bcf\u4e2a\u6570\u5b57\uff0c\u5f53\u505aindex\uff0c\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u5f53\u505avalue\u6765\u8868\u793a\u3002\nnp.argmax()\u53ef\u4ee5\u8fd4\u56de\u6570\u7ec4\u4e2d\u6700\u5927\u503c\u7684index\u3002\n\u6240\u4ee5\u7ecf\u8fc7\u53d8\u6362\uff0c\u53ef\u4ee5\u5f97\u5230\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5927\u503c\u3002\n\nnp.argmax(np.bincount(line))\n\u53bb\u91cd\nDataFrame\u7684duplicated\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u578bSeries,\u8868\u793a\u5404\u884c\u662f\u5426\u91cd\u590d\u884c\u3002\n\u800c drop_duplicates\u65b9\u6cd5\uff0c\u5b83\u7528\u4e8e\u8fd4\u56de\u4e00\u4e2a\u79fb\u9664\u4e86\u91cd\u590d\u884c\u7684DataFrame\n\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u4f1a\u5224\u65ad\u5168\u90e8\u5217\uff0c\u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u90e8\u5206\u5217\u8fdb\u884c\u91cd\u590d\u9879\u5224\u6bb5\u3002\n\u4f8b\u5982\uff0c\u5e0c\u671b\u5bf9\u540d\u5b57\u4e3ak2\u7684\u5217\u8fdb\u884c\u53bb\u91cd\uff0c\ndata.drop_duplicates(['k2'])\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "M", "slug": "M", "permalink": "/tag/M/"}, {"name": "L", "slug": "L", "permalink": "/tag/L/"}]}, {"title": "Fizz Buzz", "date": "2017-11-22T15:43:09-00.00", "path": "/archives/Fizz Buzz/", "text": "Fizz Buzz\u7b97\u662f\u6211\u5b66\u6570\u5b66\u8fd8\u6ca1\u8f6c\u884c\u65f6, \u5b66\u7f16\u7a0b\u770b\u5230\u7684\u4e00\u4e2a\u95ee\u9898. \u7136\u540e\u5370\u8c61\u6df1\u523b\u7684\u662f\u8fd9\u4e2a\u7b54\u6848:\nfor x in range(101): print(&#39;fuzz&#39;[x%3*4::] + &#39;buzz&#39;[x%5*4::] or x)\n\n\u4eca\u5929\u5728MLLecture 9-3\u770b\u5230\u4e2afizzbuzz\u7684\u7b11\u8bdd,\nhttp://joelgrus.com/2016/05/23/fizz-buzz-in-tensorflow/,\n\u51c6\u5907\u62fftensorlayer\u4e5f\u6765\u505a\u4e00\u4e0b\ud83d\ude00\n\n\n#! /usr/bin/python3\n# -*- coding: utf-8 -*-\n# @Time    : 2017/11/23 14:42\n# @Author  : Shiyu Li\n# @Software: PyCharm Community Edition\n\nimport tensorflow as tf\nimport tensorlayer as tl\nimport numpy as np\nimport time\n\nNUM_DIGITS = 10\n\ndef bi_encode(i, num_digits):\n    return np.array([i &gt;&gt; d &amp; 1 for d in range(num_digits)][::-1])\n\ndef Fizz_Buzz_encode(i):\n    if   i % 15 == 0: return 3\n    elif i % 5  == 0: return 2\n    elif i % 3  == 0: return 1\n    else:             return 0\n\n# def Fizz_Buzz_encode(i):\n#     if   i % 15 == 0: return np.array([0, 0, 0, 1])\n#     elif i % 5  == 0: return np.array([0, 0, 1, 0])\n#     elif i % 3  == 0: return np.array([0, 1, 0, 0])\n#     else:             return np.array([1, 0, 0, 0])\n#\n\n\ndef MLP_model():\n    X_train = np.array([bi_encode(i, NUM_DIGITS) for i in range(101, 2 ** NUM_DIGITS)])\n    y_train = np.array([Fizz_Buzz_encode(i) for i in range(101, 2 ** NUM_DIGITS)])\n\n    X_test = np.array([bi_encode(i, NUM_DIGITS) for i in range(101)])\n    y_test = np.array([Fizz_Buzz_encode(i) for i in range(101)])\n\n    print(&#39;X_train.shape&#39;, X_train.shape)\n    print(&#39;y_train.shape&#39;, y_train.shape)\n    print(&#39;X_test.shape&#39;, X_test.shape)\n    print(&#39;y_test.shape&#39;, y_test.shape)\n    print(&#39;X %s   y %s&#39; % (X_test.dtype, y_test.dtype))\n\n    sess = tf.InteractiveSession()\n\n    # placeholder\n    x = tf.placeholder(tf.float32, shape=[None, NUM_DIGITS], name=&#39;x&#39;)\n    y_ = tf.placeholder(tf.int64, shape=[None, ], name=&#39;y_&#39;)\n\n    net = tl.layers.InputLayer(x, name=&#39;input_layer&#39;)\n    net = tl.layers.DenseLayer(net, n_units=100, act=tf.nn.relu, name=&#39;relu1&#39;)\n    net = tl.layers.DenseLayer(net, n_units=100, act=tf.nn.relu, name=&#39;relu2&#39;)\n    net = tl.layers.DenseLayer(net, n_units=4, act=tf.identity, name=&#39;output_layer&#39;)\n    y = net.outputs\n\n    cost = tl.cost.cross_entropy(y, y_, name=&#39;xentropy&#39;)\n\n    # tl.cost.cross_entropy is tf.nn.sparse_softmax_cross_entropy_with_logits\n    #cost = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(y, y_,name=&#39;xentropy&#39;))\n\n    correct_prediction = tf.equal(tf.argmax(y, 1), y_)\n    acc = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    y_op = tf.argmax(tf.nn.softmax(y), 1)\n\n    params = net.all_params\n\n    # train\n    n_epoch = 200\n    batch_size = 128\n    learning_rate = 0.001\n    print_freq = 5\n    train_op = tf.train.AdamOptimizer(learning_rate, beta1=0.9, beta2=0.999,\n                                epsilon=1e-08, use_locking=False).minimize(cost)\n\n    tl.layers.initialize_global_variables(sess)\n\n    net.print_params()\n    net.print_layers()\n\n    print(&#39;   learning_rate: %f&#39; % learning_rate)\n    print(&#39;   batch_size: %d&#39; % batch_size)\n\n    for epoch in range(n_epoch):\n        start_time = time.time()\n        for X_train_a, y_train_a in tl.iterate.minibatches(X_train, y_train, batch_size, shuffle=True):\n            feed_dict = {x: X_train_a, y_: y_train_a}\n            sess.run(train_op, feed_dict=feed_dict)\n\n        if epoch + 1 == 1 or (epoch+1)%print_freq==0:\n            print(&quot;Epoch %d of %d took %fs&quot; % (epoch + 1, n_epoch, time.time() - start_time))\n\n            train_loss, train_acc, n_batch = 0, 0, 0\n            for X_train_a, y_train_a in tl.iterate.minibatches(\n                                    X_train, y_train, batch_size, shuffle=True):\n                err, ac = sess.run([cost, acc], feed_dict={x: X_train_a, y_: y_train_a})\n                train_loss += err\n                train_acc += ac\n                n_batch += 1\n            print(&quot;   train loss: %f&quot; % (train_loss/ n_batch))\n            print(&quot;   train acc: %f&quot; % (train_acc/ n_batch))\n\n\n\n            test_loss, test_acc, n_batch = 0, 0, 1\n            err, ac = sess.run([cost, acc], feed_dict={x: X_test, y_: y_test})\n            test_loss += err\n            test_acc += ac\n            #n_batch += 1\n            print(&quot;   test loss: %f&quot; % (test_loss / n_batch))\n            print(&quot;   test acc: %f&quot; % (test_acc / n_batch))\n\n    sess.close()\n\nif __name__ == &#39;__main__&#39;:\n    sess = tf.InteractiveSession()\n    MLP_model()\n\n\u5bf9\u4e8e\u8fd9\u6837\u7684NN\u7ed3\u6784\nnet = tl.layers.InputLayer(x, name=&#39;input_layer&#39;)\n    net = tl.layers.DenseLayer(net, n_units=100, act=tf.nn.relu, name=&#39;relu1&#39;)\n    net = tl.layers.DenseLayer(net, n_units=100, act=tf.nn.relu, name=&#39;relu2&#39;)\n    net = tl.layers.DenseLayer(net, n_units=4, act=tf.identity, name=&#39;output_layer&#39;)\n    y = net.outputs\n\n\u7ed3\u679c\n\nEpoch 200 of 200 took 0.007519s\n   train loss: 0.028502\n   train acc: 1.000000\n   test loss: 0.218256\n   test acc: 0.910891\n\u8981\u662f\u5355\u5c421000\u795e\u7ecf\u5143\u5c31\u80fd\u5f88\u9ad8\u4e86\nnet = tl.layers.InputLayer(x, name=&#39;input_layer&#39;)\n    #net = tl.layers.DenseLayer(net, n_units=100, act=tf.nn.relu, name=&#39;relu1&#39;)\n    net = tl.layers.DenseLayer(net, n_units=1000, act=tf.nn.relu, name=&#39;relu2&#39;)\n    net = tl.layers.DenseLayer(net, n_units=4, act=tf.identity, name=&#39;output_layer&#39;)\n    y = net.outputs\n\n\nEpoch 200 of 200 took 0.012757s\n   train loss: 0.123429\n   train acc: 0.998884\n   test loss: 0.149421\n   test acc: 1.000000\n\u770b\u6765\u88ab\u5237\u4e86\u662f\u6ca1\u6bdb\u75c5\u7684\ud83d\ude00\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u624b\u6495Batch normalization", "date": "2017-11-22T15:00:09-00.00", "path": "/archives/\u624b\u6495Batch normalization/", "text": "\u524d\u5411\u4f20\u64ad\n\u56fe\u7247\u63cf\u8ff0\nBP\n\u56fe\u7247\u63cf\u8ff0\nor, Understanding the backward pass through Batch Normalization Layer\ntrain\n\u771f\u6b63train\u7684\u65f6\u5019, normalization\u8fc7\u7a0b\u5e76\u4e0d\u662f\u76f4\u63a5\u5fae\u5206\u7701\u7565\u6389, \u8981\u628a\u6bcf\u4e2abatch\u91cc\u9762\u7684\u4e1c\u897f\u5168\u90e8\u8003\u8651.\nBP\u7684\u65f6\u5019, \u8fd8\u662f\u4eceu\u548c\u03c3\u6765\u4f20\u9012\u5230\u524d\u9762\ntest\n\u03bc\u548c\u03c3\u90fd\u9700\u8981\u7528\u4e00\u6574\u4e2abatch\u5f97\u5230, \u90a3\u600e\u4e48\u505atest?\n\n\u4f7f\u7528\u6574\u4e2atraining set\u7684\u03bc\u548c\u03c3\ntrain\u8fc7\u7a0b\u4e2d\u7684\u6bcf\u4e2aepcho\u7684\u03bc\u5168\u90e8\"\u5e73\u5747\"\u8d77\u6765\u5f53\u4f5c\u03bc.(\u5feb\u7ed3\u675f\u7684weight\u6bd4\u8f83\u5927)\n\nBenefit\n\nlearning rate\u53ef\u4ee5\u8bbe\u5927\u70b9, \u66f4\u5feb\nless exploding/vanishing gradients(especially effective for sigmoid,tanh)\nless affected by initialization\nreduces the demand for regularization(\u5bf9\u6297 overfitting)\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "DLBook-NOTES-9\u5377\u79ef\u7f51\u7edc", "date": "2017-10-11T14:03:36-00.00", "path": "/archives/DLBook-NOTES-9\u5377\u79ef\u7f51\u7edc/", "text": "\u5904\u7406\u5bf9\u8c61: \u56fe\u50cf\u6570\u636e, \u65f6\u95f4\u5e8f\u5217\u6570\u636e\n\u5377\u79ef\u8fd0\u7b97\n\u56fe\u7247\u63cf\u8ff0\n\u8fd9\u4e2a\u60c5\u5883\u4e2d, \u5377\u79ef\u5c31\u8d77\u5230\u4e86\u4e00\u4e2a\u964d\u566a\u7684\u7684\u4f5c\u7528, \u4e5f\u662f\u4e3a\u4ec0\u4e48\u8bf4, \u5377\u79ef\u4f1a\u8ba9\u51fd\u6570\u53d8\u5f97\u5e73\u6ed1.\n\u5c06\u5c0f\u7684\u5c40\u90e8\u533a\u57df\u4e0a\u7684\u76f8\u540c\u7ebf\u6027\u53d8\u6362\u5e94\u7528\u5230\u6574\u4e2a\u8f93\u5165\u4e0a\uff0c\u5377\u79ef\u662f\u63cf\u8ff0\u8fd9\u79cd\u53d8\u6362\u7684\u6781\u5176\u6709\u6548\u7684\u65b9\n\u6cd5\u3002\n\u5b9e\u9645\u4e0a, ML\u91cc$\\int x(a)\\omega(t+a)$\u4e5f\u662f\u53eb\u505a\u5377\u79ef, \u88ab\u79f0\u4f5c\u4e92\u76f8\u5173\u51fd\u6570. \u539f\u672c\u5b9a\u4e49\u7684\u5377\u79ef\u5bf9\u6838\u51fd\u6570\u8fdb\u884c\u4e86flip\u4f7f\u5f97\u6709\u4e86\u53ef\u4ea4\u6362\u6027.\n\u52a8\u673a\n\u7a00\u758f\u4ea4\u4e92\uff08sparse interactions\uff09\u3001\u53c2\u6570\u5171\u4eab\uff08parameter sharing\uff09\u3001\u7b49\u53d8\u8868\u793a\uff08equivariant representations. \u5f88\u660e\u786e\u7684\u4e09\u4e2a\u76ee\u6807, \u5b9e\u73b0\u7684\u65b9\u6cd5\u4e5f\u5f88\u81ea\u7136. \u5bf9\u5e94\u4e8e\u56fe\u50cf\u7684\u6027\u8d28.\nsparse weight: \n\u56fe\u7247\u63cf\u8ff0\nparameter sharing:  \u8fd9\u867d\u7136\u6ca1\u6709\u6539\u53d8\u524d\u5411\u4f20\u64ad\u7684\u8fd0\u884c\u65f6\u95f4\uff08\u4ecd\u7136\u662f O(k \u00d7 n)\uff09\uff0c\u4f46\u5b83\u663e\u8457\u5730\u628a\u6a21\u578b\u7684\u5b58\u50a8\u9700\u6c42\n\u964d\u4f4e\u81f3 k \u4e2a\u53c2\u6570\uff0c\u5e76\u4e14 k \u901a\u5e38\u8981\u6bd4 m \u5c0f\u5f88\u591a\u4e2a\u6570\u91cf\u7ea7\u3002\u56e0\u4e3a m \u548c n \u901a\u5e38\u6709\u7740\u5927\u81f4\u76f8\u540c\u7684\u5927\u5c0f\uff0ck \u5728\u5b9e\u9645\u4e2d\u76f8\u5bf9\u4e8e m \u00d7 n \u662f\u5f88\u5c0f\u7684\u3002\n\u6c60\u5316\n\u4e00\u6b65: convolution-&gt; activation -&gt; pooling\n\u4f7f\u7528\u6c60\u5316\u53ef\u4ee5\u770b\u4f5c\u662f\u589e\u52a0\u4e86\u4e00\u4e2a\u65e0\u9650\u5f3a\u7684\u5148\u9a8c\uff1a\u8fd9\u4e00\u5c42\u5b66\u5f97\u7684\u51fd\u6570\u5fc5\u987b\u5177\u6709\u5bf9\u5c11\u91cf\u5e73\u79fb\u7684\u4e0d\u53d8\u6027\u3002\u5f53\u8fd9\u4e2a\u5047\u8bbe\u6210\u7acb\u65f6\uff0c\u6c60\u5316\u53ef\u4ee5\u6781\u5927\u5730\u63d0\u9ad8\u7f51\u7edc\u7684\u7edf\u8ba1\u6548\u7387\u3002\n\u540c\u65f6, \u6c60\u5316\u5c42\u53ef\u4ee5\u7528\u6765\u8c03\u6574\u4e0d\u540c\u5927\u5c0f\u7684\u8f93\u5165.\n\u5377\u79ef\u4e0e\u6c60\u5316\u4f5c\u4e3a\u4e00\u79cd\u65e0\u9650\u5f3a\u7684\u5148\u9a8c\n\u4e00\u4e2a\u65e0\u9650\u5f3a\u7684\u5148\u9a8c\u9700\u8981\u5bf9\u4e00\u4e9b\u53c2\u6570\u7684\u6982\u7387\u7f6e\u96f6\u5e76\u4e14\u5b8c\u5168\u7981\u6b62\u5bf9\u8fd9\u4e9b\u53c2\u6570\u8d4b\u503c\uff0c\u65e0\u8bba\u6570\u636e\u5bf9\u4e8e\u8fd9\u4e9b\u53c2\u6570\u7684\u503c\u7ed9\u51fa\u4e86\u591a\u5927\u7684\u652f\u6301\u3002\n\u4e0e\u4efb\u4f55\u5176\u4ed6\u5148\u9a8c\u7c7b\u4f3c\uff0c\u5377\u79ef\u548c\u6c60\u5316\u53ea\u6709\u5f53\u5148\u9a8c\u7684\u5047\u8bbe\u5408\u7406\u4e14\u6b63\u786e\u65f6\u624d\u6709\u7528\u3002\u5982\u679c\u4e00\u9879\u4efb\u52a1\u4f9d\u8d56\u4e8e\u4fdd\u5b58\u7cbe\u786e\u7684\u7a7a\u95f4\u4fe1\u606f\uff0c\u90a3\u4e48\u5728\u6240\u6709\u7684\u7279\u5f81\u4e0a\u4f7f\u7528\u6c60\u5316\u5c06\u4f1a\u589e\u5927\u8bad\u7ec3\u8bef\u5dee\n\u57fa\u672c\u5377\u79ef\u51fd\u6570\u7684\u53d8\u4f53\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "N", "slug": "N", "permalink": "/tag/N/"}, {"name": "O", "slug": "O", "permalink": "/tag/O/"}, {"name": "T", "slug": "T", "permalink": "/tag/T/"}, {"name": "E", "slug": "E", "permalink": "/tag/E/"}, {"name": "S", "slug": "S", "permalink": "/tag/S/"}]}, {"title": "\u4e00\u4e2a\u597d\u7528\u7684Github\u63d2\u4ef6--gayhub", "date": "2017-09-20T15:41:36-00.00", "path": "/archives/\u4e00\u4e2a\u597d\u7528\u7684Github\u63d2\u4ef6--gayhub/", "text": "\n\u522b\u8dd1, \u8fd9\u771f\u662f\u6b63\u7ecf\u63d2\u4ef6.\n\u6548\u679c, \u4e00\u56fe\u6d41:\n\n\n\u5177\u4f53\u6548\u679c\u5728\u9879\u76ee\u5730\u5740\u5f88\u8be6\u7ec6\n\u9879\u76ee\u5730\u5740: https://github.com/jawil/GayHub\nchrome \u5e94\u7528\u5546\u5e97: https://chrome.google.com/webstore/detail/gayhub/mdcffelghikdiafnfodjlgllenhlnejl\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "ALC-Entorpy&Diversity", "date": "2017-09-16T16:03:18-00.00", "path": "/archives/ALC-Entorpy&Diversity/", "text": "Active Batch Selection via Convex Relaxations with Guaranteed Solution Bounds\n\u63d0\u51fa\u4e86entropy\u548cdiversity\u8fd9\u4e24\u4e2a\u7528\u6765\u5224\u65adhard sample\u7684\u6982\u5ff5.\n\u60f3\u6cd5:\n    \u6bcf\u4e00\u6b21\u6311\u9009\u4e00\u4e2a\u6700\u4f18\u6837\u4f8b, \u518d\u53bb\u8bad\u7ec3model, \u8fd9\u6837\u4e3a\u5faa\u73af\u7684\u6311\u9009\u6837\u4f8b, \u771f\u7684\u4f1a\u662f\u5168\u5c40\u6700\u4f18\u7684\u89e3\u5417? \u8fd9\u6837\u8d2a\u5fc3, \u4f1a\u662f\u6700\u4f18\u5417..........\u8003\u8651\u4e00\u4e0b\u8d2a\u5fc3\u5931\u6548\u60c5\u5f62?\n\u76f8\u5173\nAn Active Learning Approach with Uncertainty, Representativeness, and Diversity\nentropy: However, in multiclass problems, the entropy\ndoes not often well reflect the uncertainty of the sample.Some may have larger classification uncertainty than the\nones whose entropy may be higher\nQBC: QBC algorithms train a committee of classifiers and\nchoose the instance on which the committee members most\ndisagree. In essence, the QBC is also based on uncertainty\nsampling.\n1.Uncertainty Measure.\nBvSB, best vs. second best. \u56fe\u7247\u63cf\u8ff0\n\u95ee\u9898\u6765\u4e86: outliers, \u89e3\u51b3\u65b9\u6cd5-&gt;representativeness sampling.\n\nRepresentativeness Measure. \u9ad8\u4ee3\u8868\u6027\u7684sample\u66f4\u5c0f\u53ef\u80fd\u4f1a\u662f\u4e00\u4e2aoutlier. \u4f7f\u7528Gaussian Process. measure the representativeness information between the current sample and the remaining unlabeled sample set.\n\u56fe\u7247\u63cf\u8ff0\n\n\u5177\u4f53\u7684Gaussian process\u4e5f\u8bb2\u5230\u4e86.\n\nInformation Content Measure. \u7ed3\u5408\u4e0a\u9762\u4e24\u70b9\u7684\u957f\u5904. \n\u56fe\u7247\u63cf\u8ff0\n\n\u76f4\u63a5\u4e58, \u4e5f\u6ca1\u4ec0\u4e48\u9053\u7406.\n\nDiversity Measure. \u4e3a\u4e86\u4e0d\u9009\u5728\u540c\u4e00\u4e2acluster\u7684sample, \u4f7f\u7528 kernel\n\ud835\udc58-means clustering algorithm to cluster samples with high\ninformation content. \n\n\u6700\u540e\u7684\u7b97\u6cd5:\n\n\nActive learning combining uncertainty and diversity for multi-class image classification\nmulticlass classification, \u57fa\u4e8eSVM, \u4f7f\u7528\u4e86 OVO strategy(one vs. one), \u4efb\u610f\u4e24\u4e2a\u7c7b\u4e4b\u95f4\u6765\u4e00\u4e2aclassifier.\nUncertainty Measure, \u4e00\u6837\u4e5f\u662fBVSB.\nDiversity measure, \u4f7f\u7528Gaussian kernel\u6765\u8861\u91cfsimilarity, \n\u56fe\u7247\u63cf\u8ff0\n\u628a$x$\u540c\u6bcf\u4e00\u4e2aexample $S_i$\u6c42\u9ad8\u65af\u6838\u53d6\u6781\u5927.\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "A", "slug": "A", "permalink": "/tag/A/"}, {"name": "L", "slug": "L", "permalink": "/tag/L/"}, {"name": "C", "slug": "C", "permalink": "/tag/C/"}]}, {"title": "\u6211, sci-hub, \u4e0b\u8bba\u6587", "date": "2017-09-16T15:39:35-00.00", "path": "/archives/\u6211, sci-hub, \u4e0b\u8bba\u6587/", "text": "\u6628\u5929\u8fd8\u80fd\u597d\u597d\u4eceieee\u4e0bpaper, \u73b0\u5728\u7a81\u7136\u5c31\u8981purchase\u4e86.\n\u627e\u4e86\u627e\u53d1\u73b0\u4e00\u4e2a\u6bdb\u5b50\u7684\u7f51\u7ad9\n    https://sci-hub.cc/\n\u7b80\u6d01\u5927\u6c14\u4e0d\u641e\u865a\u7684, \u5f88\u5f3a\u52bf.\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "ALC\u6574\u7406", "date": "2017-09-15T19:15:28-00.00", "path": "/archives/ALC\u6574\u7406/", "text": " \u548cCNN\u7ed3\u5408, \u4e3b\u52a8\u9009\u62e9\u6837\u672c\u8bad\u7ec3, \u5728\u8bad\u7ec3\u653e\u7f13\u65f6?\u53bbactive learning\n\nALC\u5e94\u8be5\u5206\u4e3a\u4e09\u90e8\u5206, A-\u9009\u62e9\u6837\u4f8b, L-\u5b66\u4e60\u4e3b\u4f53, C-\u9009\u62e9annotator.\nstream-based: \u672a\u6807\u6ce8\u6837\u4f8b\u9010\u4e2a\u63d0\u4ea4\u7ed9\u6837\u4f8b\u9009\u62e9\u90e8\u5206, \u7531\u5176\u51b3\u5b9a\u662f\u5426\u9700\u8981\u6807\u6ce8.\npoo-baesd: \u7b97\u6cd5\u7ef4\u62a4\u4e86\u4e00\u4e2a\u672a\u6807\u6ce8\u6837\u4f8b\u96c6, \u4ece\u4e2d\u6311\u9009\u9700\u8981\u6807\u6ce8\u7684\u6837\u4f8b.\u6709\u51e0\u4e2a\u65b9\u6cd5\u65b9\u5411:\n\n\u57fa\u4e8e\u4e0d\u786e\u5b9a\u5ea6\u7f29\u51cf. \u4fe1\u606f\u71b5\u4f5c\u4e3a\u4f9d\u636e, \u4fe1\u606f\u71b5\u5927\u5c31\u610f\u5473\u7740\u5f53\u524d\u5206\u7c7b\u5668\u96be\u4ee5\u6b63\u786e\u5206\u7c7b, \u4e5f\u5c31\u662f\u9760\u8fd1\u5206\u7c7b\u8fb9\u754c\u7684\u6837\u672c. loggistic regression\u548cSVM\u90fd\u80fd\u5f88\u597d\u7684\u4f7f\u7528\u8fd9\u4e2a.\n\n\u57fa\u4e8e\u7248\u672c\u7a7a\u95f4\u7f29\u51cf(reduction of version space). \u5206\u6b67\u5ea6\u4f5c\u4e3a\u4f9d\u636e. QBC(Query By Committee)\u7b97\u6cd5, \u4ece\u7248\u672c\u7a7a\u95f4\u968f\u673a\u9009\u62e9\u82e5\u5e72\u5047\u8bbe\u6784\u6210\u4e00\u4e2a\u59d4\u5458\u4f1a, \u7136\u9009\u62e9\u59d4\u5458\u4f1a\u4e2d\u7684\u5047\u8bbe\u9884\u6d4b\u5206\u6b67\u6700\u5927\u7684\u6837\u4f8b\u8fdb\u884c\u6807\u6ce8. \u8bc4\u4ef7\u5206\u671f\u5ea6\u5e38\u7528\u7684\u7531JS\u6563\u5ea6, KL\u6563\u5ea6, vote entropy. \u4e3a\u4e86\u4f18\u5316\u59d4\u5458\u4f1a\u7684\u6784\u6210, \u589e\u5f3a\u5176\u591a\u6837\u6027, \u53ef\u4ee5\u91c7\u7528bagging, Adaboost\u7b49\u6210\u719f\u7684\u7684\u5206\u7c7b\u5668\u96c6\u6210\u7b97\u6cd5\u4ece\u7248\u672c\u7a7a\u95f4\u4e2d\u4ea7\u751f\u59d4\u5458\u4f1a.\n cosine distance, \u4f59\u5f26\u76f8\u4f3c\u5ea6\n committee\u6784\u6210\u65b9\u6cd5: \u4e0d\u540c\u7684model / ensemble methods\n\u6709\u7684\u76f4\u63a5\u5bf9\u539f\u59cb\u7684noise label\u96c6\u6210\u5f97\u5230\u4e00\u4e2aintegrated dataset\u518d\u53bb\u4f7f\u7528. \u5e94\u8be5\u4e5f\u53ef\u4ee5\u5c5e\u4e8e\u8fd9\u79cd.\n\n\n\u6295\u7968\u71b5\n\n\u57fa\u4e8e\u6cdb\u5316\u8bef\u5dee\u7f29\u51cf. \u5148\u9009\u62e9\u4e00\u4e2alost function, \u5bf9\u6bcf\u4e00\u4e2a\u6837\u4f8b\u8fdb\u884c\u8ba1\u7b97, \u9009\u62e9\u4f30\u8ba1\u8bef\u5dee\u7f29\u51cf\u6700\u5927\u7684\u8fdb\u884c\u6807\u6ce8. \u8981\u9488\u5bf9\u4e0d\u540c\u7684\u57fa\u51c6\u5206\u7c7b\u5668\u63d0\u51fa\u76f8\u5bf9\u5e94\u7684\u7b97\u6cd5, Naive Bayes, Bayesian net, kNN\u7b49. \u8fd9\u79cd\u65b9\u6cd5\u76f4\u63a5\u9488\u5bf9\u5206\u7c7b\u5668\u6027\u80fd\u7684\u6700\u7ec8\u8bc4\u4ef7\u6307\u6807, \u7406\u8bba\u4e0a\u6548\u679c\u5f88\u597d\u4f46\u8ba1\u7b97\u91cf\u8f83\u5927, \u540c\u65f6lost function\u7684\u7cbe\u5ea6\u5bf9\u6027\u80fd\u4e5f\u6709\u5f88\u5927\u5f71\u54cd\n\u5176\u4ed6\u624b\u6bb5. \u9884\u805a\u7c7b( \ud83d\ude36\u53c8\u6709\u4e86)\n\n\n\u4e00\u4e9b\u6587\u7ae0\nSelf-Taught Active Learning from Crowds:\n\u90a3\u4e9b\u4f4e\u7cbe\u5ea6\u7684annotator\u53ef\u4ee5\u4eceorcle\u7ed9\u51fa\u7684\u7b54\u6848\u4e2d\u5b66\u4e60\u77e5\u8bc6\nLearning from crowds with active learning and self-healing:\n\u5bf9\u4e8e\u4f4e\u7cbe\u5ea6\u7684noise label, \u5148\u901a\u8fc7\u96c6\u6210\u5f97\u5230\u4e00\u4e2aintegrated dataset\n\u5bfb\u627e\u6837\u672c\u7684\u65b9\u6cd5\u662f-- pool-based , \u4f7f\u7528uncertainty estimation \n\u7136\u540ebuild m random decision trees,\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "NOTES", "slug": "NOTES", "permalink": "/tag/NOTES/"}, {"name": "ALC", "slug": "ALC", "permalink": "/tag/ALC/"}]}, {"title": "\u4e00\u6b21\u597d\u73a9\u7684\u4f5c\u4e1a-Cryptography-HW1", "date": "2017-09-15T18:42:26-00.00", "path": "/archives/\u4e00\u6b21\u597d\u73a9\u7684\u4f5c\u4e1a-Cryptography-HW1/", "text": "\u4eca\u5929\u7684\u5bc6\u7801\u5b66\u7b2c\u4e00\u6b21\u8bfe, \u7531\u5927\u5bb6\u4e0a\u53f0\u5c55\u793a\u4e8b\u5148\u51c6\u5907\u597d\u7684\u7a0b\u5e8f, \u8981\u6c42\u5982\u4e0b:\n\n\n\u660e\u5929\u4e0a\u5348\u4e0a\u5bc6\u7801\u5b66\n\u8bf7\u5927\u5bb6\u4eca\u5929\u81ea\u5df1\u5199\u4e2a\u5c0f\u7a0b\u5e8f \u62bd\u5956\uff1a\n\n\u5047\u8bbe\u73b0\u573a\u6709N\u4e2a\u4eba\u53c2\u4e0e\u62bd\u5956\uff0c\u4f60\u5199\u4e2a\u7a0b\u5e8f\uff0c\u62bd\u51fam\u4e2a\u4eba\u83b7\u5956\n\u62bd\u5956\u7ed3\u679c\u8981\u968f\u673a\n\u4e0d\u80fd\u91cd\u590d\u83b7\u5956\n\u5b8c\u6210\u4e86\u4e0a\u8ff0\u8981\u6c42\u540e\uff0c\u8bbe\u6cd5\u5728\u7a0b\u5e8f\u4e2d\u4f5c\u5f0a\uff0c\u4f7f\u5f97\u67d0\u4e9b\u4eba\u83b7\u5956\u6982\u7387\u66f4\u9ad8\n\u57284\u7684\u57fa\u7840\u4e0a\uff0c\u5c3d\u53ef\u80fd\u9690\u853d\u4f60\u7684\u4f5c\u5f0a\uff0c\u4ece\u6e90\u4ee3\u7801\u4e0a\u770b\u4e0d\u51fa\u6765\u4f60\u4f5c\u5f0a\u4e86\n\u5982\u679c\u7a0b\u5e8f\u4e0d\u80fd\u6267\u884c\uff0c\u53ea\u80fd\u5c55\u793a\u6e90\u4ee3\u7801\u7684\uff0c\u51cf1\u5206\uff1b\n\u8bed\u8a00\u4e0d\u9650\uff0c\u601d\u8def\u4e0d\u9650\uff1b\n\u6709\u7279\u6b8a\u539f\u56e0\u4e0d\u80fd\u4eb2\u81ea\u6f14\u793a\u7684\uff0c\u53ef\u4ee5\u627e\u540c\u5b66\u4ee3\u8bb2\u3002\n\n\n\n\u8fd8\u662f\u86ee\u597d\u73a9\u7684, \u4e00\u60f3\u5230\u8001\u5e08\u641e\u767d\u76d2\u5bc6\u7801\u7684, \u4e5f\u4e0d\u90a3\u4e48\u610f\u5916.\n\u633a\u591a\u90fd\u662f\u76f4\u63a5\u6539\u5e93\u51fd\u6570, \u8fd8\u6709\u76f4\u63a5print\u4f5c\u5f0a\u53f7\u7801\u7684, \u6709\u51e0\u4e2a\u8fd8\u662f\u5199\u7684\u53ef\u4ee5\u7684.\n\u4e00\u4e2a\u662f\u5199\u51fa\u6765\u4e86\u4e00\u4e2aGUI, \u6839\u636e\u70b9\u62bd\u5956\u6309\u952e\u7684\u65f6\u673a\u4f5c\u5f0a, \u5feb\u901f\u7684\u8fde\u70b9\u4f1a\u4ea7\u751f\u4e00\u4e32\u8fde\u7eed\u53f7\u7801, \u8fd9\u4e2a\u6211\u4eec\u4e00\u81f4\u8ba4\u4e3a\u505a\u7684\u5f88\u6f02\u4eae.\n\u8fd8\u6709\u4e00\u4e2a\u6808\u6ea2\u51fa, \u4e00\u4e2a\u6570\u7ec4\u8d8a\u754c, \u4e00\u4e2a\u751f\u6210\u6b63\u6001\u53bb\u53d6\u968f\u673a.\n\u5176\u5b9e\u6211\u89c9\u5f97\u81ea\u5df1\u7684trick\u66f4\u68d2\n\u5927\u81f4\u4e0a\u5229\u7528\u4e86\u7b2c\u4e00\u6570\u5b57\u5b9a\u5f8b, \u968f\u4fbf\u62bd\u4e86\u4e00\u672c\u7edf\u8ba1\u5e74\u9274\u7684\u6240\u6709\u6570\u5b57, \u628a0\u53bb\u6389, \u4ece\u4e2d\u4e00\u4f4d\u4e00\u4f4d\u7684\u53d6\u968f\u673a\u6570. \u7531\u4e8e\u6570\u5b57\u4e00\u822c\u662f\u4e09\u5230\u56db\u4f4d, \u5b9e\u9645\u4e0a\u4e0d\u7528\u7279\u610f\u53bb\u53d6\u6570\u5b57\u9996\u4f4d\u4e5f\u80fd\u6709\u5f88\u660e\u663e\u7684\u8868\u73b0. \u4e8b\u5b9e\u4e5f\u662f\u8fd9\u6837, \u975e\u96f6\u6570\u5b57\u4e2d, '1'\u5360\u4e8617.6%. \u540c\u65f6, \u6570\u5b57\u7684\u5341\u4f4d\u4e2a\u4f4d\u5206\u5f00\u53d6, \u6700\u540e\u7684\u7ed3\u679c\u5c31\u662f, 30\u4eba\u62bd5\u4e2a, 1\u53f7\u753160%\u7684\u6982\u7387\u88ab\u62bd\u5230, 20\u4eba\u62bd5\u4e2a\u7684\u8bdd\u5e94\u8be5\u5c31\u63a5\u8fd180%\u4e86.\n\u8fd8\u662f\u86ee\u610f\u5916\u7684, \u6ca1\u4eba\u770b\u51fa\u6765. \u56e0\u4e3a\u548c\u4e4b\u524d\u540c\u5b66\u804a\u8d77\u8fd9\u4e2a, \u4ed6\u4e5f\u76f4\u63a5\u5c31\u60f3\u5230\u8fd9\u4e2atrick. \u6211\u8fd8\u7279\u610f\u8a00\u8bed\u5f15\u5bfc\u4e0b\u9762\u4eba\u5f80\u4ee3\u7801\u4e0a\u60f3.\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "H", "slug": "H", "permalink": "/tag/H/"}, {"name": "W", "slug": "W", "permalink": "/tag/W/"}]}, {"title": "\u8336\u697c\u9152\u8086", "date": "2017-09-14T16:28:03-00.00", "path": "/archives/\u8336\u697c\u9152\u8086/", "text": "\u4e0dFQ\u7684\u8bdd\u8bc4\u8bba\u533a\u6a21\u5757\u7adf\u7136\u5c31\u76f4\u63a5\u6ca1\u4e86, \u6211\u8fd8\u4ee5\u4e3a\u914d\u7f6e\u51fa\u4e86\u95ee\u9898\u67e5\u4e86\u597d\u4e45\n\n\u4e4b\u524d\u5acc\u9ebb\u70e6\u6ca1\u641e\u8bc4\u8bba, \u4eca\u4e2a\u4e3a\u4e86\u4f5c\u4e1a, \u7ed9\u6dfb\u4e86\u4e2a\u8bc4\u8bba\u7cfb\u7edf. \u4e00\u67e5\u624d\u77e5\u9053, \u591a\u8bf4\u5012\u95ed\u4e86, \u7f51\u6613\u4e91\u8ddf\u5e16\u76f4\u63a5\u6d88\u5931\u4e86, \u7545\u8a00\u8fd8\u8981\u7ed9gov\u62a5\u5907\u624d\u80fd\u7528, \u5f97, disqus\u5427. \u4e07\u91cc\u957f\u57ce\u6c38\u4e0d\u5012\uff0c\u4e00\u679d\u7ea2\u674f\u51fa\u5899\u6765.\n\u4e0e\u541b\u5171\u52c9.\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "DLBook-NOTES-8\u6df1\u5ea6\u6a21\u578b\u4e2d\u7684\u4f18\u5316", "date": "2017-09-14T10:05:59-00.00", "path": "/archives/DLBook-NOTES-8\u6df1\u5ea6\u6a21\u578b\u4e2d\u7684\u4f18\u5316/", "text": "8.1 \u5b66\u4e60\u548c\u7eaf\u4f18\u5316\u6709\u4ec0\u4e48\u4e0d\u540c\n\u6211\u4eec\u7684\u76ee\u6807\u662f\u964d\u4f4e\u671f\u671b\u6cdb\u5316\u8bef\u5dee, \u4e5f\u5c31\u662frisk, \u6211\u4eec\u5e76\u4e0d\u76f4\u63a5\u6700\u4f18\u5316\u98ce\u9669, \u800c\u662f\u53bb\u6700\u4f18\u5316\u7ecf\u9a8c\u98ce\u9669. \u4f46\u662f, \u7ecf\u9a8c\u98ce\u9669\u7684\u6700\u5c0f\u5316\u5f88\u5bb9\u6613\u5bfc\u81f4\u8fc7\u62df\u5408, \u800c\u4e14, \u5f88\u591a\u60c5\u51b5\u4e0b\u8fd9\u4e48\u505a\u5e76\u4e0d\u53ef\u884c.\n\u4ee3\u7406\u635f\u5931\u51fd\u6570\n    \u4ee3\u7406\u635f\u5931\u51fd\u6570\u4f5c\u4e3a\u539f\u635f\u5931\u7684\u4ee3\u7406\uff0c\u8fd8\u5177\u5907\u4e00\u4e9b\u4f18\u70b9\u3002\u4f8b\u5982\uff0c\u6b63\u786e\u7c7b\u522b\u7684\u8d1f\u5bf9\u6570\u4f3c\u7136\u901a\u5e38\u7528\u4f5c 0\u22121 \u635f\u5931\u7684\u66ff\u4ee3\u3002\u8d1f\u5bf9\u6570\u4f3c\u7136\u5141\u8bb8\u6a21\u578b\u4f30\u8ba1\u7ed9\u5b9a\u6837\u672c\u7684\u7c7b\u522b\u7684\u6761\u4ef6\u6982\u7387\uff0c\u5982\u679c\u8be5\u6a21\u578b\u6548\u679c\u597d\uff0c\u90a3\u4e48\u5b83\u80fd\u591f\u8f93\u51fa\u671f\u671b\u6700\u5c0f\u5206\u7c7b\u8bef\u5dee\u6240\u5bf9\u5e94\u7684\u7c7b\u522b\n\u63d0\u524d\u7ec8\u6b62\n    \u548c\u4f18\u5316\u4e0d\u540c\u7684\u662f, \u63d0\u524d\u7ec8\u6b62\u65f6\u4ee3\u7406\u635f\u5931\u51fd\u6570\u4ecd\u7136\u6709\u8f83\u5927\u7684\u5bfc\u6570\nbatch, stochastic \u548c online\n    \u4f7f\u7528\u6574\u4e2a\u8bad\u7ec3\u96c6\u7684\u4f18\u5316\u7b97\u6cd5\u88ab\u79f0\u4e3a\u6279\u91cf\uff08batch\uff09\u6216\u786e\u5b9a\u6027\uff08deterministic\uff09\u68af\u5ea6\u7b97\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u5728\u4e00\u4e2a\u5927\u6279\u91cf\u4e2d\u540c\u65f6\u5904\u7406\u6240\u6709\u6837\u672c\u3002\u8fd9\u4e2a\u672f\u8bed\u53ef\u80fd\u6709\u70b9\u4ee4\u4eba\u56f0\u60d1\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8bcd \u201c\u6279\u91cf\u2019\u2019 \u4e5f\u7ecf\u5e38\u88ab\u7528\u6765\u63cf\u8ff0\u5c0f\u6279\u91cf\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u4e2d\u7528\u5230\u7684\u5c0f\u6279\u91cf\u6837\u672c\u3002\u901a\u5e38\uff0c\u672f\u8bed \u201c\u6279\u91cf\u68af\u5ea6\u4e0b\u964d\u2019\u2019 \u6307\u4f7f\u7528\u5168\u90e8\u8bad\u7ec3\u96c6\uff0c\u800c\u672f\u8bed \u201c\u6279\u91cf\u2019\u2019 \u5355\u72ec\u51fa\u73b0\u65f6\u6307\u4e00\u7ec4\u6837\u672c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u666e\u904d\u4f7f\u7528\u672f\u8bed \u201c\u6279\u91cf\u5927\u5c0f\u2019\u2019 \u8868\u793a\u5c0f\u6279\u91cf\u7684\u5927\u5c0f\u3002\n    \u73b0\u5728, minibatch\u4e5f\u88ab\u79f0\u4f5cstochastic\n\u53ef\u80fd\u662f\u7531\u4e8e\u5c0f\u6279\u91cf\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u52a0\u5165\u4e86\u566a\u58f0\uff0c\u5b83\u4eec\u4f1a\u6709\u4e00\u4e9b \u6b63\u5219\u5316\u6548\u679c  (Wilson and Martinez, 2003)\u3002\u6cdb\u5316\u8bef\u5dee\u901a\u5e38\u5728\u6279\u91cf\u5927\u5c0f\u4e3a 1 \u65f6\u6700\u597d\u3002\u56e0\u4e3a\u68af\u5ea6\u4f30\u8ba1\u7684\u9ad8\u65b9\u5dee\uff0c\u5c0f\u6279\u91cf\u8bad\u7ec3\u9700\u8981 \u8f83\u5c0f\u7684\u5b66\u4e60\u7387 \u4ee5\u4fdd\u6301\u7a33\u5b9a\u6027\u3002\u56e0\u4e3a\u964d\u4f4e\u7684\u5b66\u4e60\u7387\u548c\u6d88\u8017\u66f4\u591a\u6b65\u9aa4\u6765\u904d\u5386\u6574\u4e2a\u8bad\u7ec3\u96c6\u90fd\u4f1a\u4ea7\u751f\u66f4\u591a\u7684\u6b65\u9aa4\uff0c\u6240\u4ee5\u4f1a\u5bfc\u81f4\u603b\u7684\u8fd0\u884c\u65f6\u95f4\u975e\u5e38\u5927\u3002\n\u6709\u56e0\u4e3aminibatch\u5f15\u5165\u4e86\u566a\u58f0, \u6240\u4ee5\u4e0d\u540c\u7684\u66f4\u65b0\u65b9\u5f0f\u8981\u6709\u6070\u5f53\u7684batch. \u4ec5\u57fa\u4e8e\u68af\u5ea6 g \u7684\u66f4\u65b0\u65b9\u6cd5\u901a\u5e38\u76f8\u5bf9\u9c81\u68d2\uff0c\u5e76\u80fd\u4f7f\u7528\u8f83\u5c0f\u7684\u6279\u91cf\u83b7\u5f97\u6210\u529f\uff0c\u5982 100\u3002\u4f7f\u7528Hessian\u77e9\u9635 H\uff0c\u8ba1\u7b97\u5982 H \u22121 g \u66f4\u65b0\u7684\u4e8c\u9636\u65b9\u6cd5\u901a\u5e38\u9700\u8981\u66f4\u5927\u7684\u6279\u91cf\uff0c\u5982 10,000\n\n\n8.2 \u795e\u7ecf\u7f51\u7edc\u4f18\u5316\u4e2d\u7684\u6311\u6218\n\u75c5\u6001\u95ee\u9898\u4e00\u822c\u88ab\u8ba4\u4e3a\u5b58\u5728\u4e8e\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u3002\u75c5\u6001\u4f53\u73b0\u5728\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u4f1a\u2018\u2018\u5361\u2019\u2019 \u5728\u67d0\u4e9b\u60c5\u51b5\uff0c\u6b64\u65f6\u5373\u4f7f\u5f88\u5c0f\u7684\u66f4\u65b0\u6b65\u957f\u4e5f\u4f1a\u589e\u52a0\u4ee3\u4ef7\u51fd\u6570\u3002\n\u5b9e\u9645\u4e0a, \u5bf9\u4e8eNN, \u5927\u90e8\u5206\u5730\u65b9\u53ef\u80fd\u662f\u5f88\u5e73\u5766\u7684, \u4ee3\u4ef7\u5f88\u9ad8\u7684\u5c40\u90e8\u6781\u5c0f\u503c\u4f1a\u5f88\u7a00\u6709.\n\u66f4\u52a0\u4ee4\u4eba\u5173\u6ce8\u7684\u662f\u978d\u70b9, \u800c\u4e14\u5f88\u4e0d\u5e78\u7684\u662f, \u771f\u5b9e\u7684NN\u4e2d\u4e5f\u5b58\u5728\u5305\u542b\u5f88\u591a\u9ad8\u4ee3\u4ef7\u978d\u70b9\u7684\u635f\u5931\u51fd\u6570.\n\u60ac\u5d16\u548c\u68af\u5ea6\u7206\u70b8(RNN\u4e2d\u7ecf\u5e38\u770b\u5230)\n    \u542f\u53d1\u5f0f\u68af\u5ea6\u622a\u65ad(gradient clipping) : \u5176\u57fa\u672c\u60f3\u6cd5\u6e90\u81ea\u68af\u5ea6\u5e76\u6ca1\u6709\u6307\u660e\u6700\u4f73\u6b65\u957f\uff0c\u53ea\u8bf4\u660e\u4e86\u5728\u65e0\u9650\u5c0f\u533a\u57df\u5185\u7684\u6700\u4f73\u65b9\u5411\u3002\u5f53\u4f20\u7edf\u7684\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5\u63d0\u8bae\u66f4\u65b0\u5f88\u5927\u4e00\u6b65\u65f6\uff0c\u542f\u53d1\u5f0f\u68af\u5ea6\u622a\u65ad\u4f1a\u5e72\u6d89\u6765\u51cf\u5c0f\u6b65\u957f\uff0c\u4ece\u800c\u4f7f\u5176\u4e0d\u592a\u53ef\u80fd\u8d70\u51fa\u68af\u5ea6\u8fd1\u4f3c\u4e3a\u6700\u9661\u4e0b\u964d\u65b9\u5411\u7684\u60ac\u5d16\u533a\u57df\u3002\n8.3 \u57fa\u672c\u7b97\u6cd5\nSGD\n\u4fdd\u8bc1SGD\u6536\u655b\u7684\u4e00\u4e2a\u5145\u5206\u6761\u4ef6\u662f: \u5b66\u4e60\u7387\u7684sum\u7b49\u4e8e\u65e0\u7a77\u5927, \u5e73\u65b9\u548c\u5c0f\u4e8e\u65e0\u7a77\u5927. \u5b9e\u4f5c\u4e2d, \u7ebf\u6027\u7684\u8870\u51cf\u5b66\u4e60\u7387, \u5728\u4e00\u5b9a\u6b65\u6570\u4e4b\u540e\u4f7f\u5b66\u4e60\u7387\u4fdd\u6301\u5e38\u6570.\n\u5173\u4e8e\u5b66\u4e60\u7387:\n\n\u52a8\u91cf momentum\n\n\u5b9e\u9645\u4e0a, \u52a8\u91cf\u6cd5\u7684\u8d85\u53c2\u662f$\\frac{1}{1-\\alpha}$\n8.4 \u53c2\u6570\u521d\u59cb\u5316\u7b56\u7565\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "N", "slug": "N", "permalink": "/tag/N/"}, {"name": "O", "slug": "O", "permalink": "/tag/O/"}, {"name": "T", "slug": "T", "permalink": "/tag/T/"}, {"name": "E", "slug": "E", "permalink": "/tag/E/"}, {"name": "S", "slug": "S", "permalink": "/tag/S/"}]}, {"title": "CVPR\u4e0a\u4e00\u7bc7\u5173\u4e8eactive learing\u7684paper", "date": "2017-09-13T20:29:00-00.00", "path": "/archives/CVPR\u4e0a\u4e00\u7bc7\u5173\u4e8eactive learing\u7684paper/", "text": "\u8fd9\u7bc7\u5728OneNote\u91cc\u9762\u8eba\u4e86\u4e00\u4e2a\u591a\u6708\u4e86, \u4eca\u5929\u5f97\u95f2\u770b\u770b.\nZhou_Fine-Tuning_Convolutional_Neural_CVPR_2017_paper\n\u4f5c\u8005\u4eb2\u81ea\u5199\u7684\u7b80\u4ecb\n\n\u9996\u5148\u4f5c\u8005\u8bf4\u4e86\u4e24\u4e2a\u60c5\u5f62:\n\u4e00\u5171\u624b\u5934\u6709100\u4e2a\u672a\u6807\u8bb0\u6837\u672c\uff0c\u548c\u4ec5\u4ec5\u591f\u6807\u8bb010\u4e2a\u6837\u672c\u7684\u94b1\uff0c\u8001\u677f\u8bf4\uff0c\u901a\u8fc7\u8bad\u7ec3\u8fd9\u5341\u4e2a\u6807\u8bb0\u7684\u6837\u672c\uff0c\u80fd\u63a5\u8fd1\u751a\u81f3\u8fbe\u5230\u8bad\u7ec3100\u4e2a\u6837\u672c\u7684performance\uff1b\n\u624b\u5934\u6709\u4e86\u4e00\u4e2a\u5df2\u7ecf\u5728100\u4e2a\u6837\u672c\u4e2d\u8bad\u7ec3\u5b8c\u7684\u5206\u7c7b\u5668\uff0c\u73b0\u5728\u53c8\u6765\u4e86100\u4e2a\u65b0\u6807\u8bb0\u7684\u6837\u672c\uff0c\u8001\u677f\u8bf4\uff0c\u53ea\u7ed9\u63d0\u4f9b\u591f\u8bad\u7ec310\u4e2a\u6837\u672c\u7684\u8ba1\u7b97\u673a\uff1b\u6216\u8005\u53ea\u7ed9\u4f60\u63d0\u4f9b\u591f\u8bad\u7ec310\u4e2a\u6837\u672c\u7684\u65f6\u95f4\uff0c\u8ba9\u5206\u7c7b\u5668\u5c3d\u5feb\u5b66\u4e60\u5230\u65b0\u6765\u6837\u672c\u7684\u7279\u5f81\uff1b\n\n\n\n\u4e3a\u4ec0\u4e48\u8bf4\u4e0d\u540c\u5462? \u4e0d\u90fd\u662f\u4ece\u5c11\u91cf\u6837\u672c\u5f97\u51fa\u7279\u5f81\u5417?????\n\u61c2\u4e86, \u7b2c\u4e00\u79cd\u60c5\u51b5sample\u7684label\u662f\u672a\u77e5\u7684, \u53ea\u6709\u5c11\u91cf\u80fd\u591f\u83b7\u5f97. \u7b2c\u4e8c\u79cd\u662f\u90fd\u77e5\u9053\u6807\u7b7e, \u4f46\u53ea\u80fd\u9009\u62e9\u4e00\u5c0f\u90e8\u5206\u53bb\u66f4\u65b0\u5b66\u4e60\u5f15\u64ce.\nALC\u7684\u4e24\u4e2a\u8981\u70b9, \u9009\u62e9\u6070\u5f53\u7684\u6837\u672c\u53bb\u8bad\u7ec3, \u9009\u62e9\u6070\u5f53\u7684annotator\u53bb\u5224\u522b. \u6311\u6837\u672c\u8be5\u6311\u54ea\u4e9b\u5462, \u76f4\u89c2\u5730\u5c31\u662f\u6311\u96be\u4ee5\u5206\u8fa8\u7684, \u5904\u4e8e\u5f53\u524d\u5206\u7c7b\u8fb9\u754c\u9644\u8fd1\u7684. \u4e24\u4e2a\u6307\u6807, entropy\u548cdiversity. \u6765\u81ea\u201cActive batch selection via convex relaxations with guaranteed solution bounds\u201d.\n(\u8fd9\u7bc7\u4e5f\u8981\u770b\u770b, \u6b63\u597d\u662f\u6211\u60f3\u95ee\u7684)\n\u7136\u540e\u548c\u6df1\u5ea6\u7ed3\u5408\u5c31\u662f, \u5148\u628a\u56fe\u7247\u6254\u8fdb\u81ea\u7136\u56fe\u7247\u7684\u9884\u8bad\u7ec3\u7f51\u7edc\u4e2d, \u8dd1\u51fa\u6765\u6700\u96be\u7684, \u6807\u8bb0, \u518d\u53bb\u8bad\u7ec3\u7f51\u7edc, \u91cd\u590d\u8fc7\u7a0b.\n\u95ee\u9898\u70b9: entropy\u8fd8\u597d\u8bf4, diversity\u5c31\u5f88\u9ebb\u70e6\u4e86\n\u8fd9\u7bc7\u6293\u4f4f\u4e86Data Augmentation\u8fd9\u4e2a\u70b9\u6765\u89e3\u51b3, \u7ed9\u51fa\u4e86\u4e00\u4e2a\u57fa\u672c\u601d\u60f3:\n\u6765\u81ea\u540c\u4e00\u4e2aimage\u7684patches, \u4eceCNN\u8dd1\u51fa\u6765\u7684\u7ed3\u679c\u5e94\u8be5\u662f\u4e00\u81f4\u7684. \u5373\u90a3\u4e9b\u8dd1\u51fa\u6765\u4e0d\u4e00\u81f4\u7684\u6837\u672c, \u8fd9\u4e2aimage\u5c31\u662fimportant\u7684.\n\n\u6211\u4eec\u867d\u7136\u8dd1\u4e0d\u51falable\u4f46\u80fd\u8dd1\u51fa\u6765\u9884\u6d4b\u7ed3\u679c\u662f\u5426\u4e00\u81f4, \u4e00\u81f4\u7684\u8bdd\u8ba4\u4e3a\u8fd9\u662f\u4e2aeasy simple\u5c31\u4e0d\u53bb\u9009\u62e9.  #\u5c31\u611f\u89c9\u6ca1\u4ec0\u4e48\u9053\u7406, \u76f4\u63a5\u5212\u5206\u9519\u5927\u7c7b\u8be5\u600e\u4e48\u8bf4#\n\u7ed3\u5408data augmentation\u7684\u4f18\u70b9\u662f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u54ea\u4e9bpatch\u5bf9\u5e94\u4ec0\u4e48image\uff0c\u6bd4\u8f83\u5bb9\u6613\u63a7\u5236\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u4e00\u4e2aimage\u5167\u7b97diversity\u4e86\uff0c\u6bcf\u4e2aimage\u5bf9\u5e94\u4e00\u4e2a\u77e9\u9635\uff0c\u5927\u5c0f\u662f\u4e00\u6837\u7684\uff0c\u975e\u5e38\u7684\u7b80\u6d01\uff0c\u4e5f\u5bb9\u6613\u63a7\u5236\u8ba1\u7b97\u91cf\u3002(\u8fd9\u90e8\u5206\u8fd8\u8981\u53bb\u770b\u4e0b\u6587\u7ae0)\n\n\u7136\u540e\u6709\u4e2a\u5de5\u4f5c\u5c31\u662f, \u7ecf\u8fc7Data Augmentation\u7684\u4e00\u7ec4patches, \u5f88\u53ef\u80fd\u6709\u4e00\u90e8\u5206\u5c31\u96be\u4ee5\u8bc6\u522b. \u4e8e\u662f, \u5148\u5224\u65ad\u5206\u7c7b\u5927\u65b9\u5411, \u4e5f\u5c31\u662f\u4ee50.5\u4e3a\u754c\u9650, \u7136\u540e\u53bb\u53d6\u6700\u5927\u6216\u8005\u6700\u5c0f\u7684\u90a325%\u7684patch.\n\u6240\u8c13noisy lable:\n\u56fe\u7247\u63cf\u8ff0\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "A", "slug": "A", "permalink": "/tag/A/"}, {"name": "L", "slug": "L", "permalink": "/tag/L/"}, {"name": "C", "slug": "C", "permalink": "/tag/C/"}]}, {"title": "ALC papers NOTES", "date": "2017-08-06T15:47:31-00.00", "path": "/archives/ALC papers NOTES/", "text": "\u611f\u5192\u53c8\u5728\u5e8a\u4e0a\u8eba\u4e86\u51e0\u5929, \u8be5\u8d77\u6765\u5e72\u6d3b\u4e86.\nActive Learning from Crowds with Unsure Option\nJinhong Zhong , Ke Tang  and Zhi-Hua Zhou\nAbstract\nLearning from crowds, where the labels of data instances are collected using a crowdsourcing way,\n\u548c\u4f20\u7edf\u4f17\u5305\u505a\u6cd5\u628a\u6240\u6709\u6570\u636e\u90fd\u5206\u53d1\u51fa\u53bb\u4f5c\u6807\u6ce8\u4e0d\u540c, active learning from crowds\u4e3b\u52a8\u5730\u53ea\u9009\u53d6\u4e00\u90e8\u5206\u6570\u636e\u5206\u53d1\u51fa\u53bb\u6807\u6ce8, \u51cf\u5c11\u4e86\u6807\u6ce8\u7684cost.\u672c\u6587\u66f4\u8fdb\u4e00\u6b65\u7684, \u5141\u8bb8\u6807\u6ce8\u8005\u56de\u7b54'unsure'. \u51cf\u8f7b\u4e86\u6807\u6ce8\u8005\u7684\u8d1f\u62c5, \u66f4\u80fd\u63d0\u9ad8\u51c6\u786e\u7387\n\n\n1 Introduction\n\u91c7\u7528\u4e86\u591a\u4e2a\u6807\u6ce8\u8005\u4e4b\u540e, ALC\u7b97\u6cd5\u4e0d\u4ec5\u8981\u9009\u62e9\u53bb\u67e5\u8be2\u54ea\u4e9b\u5b9e\u4f8b, \u540c\u65f6\u8fd8\u8981\u9009\u62e9\u4e3a\u9009\u5b9a\u7684\u5b9e\u4f8b\u53bb\u5bfb\u627e\u6070\u5f53\u7684\u6807\u6ce8\u8005,  is a non-trivial task. \u4e8e\u662f, \u8861\u91cf\u5019\u9009\u8005\u6240\u5177\u6709\u7684\u4e13\u4e1a\u77e5\u8bc6(expertise), \u4e5f\u5c31\u6210\u4e3a\u4e86\u7b97\u6cd5\u7684\u5173\u952e. \nActive Learning from Crowds with Unsure option (ALCU),\n2 Related Work\n\u7b97\u6cd5\u5173\u952e\u662f\u5982\u4f55\u53bb\u8861\u91cf\u6807\u6ce8\u8005\u7684expertise, \u73b0\u6709\u7684\u65b9\u6cd5\u6709\u4e09\u7c7b:\n\n\u4e00\u4e2a\u6807\u6ce8\u8005\u4ee5\u4e00\u4e2a\u786e\u5b9a\u7684\u6982\u7387\u6b63\u786e\u56de\u7b54, \u7136\u540e\u4ee5\u8fd9\u4e2a\u6982\u7387\u4f5c\u4e3a\u6240\u6709\u6807\u6ce8\u8005\u5bf9\u6240\u6709\u5b9e\u4f8b\u771f\u5374\u56de\u7b54\u7684\u6982\u7387\n\u4e00\u4e2a\u6807\u6ce8\u8005\u6b63\u786e\u6807\u6ce8\u4e00\u4e2a\u5b9e\u4f8b\u7531\u4e24\u65b9\u9762\u51b3\u5b9a, \u6807\u6ce8\u8005\u81ea\u5df1\u7684\u53ef\u9760\u6027\u4ee5\u53ca\u8be5\u5b9e\u4f8b\u7684\u96be\u6613\u7a0b\u5ea6.\n\u76f4\u63a5\u4f30\u8ba1\u6bcf\u4e2a\u6807\u6ce8\u8005\u5bf9\u4e8e\u6bcf\u4e2a\u5b9e\u4f8b\u80fd\u591f\u505a\u51fa\u6b63\u786e\u6807\u6ce8\u7684\u6982\u7387, but estimating the accuracy of each annotator in each instance, which is #non-trivial# to solve.\n\n3 Problem Description and Analyses\n4 ALCU-SVM\n\u6709\u51e0\u70b9:\n\n\u8bad\u7ec3\u521d\u671f, \u5148\u53bb\u6389\u6b63\u5219\u9879\u6216\u8005\u8bf4\u662f\u9650\u5236\u9879, \u56e0\u4e3a\u6b64\u65f6\u5373\u4f7f\u5b58\u5728\u6807\u6ce8\u8005\u80fd\u591f\u6b63\u786e\u6807\u6ce8\u4e5f\u4e0d\u4e00\u5b9a\u80fd\u591f\u9009\u62e9\u51fa\u6765.\n\u6807\u6ce8\u8005\u53ef\u9760\u6027\u6a21\u578b\u7684\u6784\u5efa, \u662f\u4e00\u4e2a\u7c7b\u522b\u4e0d\u5747\u8861\u95ee\u9898(class-imbalanced). -&gt; set weights proportional\n\n5 Experiments\n6 Conclusion and Discussion\n'unsure'\u9009\u9879\u80fd\u591f\u663e\u8457\u7684\u4f18\u5316ALC\u7684\u7ed3\u679c.\n\u6709\u51e0\u4e2a\u8fdb\u4e00\u6b65\u7684\u65b9\u5411:\n\nALCU-SVM\u4ec5\u4ec5\u4f9d\u8d56\u4e8e\u6807\u6ce8\u8005\u7684\u53cd\u9988\u6765\u5224\u65ad\u4e00\u4e2a\u6807\u6ce8\u8005\u80fd\u5426\u53ef\u4fe1, \u5f53\u6807\u6ce8\u8005falsely confident\u65f6\u4f1a\u6709\u4e0d\u597d\u7684\u8868\u73b0. \u6211\u4eec\u53ef\u4ee5\u518d\u5efa\u7acb\u4e00\u4e2a\u80fd\u591f\u53cd\u6620\u6807\u6ce8\u8005\u4fe1\u5fc3\u7684\u6a21\u578b, \u53e6\u4e00\u65b9\u9762, \u4ee4\u6a21\u578b\u66f4\u52a0\u9c81\u68d2, \u80fd\u591f\u5bf9\u9519\u8bef\u7684\u6807\u6ce8\u6709\u4e00\u5b9a\u5bb9\u5fcd\u7a0b\u5ea6.\nsoftmax function\u7684\u4f7f\u7528\n\u6700\u4f18\u6807\u6ce8\u8005\u7684\u9009\u62e9\n\u5f53\u6709\u5927\u91cf\u6807\u6ce8\u8005\u65f6, \u7b97\u6cd5\u7684scalability\n\nReferences\nFinite-time Analysis of the Multiarmed Bandit Problem\nAbstract\n\u5f3a\u5316\u5b66\u4e60\u4e2d\u7684\u4e00\u4e2a\u56f0\u5883, \u9700\u8981\u5728exploring\u548c\u6309\u7ecf\u9a8c\u7684\u6700\u4f73\u884c\u52a8\u4e4b\u95f4\u627e\u5bfb\u4e00\u4e2a\u5e73\u8861.\n\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5c31\u662f\u591a\u81c2\u8d4c\u535a\u673a, 'regret'\u53ef\u4ee5\u6709\u5f88\u597d\u7684\u6548\u679c\n\u6240\u8c13\u591a\u81c2\u8d4c\u535a\u673a,\n\u7b80\u77ed\u6765\u8bf4\uff0c\u5728\u5408\u9002\u7684\u5047\u8bbe\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4fdd\u8bc1\uff0c\u5b58\u5728\u8fd9\u6837\u4e00\u79cd\u7b97\u6cd5\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u201c\u540e\u6094\u7a0b\u5ea6\u201d\u662f\u6700\u4f4e\u7684\u3002\u8b6c\u5982\uff0c\u5f53\u4e00\u540d\u8d4c\u5f92\u9762\u5bf9\u8fd1\u4f3c\u4e3a\uff08\u9759\u6001\uff09\u968f\u673a\u8fc7\u7a0b\u7684\u8001\u864e\u673a\u65f6\uff0c\u4ed6\u9700\u8981\u4e00\u79cd\u7b56\u7565\uff0c\u6700\u5927\u5316\u4ed6\u81ea\u5df1\u7684\u5229\u76ca\u3002\u518d\u5f62\u8c61\u4e00\u70b9\uff1a\u8d4c\u5f92\u8fdb\u4e86\u8d4c\u573a\uff0c\u9762\u5bf9\u4e00\u5343\u53f0\u673a\u5668\uff0c\u6bcf\u53f0\u673a\u5668\u7684\u4e2d\u5956\u7387\u662f\u4e00\u4e2a\u5b9a\u503c\u3002\u5f53\u7136\uff0c\u8d4c\u5f92\u4e0d\u77e5\u9053\u4e2d\u5956\u7387\u7684\u6570\u503c\uff0c\u4ed6\u53ea\u80fd\u9760\u4e0d\u65ad\u8d4c\u535a\u6765\u6d4b\u8bd5\u6bcf\u53f0\u673a\u5668\u7684\u8d62\u9762\u3002\u6d4b\u5f97\u8d8a\u591a\uff0c\u5bf9\u4e2d\u5956\u7387\u7684\u4f30\u8ba1\u5c31\u8d8a\u51c6\u3002\u90a3\u4e48\uff0c\u8d4c\u5f92\u7a76\u7adf\u662f\u5e94\u8be5\u4f55\u65f6\u5230\u540e\u9762\u6ca1\u8bd5\u8fc7\u7684\u673a\u5668\u78b0\u78b0\u8fd0\u6c14\uff1f\u4f55\u65f6\u5e94\u8be5\u7ee7\u7eed\u572835\u53f7\u673a\u4e0a\u7ee7\u7eed\u4e0b\u6ce8\uff08\u56e0\u4e3a\u521a\u624d\u572835\u53f7\u4e0b\u6ce8\u4e09\u6b21\u90fd\u8d62\u4e86\uff09\uff1f\u6291\u6216\u6362\u56de\u4e00\u5f00\u59cb\u76842\u53f7\u673a\uff08\u4e5f\u8bb82\u53f7\u673a\u7684\u8d62\u9762\u6700\u5927\uff0c\u53ea\u662f\u8d4c\u5f92\u4e00\u65f6\u8fd0\u6c14\u4e0d\u597d\u8f93\u6389\u4e86\u51e0\u8f6e\uff09\uff1f\n\u4f5c\u8005\uff1aFilestorm\n\u94fe\u63a5\uff1ahttps://www.zhihu.com/question/19784847/answer/12953467\n\n\u6587\u4e2d\u63d0\u51fa\u7684\u7b56\u7565, \u4e0d\u53ea\u662f\u6e10\u8fdb\u7684, \u800c\u662f\u4e00\u81f4\u7684\u8fbe\u5230logarithmic regret\nMultiple-Instance Active Learning\n[Settles et al., 2008] B. Settles, M. Craven, and S. Ray.\nMultiple-instance active learning. In NIPS, pages 1289\u2013\n1296, 2008.\n\n\n\nmultiple-instance (MI)\u95ee\u9898, \u5b9e\u4f8b\u4eec\u88ab\u5206\u5272\u6210bags, \u800c\u4e0d\u518d\u662f\u72ec\u7acb\u7684\u5b9e\u4f8b. \u5bf9\u4e8eML\u95ee\u9898\u6765\u8bf4,\u6bcf\u4e2a\u5305\u90fd\u6709\u4e00\u4e2a\u8bad\u7ec3\u6807\u8bb0\uff0c\u800c\u5305\u4e2d\u7684\u793a\u4f8b\u662f\u6ca1\u6709\u6807\u8bb0\u7684\uff1b\u5982\u679c\u5305\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u6b63\u6807\u8bb0\u7684\u793a\u4f8b\uff0c\u5219\u5305\u88ab\u8d4b\u4e88\u6b63\u6807\u8bb0\uff1b\u800c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u8d1f\u6807\u8bb0\u7684\u5305\uff0c\u5176\u4e2d\u6240\u6709\u7684\u793a\u4f8b\u5747\u4e3a\u8d1f\u6807\u8bb0\u3002\uff08\u8fd9\u91cc\u8bf4\u5305\u4e2d\u7684\u793a\u4f8b\u6ca1\u6709\u6807\u8bb0\uff0c\u800c\u540e\u9762\u53c8\u8bf4\u5305\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u6b63\u6807\u8bb0\u7684\u793a\u4f8b\u65f6\u5305\u4e3a\u6b63\u6807\u8bb0\u5305\uff0c\u662f\u76f8\u5bf9\u8bad\u7ec3\u800c\u8a00\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u8bad\u7ec3\u7684\u65f6\u5019\u662f\u6ca1\u6709\u7ed9\u793a\u4f8b\u6807\u8bb0\u7684\uff0c\u53ea\u662f\u7ed9\u4e86\u5305\u7684\u6807\u8bb0\uff0c\u4f46\u662f\u793a\u4f8b\u7684\u6807\u8bb0\u662f\u786e\u5b9e\u5b58\u5728\u7684\uff0c\u5b58\u5728\u6b63\u8d1f\u793a\u4f8b\u6765\u5224\u65ad\u6b63\u8d1f\u7c7b\u522b\uff09\n\n\u5173\u4e8e\u591a\u793a\u4f8b\u95ee\u9898\u600e\u4e48\u6c42\u89e3\uff0c\u5047\u5982\u8bf4\u6240\u6709\u7684\u6837\u672c\u6807\u8bb0\u90fd\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u90a3\u5c31\u662f\u4e00\u4e2a\u76d1\u7763\u5b66\u4e60\u7684\u95ee\u9898\u4e86\uff0c\u7528SVM\uff0cadaboost\u4e4b\u7c7b\u7684\u90fd\u53ef\u4ee5\u505a\u3002\u73b0\u5728\u7684\u56f0\u96be\u662f\uff0c\u6709\u5f88\u591a\u6837\u672c\u7684\u6807\u8bb0\u6211\u4eec\u4e0d\u77e5\u9053\u3002\u5bf9\u4e8e\u8d1f\u6837\u672c\u5305\u6765\u8bf4\u5c31\u65e0\u6240\u8c13\u4e86\uff0c\u91cc\u9762\u6bcf\u4e2a\u6837\u672c\u90a3\u90fd\u662f\u8d1f\u6807\u8bb0\uff0c\u8fd9\u4e2a\u662f\u660e\u786e\u7684\u3002\u95ee\u9898\u51fa\u5728\u6b63\u6837\u672c\u5305\u4e0a\u9762\uff0c\u6bcf\u4e2a\u6b63\u6837\u672c\u5305\u91cc\u53ea\u80fd\u4fdd\u8bc1\u6709\u4e00\u4e2a\u662f\u6b63\u6837\u672c\uff0c\u5176\u4ed6\u7684\u662f\u6b63\u662f\u8d1f\u5c31\u4e0d\u77e5\u9053\u4e86\uff0c\u5173\u952e\u662f\u5230\u5e95\u662f\u54ea\u4e2a\u6837\u672c\u662f\u6b63\u7684\u5462\uff1f\u8fd9\u4e2a\u4e5f\u662f\u4e0d\u6e05\u695a\u7684\u3002\n\n\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u5176\u5b9e\u633a\u76f4\u63a5\u7684\uff1a\u8fed\u4ee3\u4f18\u5316\uff08alternative optimization)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u5148\u5047\u8bbe\u5df2\u7ecf\u77e5\u9053\u4e86\u6240\u6709\u6837\u672c\u7684\u6807\u8bb0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u76d1\u7763\u5b66\u4e60\u7684\u65b9\u6cd5\u5f97\u5230\u4e00\u4e2a\u5206\u7c7b\u6a21\u578b\uff0c\u901a\u8fc7\u8fd9\u4e2a\u6a21\u578b\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u8bad\u7ec3\u6837\u672c\u8fdb\u884c\u9884\u6d4b\uff0c\u7136\u540e\u66f4\u65b0\u5b83\u4eec\u7684\u6807\u8bb0\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u62ff\u8fd9\u4e00\u6b21\u65b0\u5f97\u5230\u7684\u6807\u8bb0\u91cd\u65b0\u8bad\u7ec3\u5206\u7c7b\u6a21\u578b\u4e86\u3002\u6240\u4ee5\u6574\u4e2a\u4f18\u5316\u8fc7\u7a0b\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u76d1\u7763\u5b66\u4e60\uff0c\u6807\u8bb0\u66f4\u65b0\u3002\n\n\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e9b\u5730\u65b9\u9700\u8981\u6ce8\u610f\uff1a\n\n\u7b2c\u4e00\u70b9\uff0c \u8bad\u7ec3\u76d1\u7763\u5b66\u4e60\u7684\u6a21\u578b\u7684\u65f6\u5019\uff0c\u53ea\u4ece\u6b63\u6837\u672c\u5305\u91cc\u6311\u9009\u88ab\u9884\u6d4b\u7684\u201c\u6700\u50cf\u6b63\u786e\u201d(\u4e5f\u5c31\u662f\u5206\u7c7b\u5f97\u5206\u6700\u9ad8)\u7684\u90a3\u4e00\u4e2a\uff0c\u6b63\u6837\u672c\u5305\u91cc\u9762\u5176\u4ed6\u7684\u6837\u672c\uff0c\u4e0d\u7ba1\u9884\u6d4b\u51fa\u6765\u662f\u6b63\u7684\u8fd8\u662f\u8d1f\u7684\u90fd\u4e0d\u8981\u4e86\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5176\u5b9e\u591a\u793a\u4f8b\u7684\u95ee\u9898\u4e5f\u53ef\u4ee5\u63cf\u8ff0\u4e3a\uff0c\u6b63\u6837\u672c\u5305\u91cc\u9762\u201c\u6700\u6b63\u786e\u201d\u7684\u4e00\u4e2a\u6837\u672c\u6807\u8bb0\u662f\u6b63\u7684\uff0c\u8ddf\u5176\u4ed6\u6837\u672c\u65e0\u5173\u3002\u6240\u4ee5\uff0c\u8fd9\u79cd\u9009\u62e9\u7b56\u7565\u6070\u6070\u662f\u7b26\u5408\u95ee\u9898\u5b9a\u4e49\u7684\u3002\n\n\u7b2c\u4e8c\u70b9\uff0c\u5982\u679c\u8d1f\u6837\u672c\u8db3\u591f\u591a\u7684\u8bdd\uff0c\u53ef\u4ee5\u53ea\u6311\u9009\u6bcf\u4e2a\u8d1f\u6837\u672c\u5305\u91cc\u9762\u88ab\u9884\u6d4b\u201c\u6700\u50cf\u6b63\u786e\"\u7684\u4e00\u4e2a\u6837\u672c\u4f5c\u4e3a\u8d1f\u6837\u672c\u8fdb\u884c\u8bad\u7ec3\uff0c\u8fd9\u6837\u5b50\u7684\u8d1f\u6837\u672c\u4e5f\u53eb\u505ahard sample\u6216\u8005most violated sample\u3002\u5b9e\u8df5\u4e0a\u6765\u8bf4\uff0c\u5b83\u4eec\u5bf9\u4e8e\u6a21\u578b\u5feb\u901f\u6536\u655b\u662f\u6700\u6709\u6548\u7684\u3002\n\nActive Learning Using Pre-clustering\n[Nguyen and Smeulders, 2004] H. T. Nguyen and A. Smeul-\nders. Active learning using pre-clustering. In ICML,\npage 79. ACM, 2004.\n\n\u901a\u5e38\u7684active learing\u6536\u96c6\u6570\u636e\u7684\u65b9\u6cd5\u662f\u9009\u62e9\u90a3\u4e9b\u9760\u8fd1\u5206\u7c7b\u8fb9\u754c\u7684\u5b9e\u4f8b, \u6587\u4e2d\u63d0\u51fa\u4e86\u5c06\u805a\u7c7b\u901aactive learing\u76f8\u7ed3\u5408\u7684\u65b9\u6cd5.\n\u8fd9\u4e2a\u7b97\u6cd5\u9996\u5148\u5728\u805a\u7c7b\u4ee3\u8868\u4e0a\u6784\u9020\u4e86\u4e00\u4e2a\u5206\u7c7b\u5668, \u7136\u540e\u5c06\u5206\u7c7b\u7ed3\u679c\u901a\u8fc7\u566a\u97f3\u6a21\u578b\u4f20\u64ad\u5230\u5176\u4ed6\u6837\u672c. \u8fd9\u4e2a\u7b97\u6cd5\u80fd\u591f\u9009\u62e9\u6700\u6709\u4ee3\u8868\u6027\u5178\u578b\u7684\u7684\u4f8b\u5b50, \u800c\u4e14\u80fd\u907f\u514d\u5728\u76f8\u540c\u7684\u805a\u7c7b\u4e2d\u91cd\u590d\u7684\u6253\u6807\u7b7e. \u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d, \u805a\u7c7b\u7531\u7c97\u5230\u7ec6, \u4ee5\u671f\u671b\u80fd\u5e73\u8861\u597d\u805a\u7c7b\u89c4\u6a21\u548c\u6807\u7b7e\u7684\u51c6\u786e\u6027.\n\u8fd1\u5e74\u6765, \u534a\u76d1\u7763\u5b66\u4e60, \u4ee5\u53ca\u5728\u5c11\u91cf\u6253\u6807\u521d\u59cb\u6570\u636e\u8eab\u4e0a\u6539\u5584\u76d1\u7763\u5b66\u4e60\u5f88\u706b. \u8bb8\u591a\u65b9\u6cd5\u6539\u8fdb\u76d1\u7763\u5b66\u4e60\u901a\u8fc7\u4f7f\u7528\u672a\u6253\u6807\u6570\u636e, \u53e6\u4e00\u4e9b\u5728\u627e\u5bfb\u597d\u7684\u7b56\u7565\u6765\u9009\u62e9\u5408\u9002\u7684\u6570\u636e\u6765\u6253\u6807.\n,\u4e5f\u5c31\u662factive learing.\n\u73b0\u4ecaactive learning\u6280\u672f\u53ef\u4ee5\u6309\u7167\u5e95\u5c42\u7684\u5b66\u4e60\u65b9\u6cd5\u5206\u7c7b, \u50cfnaive Bayes, SVM. \nnaive Bayes\u5206\u7c7b\u5668\u6709\u4e24\u4e2a\u95ee\u9898,.\u9996\u5148, \u5206\u7c7b\u5668\u5047\u8bbe\u4e86feature\u7684\u72ec\u7acb, \u901a\u5e38\u6765\u8bb2\u8fd9\u592a\u5f3a\u4e86. \u5176\u6b21, naive Bayes\u662f\u4e00\u4e2a\u57fa\u4e8elikelihood\u4f30\u8ba1\u7684\u751f\u6210\u6a21\u578b, \u5728active learing\u4e2d, \u7531\u4e8edata\u4e0d\u662f\u968f\u673a\u9009\u53d6\u7684, \u8fd9\u4e2a\u4f30\u8ba1\u901a\u5e38\u662f\u4e0d\u51c6\u786e\u7684.\n\u8981\u70b9\u662f\u53bb\u9009\u62e9\u6700\u6709\u4ef7\u503c\u7684\u8bad\u7ec3\u6570\u636e. \u8bb8\u591a\u7b97\u6cd5\u9009\u53d6\u7684\u662f\u6700\u9760\u8fd1\u5206\u7c7b\u8fb9\u754c\u4e5f\u5c31\u662f\u6700\u96be\u4ee5\u786e\u5b9a\u7684sample, \u6211\u4eec\u628a\u5b83\u53eb\u505aclosest-to-boundary\u51c6\u5219. \u4e00\u4e9b\u5176\u4ed6\u7684\u51c6\u5219\u6765\u81ea\u4e8eSVM, \u9009\u62e9\u90a3\u4e9b\u80fd\u591f\u6700\u5927\u7a0b\u5ea6\u51cf\u5c0fmargin\u7684\u4f8b\u5b50.\nclosest-to-boundary\u65b9\u6cd5\u5ffd\u7565\u4e86\u5bf9active learing\u5f88\u6709\u5e2e\u52a9\u7684\u5148\u9a8c data distribution. \n\u672c\u6587\u4e2d, \u805a\u7c7b\u7684\u4fe1\u606f\u5728\u4e24\u4e2a\u65b9\u9762\u4e0a\u5e2e\u52a9\u4e86active Learning: \u9996\u5148, \u4f4d\u4e8e\u805a\u7c7b\u4e2d\u5fc3\u7684\u4ee3\u8868sample\u66f4\u52a0\u91cd\u8981, \u5e94\u8be5\u4f18\u5148\u9009\u62e9\u53bb\u6253\u6807; \u5176\u6b21, \u4f4d\u4e8e\u540c\u4e00\u805a\u7c7b\u7684sample\u53ef\u80fd\u5e94\u8be5\u5177\u6709\u76f8\u540c\u7684\u6807\u7b7e, \u8fd9\u6837\u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u6253\u6807\u6570\u91cf.\nActive Learning by Querying Informative and Representative Examples\n[Huang et al., 2010] S.-J. Huang, R. Jin, and Z.-H. Zhou.\nActive learning by querying informative and representa-\ntive examples. In NIPS, pages 892\u2013900, 2010.\n\n\u8fd9\u7bc7\u662f\u5468\u5fd7\u534e\u8001\u5e08\u7684, \u60f3\u60f3\u6211\u4e5f\u662f\u770b\u7740\u897f\u74dc\u4e66\u624d\u7b97\u6b63\u5f0f\u5165\u95e8\u7684.\n\u5927\u591a\u6570active learning\u65b9\u6cd5\u9009\u62e9informative\u6216\u8005representative\u7684\u672a\u6253\u6807\u5b9e\u4f8b\u53bb\u67e5\u8be2\u5b83\u4eec\u7684\u6807\u7b7e. \u867d\u7136\u5df2\u7ecf\u6709\u7b97\u6cd5\u5c06\u8fd9\u4e24\u8005\u7ed3\u5408\u8d77\u6765\u67e5\u8be2, \u4f46\u4ed6\u4eec\u901a\u5e38\u662fad hoc(\u70b9\u5bf9\u70b9,\u7279\u522b\u7684)\u7684\u53bb\u627e\u53c8informative\u53c8representative.\n\u672c\u6587, \u4ece\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6c60\u4e2d\u9009\u62e9\u4e00\u4e2a\u672a\u6253\u6807\u5b9e\u4f8b\u53bb\u624b\u52a8\u6253\u6807, pool-based\u57fa\u4e8e\u6c60\u5316\u7684active learning. \u4e24\u4e2a\u4e3b\u8981\u7684\u51c6\u5219, informativeness &amp; representativeness. informativeness\u8861\u91cf\u4e86\u4e00\u4e2a\u5b9e\u4f8b\u51cf\u5c11\u7edf\u8ba1\u6a21\u578b\u4e0d\u786e\u5b9a\u6027\u7684\u80fd\u529b, \u800crepresentativeness\u8861\u91cf\u4e86\u4e00\u4e2a\u5b9e\u4f8b\u662f\u5426\u80fd\u591f\u5f88\u597d\u7684\u4ee3\u8868\u672a\u6253\u6807\u6570\u636e\u6574\u4f53pattern\u7684\u80fd\u529b. \u5927\u591a\u6570active learning\u7b97\u6cd5\u90fd\u53ea\u5173\u6ce8\u4e86\u5176\u4e2d\u7684\u4e00\u70b9: \u5173\u6ce8informativeness\u901a\u5e38\u4e0d\u80fd\u5229\u7528\u672a\u6253\u6807\u6570\u636e\u7684\u7ed3\u6784\u4fe1\u606f, \u4ea7\u751fbias, \u5f97\u5230\u4e0d\u597d\u7684performance; \u5173\u6ce8representativeness, \u9700\u8981\u5728\u5f97\u51fa\u6700\u4f18\u5206\u7c7b\u8fb9\u754c\u4e4b\u524d\u5c31\u67e5\u8be2\u5927\u5927\u5927\u5927\u5927\u91cf\u7684\u5b9e\u4f8b.\nQUerying Informative and Representative Examples -&gt; QUIRE method\n\u57fa\u4e8emin-max view of active learning. \u8861\u91cf\u4e86\u4e00\u4e2a\u5b9e\u4f8b\u7684 informativeness and representativeness, informativeness\u7531\u57fa\u4e8e\u5df2\u6253\u6807\u6570\u636e\u7684\u4f30\u8ba1,  representativeness\u7531\u57fa\u4e8e\u672a\u6253\u6807\u7684\u6570\u636e\u4f30\u8ba1.\n\u6240\u8c13informativeness &amp; representativeness\n\n\u5177\u4f53\u6765\u8bf4\n\n\nToward optimal active learning through monte carlo estimation of error reduction\nExisting active learning approaches can be categorized as using a single annotator [Roy and McCallum, 2001] or using multiple annotators [Dekel et al., 2012].\n\n[Roy and McCallum, 2001] N. Roy and A. McCallum. To-\nward optimal active learning through monte carlo estima-\ntion of error reduction. ICML, 2001.\n\n\u4f20\u7edf\u7684\u76d1\u7763\u5b66\u4e60\u4e2d, \u65e0\u8bba\u662f\u4ec0\u4e48\u6837\u7684training data\u90fd\u53bb\u7528\u6765train parameters. \u4e0e\u4e4b\u76f8\u53cd, active learning\u81ea\u7531\u7684\u53bb\u9009\u62e9\u54ea\u4e9b\u6570\u636e\u80fd\u52a0\u5165\u8fdbtraining set\u4e2d. \u4e00\u4e2aactive learning\u7b97\u6cd5\u901a\u5e38\u4ece\u5f88\u5c11\u7684\u6253\u5df2\u6807\u6570\u636e\u5f00\u59cb, \u5c0f\u5fc3\u7684\u9009\u62e9\u9700\u8981\u6253\u6807\u7684\u6570\u636e, \u4ece\u8fd9\u4e9b\u4e4b\u4e2d\u5f97\u5230\u7ed3\u679c, \u5728\u4f7f\u7528\u65b0\u5f97\u5230\u7684\u77e5\u8bc6\u53bb\u5bfb\u6c42\u4e0b\u4e00\u6b65\u6253\u6807\u7684\u6570\u636e. \u8fd9\u6837, \u5c31\u80fd\u671f\u671b\u4ee5\u4e00\u4e2a\u5c0f\u7684labled set\u5f97\u5230\u597d\u7684performance. \u5c24\u5176\u662f, \u5f53\u672a\u6253\u6807\u6570\u636echeap &amp; plentiful, \u6253\u6807\u8fd9\u4ef6\u4e8b\u53c8\u8270\u96be\u800c\u4e14\u82b1\u65f6\u95f4.\n\u8fd9\u7bc7paper\u63d0\u51fa\u7684\u65b9\u6cd5\u662f, \u4ee5\u6700\u5c0f\u5316\u672a\u6765\u6d4b\u8bd5\u96c6\u4e0a\u7684error\u4f5c\u4e3a\u6700\u4f18\u51c6\u5219, \u4f46\u662f, \u4f7f\u7528\u8499\u5361\u4f30\u8ba1\u53bb\u89e3\u51b3practicality problem. future error rate\u7684\u4f30\u8ba1,  either by log-loss,using the entropy of the posterior class distribution on a sample of the unlabelled examples, or by 0-1 loss, using the posterior probabilities of the most probable class for the sampled unlabelled examples.\n\u6bcf\u8f6e\u4e4b\u540e, \u9009\u53d6\u4e00\u4e2asample\u53bb\u6253\u6807, \u7136\u540e\u518d\u53bb\u4f30\u8ba1future error rate\n\u4ec5\u4ec5\u6dfb\u52a0\u4e00\u4e2asample\u7684\u8bad\u7ec3, \u5176\u5b9e\u53ef\u4ee5\u662f\u5f88\u6709\u6548\u7684, \u60f3\u4e00\u60f3SVM\u5c31\u80fd\u660e\u767d\n\n5. Selective sampling and active learning from single and multiple teachers\nExisting active learning approaches can be categorized as using a single annotator [Roy and McCallum, 2001] or using multiple annotators [Dekel et al., 2012].\n\n[Dekel et al., 2012] O. Dekel, C. Gentile, and K. Sridharan.\nSelective sampling and active learning from single and\nmultiple teachers. JMLR, 13(1):2655\u20132697, 2012.\n\n\u8fd9\u7bc7\u670940+\u9875 \ud83e\udd26\ud83e\udd26\ud83e\udd26\ud83e\udd26\ud83e\udd26\ud83e\udd26\ud83e\udd26\ud83e\udd26\u6682\u65f6\u5148\u770b\u4e2a\u5927\u6982\u5427\n\u4e00\u4e2a\u65b0\u7684online learning algorithm(\u53eb\u5728\u7ebf\u5b66\u4e60\u600e\u4e48\u611f\u89c9\u8fd9\u4e48\u522b\u626d)\u9009\u62e9sampling\u7684\u6846\u67b6, \u5176\u4e2dlabel\u5728\u63ed\u793a\u4e4b\u524d\u5fc5\u987b\u88ab\u4e3b\u52a8\u67e5\u8be2\u8fc7(where labels must be actively queried before they are revealed).\u5bf9regret,\u4ee5\u53ca\u67e5\u8be2lable\u7684\u6570\u91cf(when faced with an adaptive adversarial strategy of generating the instances)\u505a\u4e86\u9650\u5236. \u591a\u6559\u5e08\u60c5\u5f62\u4e0b, \n\u7531\u4eba\u624b\u5de5\u751f\u6210label\u662f\u5f88expensive\u7684. active learning\u7684\u8303\u5f0f\u662f\u5efa\u7acb\u8fd9\u6837\u4e00\u4e2a\u6982\u5ff5: \u6211\u4eec\u5e94\u8be5\u53ea\u53bb\u53d6\u5f97\u90a3\u4e9b\u80fd\u591f\u5207\u5b9e\u7684\u6539\u8fdbprediction\u7684label.\nonline selective sampling:  a repeated game between a learner and an adversary. ~\u770b\u4e86\u8fd9\u4e2aonline selective sampling setting\u7684\u6982\u5ff5, \u6709\u70b9GAN\u7684\u611f\u89c9~\n\u5728\u7b2c$t$\u8f6e, adversary\u7ed9learner\u4e00\u4e2a\u5b9e\u4f8b$x\\_t$, \u7136\u540elearner\u56de\u5e94\u4e00\u4e2a\u9884\u6d4b\u7684\u4e8c\u5206\u7c7blabel$-1 ,+1$. learner\u548c\u4e00\u4e2a\u77e5\u9053\u6bcf\u4e2a\u5b9e\u4f8b\u6b63\u786elabel\u7684teacher\u76f8\u8fde\u63a5. learner\u5fc5\u987b\u8981\u53bb\u51b3\u5b9a\u662f\u5426\u53bb\u82b1\u8d39\u5355\u4f4dcost\u53bb\u5411teacher\u67e5\u8be2\u6b63\u786e\u7684label. \u5982\u679clearner\u51b3\u5b9a\u53bb\u67e5\u8be2,  \u5c31\u80fd\u5f97\u5230\u6b63\u786elabel\u7136\u540e\u6539\u8fdb\u4ee5\u540e\u7684\u9884\u6d4b. \u5f53\u6211\u4eec\u8981\u53bb\u8861\u91cf\u9884\u6d4b\u7684accuracy\u65f6, \u6211\u4eec\u8981\u8003\u5bdf\u6240\u6709\u7684label, \u65e0\u8bba\u662f\u5426\u88ab\u67e5\u8be2\u8fc7. learner\u6709\u4e24\u4e2a\u76ee\u6807: \u7cbe\u51c6\u9884\u6d4b\u548c\u5c11\u91cf\u67e5\u8be2\nThe Single Teacher Case\n\u6211\u4eec\u7684\u5047\u8bbe\u53ea\u6709$||x|| \nThe single teacher algorithm is a margin-based selective sampling procedure\nThe Multiple Teacher Case\nK\u4e2ateacher, \u6bcf\u4e2a\u90fd\u6709\u81ea\u5df1\u4e0d\u540c\u7684expertise, \u800c\u7b97\u6cd5\u5e76\u4e0d\u77e5\u9053teacher\u5177\u4f53\u7684\u60c5\u51b5, \u53ea\u80fd\u591f\u4eceteacher\u63d0\u4f9b\u7684label\u4e2d\u63a8\u65ad. \u7ecf\u8fc7\u4e00\u7cfb\u5217\u5224\u65ad, \u5728\u9762\u5bf9\u65b0\u7684\u67e5\u8be2\u65f6, \u7b97\u6cd5\u8981\u51b3\u5b9a\u628a\u8fd9\u4e2a\u67e5\u8be2\u53d1\u9001\u7ed9\u54ea\u4e9bteacher\u66f4\u4e3a\u5408\u9002. \u6ce8\u610f\u8fd9\u91cc, teacher\u63d0\u4f9b\u7684\u4ec5\u4ec5\u662f\u4e00\u4e2a\u4e8c\u5206\u7c7blabel, \u800c\u4e0d\u662f\u63a8\u65adreliability rate. \u867d\u7136\u8fd9\u6837\u770b\u8d77\u6765\u66f4\u52a0\u53ef\u9760.\n\u90a3\u4e3a\u5565\u4e0d\u53bb\u8fd9\u4e48\u505a\u554a\n\u6bcf\u4e2ateacher\u90fd\u6709\u4e00\u4e2a\u9690\u85cf\u7684confidence\n\u73b0\u5728, \u5c31\u4e0d\u592a\u5bb9\u6613\u53bb\u8861\u91cflearner\u7684performance\u4e86, \u56e0\u4e3aK\u4e2ateacher\u7ed9\u51fa\u7684\u7ed3\u679c\u6709\u6b63\u6709\u8d1f, \u5c31\u8bbe\u5b9a\u4e00\u4e2aconfidence\u7684\u9650\u754c, \u53ea\u9009\u53d6\u90a3\u4e9b\u6709expertise\u800c\u8db3\u591f\u81ea\u4fe1\u7684teacher.\n\nEnsemble methods: foundations and algorithms\nThe former is regarded as traditional active learning and the latter, which is essentially a kind of ensemble method [Zhou, 2012].(\u6307\u7684\u662f\u591a\u6559\u5e08))\n\n[Zhou, 2012] Z.-H. Zhou. Ensemble methods: foundations\nand algorithms. CRC Press, 2012.\n\u96c6\u6210\u65b9\u6cd5\u8bba, \u4e00\u672c\u5927\u90e8\u5934, \u5176\u4e2dboosting\u548cbagging\u4e24\u7ae0\u627e\u65f6\u95f4\u770b\u770b\u5427\n\nActive Visual Recognition with Expertise Estimation in Crowdsourcing\nHence, estimating the expertise of candidate annotators plays a key role\nin ALC algorithms. So far, much effort has been made toward\nthis purpose [Long et al., 2013] [Yan et al., 2011].\n\n[Long et al., 2013] C. Long, G. Hua, and A. Kapoor. Ac-\ntive visual recognition with expertise estimation in crowd-\nsourcing. In ICCV, pages 3000\u20133007. IEEE, 2013.\n\n\u867d\u7136\u901a\u8fc7\u4f17\u5305\u53ef\u4ee5\u5f88cheap\u7684\u5927\u91cf\u5f97\u5230labeled\u7684\u6570\u636e, \u4f46\u6536\u96c6\u5230\u7684lable couldbe very noisy. \u6240\u4ee5\u9700\u8981\u5bf9\u6253\u6807\u8005expertise\u8fdb\u884c\u8861\u91cf. \u9ad8\u6c34\u5e73\u7684\u6253\u6807\u8005\u66f4\u4e0d\u5bb9\u6613\u4ea7\u751flabel noises\n\u4e4b\u524d\u7684\u5173\u4e8e\u6253\u6807\u8005expertise\u5efa\u6a21\u4e3b\u8981\u5206\u4e24\u79cd:\n\n\u901a\u8fc7\u91c7\u7528\u4e00\u4e2a\u9884\u5148\u6253\u597d\u6807\u7684gold standard dataset \u6015\u4e0d\u662f\u91d1\u6807\u751f\u62bd\u54df \u6765\u8bc4\u4f30labelers. \u5f53\u4e00\u4e2alabeler\u80fd\u6301\u7eed\u56de\u7b54\u51fa\u4e0e\u91d1\u6807\u6570\u636e\u96c6\u76f8\u6096\u7684\u7b54\u6848\u65f6, \u5c31\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u4e2alabeler\u7684\u7b54\u6848\u4e0d\u9760\u8c31\n\u4ece\u591a\u4e2alabeler\u4e2d\u83b7\u5f97\u5168\u90e8data sample\u7684\u56de\u7b54, \u7136\u540e\u5b9e\u65f6\u6216\u8005\u540e\u671fvote. \u8fd9\u9700\u8981\u5927\u591a\u6570\u7684labeler\u90fd\u5f88\u9760\u8c31\n\n\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5982\u6211\u4eec\u6240\u613f\u7684\u8bd5\u8bd5\u8bc4\u4f30labelers, \u4f46\u662f\u9700\u8981\u9884\u6253\u6807\u7684\u6570\u636e\u96c6. \u7b2c\u4e8c\u5f88\u6e05\u6670\u7684\u8bc4\u4f30\u79cd\u65b9\u6cd5, \u5219\u662f\u5173\u6ce8label\u7684noise. \u4ed6\u5e76\u6ca1\u6709\u5f88\u660e\u6670\u5730\u53bb\u8bc4\u4f30labeler.\u4f46\u4ed6\u4eec\u90fd\u5f88ad hoc \u5927\u6982\u8fd9\u91cc\u53ef\u4ee5\u8ba4\u4e3a\u662f \u4e13\u6709\u7684 ?, \u7f3a\u4e4f\u4e00\u4e2a\u5c06labelers\u7684\u5168\u5c40\u8bef\u5dee\u548cexpertise\u6c34\u5e73\u7ed3\u5408\u8d77\u6765\u7684\u65b9\u6cd5.\n\u672c\u6587\u5728\u6ca1\u6709\u91d1\u6807\u6570\u636e\u96c6\u7684\u60c5\u51b5\u4e0b, \u63d0\u51fa\u4e86\u4e00\u4e2aBayesian\u6a21\u578b, \u7528\u6765\u5b66\u4e60\u57fa\u4e8emultiple noisy labels\u7684\u9ad8\u65af\u8fc7\u7a0b\u5206\u7c7b\u5668. \u5176\u6b21, \u6784\u5efa\u4e86an active classifier learning system which determines which users to label which unlabeled examples, \u4e0d\u4ec5\u53ef\u4ee5\u9009\u62e9sample, \u66f4\u53ef\u4ee5\u4e3a\u5176\u9009\u62e9\u5408\u9002\u7684labeler\n\n8. Active Learning from Crowds\nThe former is regarded as traditional active learning and the latter, which is essentially a kind of ensemble method [Zhou, 2012].(\u6307\u7684\u662f\u591a\u6559\u5e08))\n\n[Yan et al., 2011] Y. Yan, G. M. Fung, R. Rosales, and J. G.\nDy. Active learning from crowds. In ICML, pages 1161\u2013\n1168, 2011.\n\n\n\u53bb\u6536\u96c6\u4e00\u4e2a golden ground-truth, \u5728\u4e00\u4e9b\u95ee\u9898\u4e2d\u662f\u5f88\u96be\u751a\u81f3\u4e0d\u53ef\u80fd\u7684.\n\u4e00\u4e2aannotator\u4e0d\u4e00\u5b9a\u80fd\u591f\u6709\u80fd\u529b\u51c6\u786e\u6807\u6ce8\u6240\u6709\u7684data\n\u6709\u4e9b\u65f6\u5019, \u4ece\u8bb8\u591a\u4e0d\u662f\u90a3\u4e48\u4e13\u4e1a\u7684annotator\u4e2d\u5f97\u51fa\u7ed3\u679c, \u4f1a\u6bd4\u4ece\u4e00\u4e2a\u4e13\u5bb6\u5f97\u5230\u7ed3\u679c\u66f4cheap\n\u5408\u4f5c\u548c\u77e5\u8bc6\u5171\u4eab, \u4f7f\u5f97\u7ed3\u5408\u591aannotator\u7684\u6280\u672f\u4f1a\u66f4\u5fc5\u8981 \u8fd9\u8bdd\u597d\u7a7a\n\n\u5982\u679c\u6211\u4eec\u60f3\u8981\u6709\u6548\u7684\u6807\u8bb0(learn the most at a given cost), \u4f20\u7edf\u7684\u76d1\u7763\u5b66\u4e60\u53ea\u9700\u8981\u627e\u51fa\u90a3\u4e2a\u6700\u6709\u7528\u7684data point. \u4f46\u5728\u5982\u4eca\u7684\u591alabeler\u60c5\u666f\u4e0b, \u5c31\u9762\u4e34\u7740\u4e00\u4e2a\u95ee\u9898: \u591a\u6559\u5e08\u60c5\u51b5\u4e0b, \u8fd9\u4e2a'\u6700'\u8be5\u600e\u4e48\u786e\u7acb\n\u672c\u6587\u5173\u952e\u5c31\u662f\u6211\u4eec\u662f\u5426\u80fd\u591f\u4e3a\u4e00\u4e2a\u7279\u5b9a\u7684task\u9009\u62e9\u5408\u9002\u7684labeler\n\u4f18\u5316\u5206\u4e24\u6b65, \u5148\u9009\u70b9, \u518d\u4ee5\u6b64\u70b9\u53bb\u9009labeler\n\nWhich new training point to pick?\n \u6700\u7b80\u5355\u7684\u7b56\u7565\u5c31\u662f uncertainty sampling, \u9009\u90a3\u4e9b\u6211\u4eec\u6700\u4e0d\u786e\u5b9a\u7684. \u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u4e8c\u5206\u7c7b\u7b56\u7565\u4e2d, \u9009\u6982\u7387\u63a5\u8fd11/2\u7684\u90a3\u4e9b. \nWhich expert to pick?\n \u6309confidence\u53bb\u627e.  optimization\u65b9\u9762, \u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2abi-convex\u95ee\u9898, \u5c31\u80fd\u4f7f\u7528\u725b\u987f\u6cd5\u53bb\u505a\u4f18\u5316\u4e86\n\nGet Another Label? Improving Data Quality and Data Mining Using Multiple, Noisy Labelers\nFirst, in their pioneering work, Sheng and Provost [Sheng\netal., 2008]assume that an annotator gives correct labels with\na certain probability, and the probability is assumed to be the\nsame for all annotators in all instances.\n\n[Sheng et al., 2008] V. S. Sheng, F. Provost, and P. G. Ipeiro-\ntis. Get another label? improving data quality and da-\nta mining using multiple, noisy labelers. In KDD, pages\n614\u2013622. ACM, 2008.\n\n\u8fd9\u7bc7\u8bb2\u7684\u662f\u6211\u4e4b\u524d\u5f88\u5728\u610f\u7684\u4e00\u4e2a\u70b9, \u600e\u4e48\u4ece\u5927\u91cflabeled\u4f46\u662flabelers\u53ef\u80fd\u5e76\u4e0d\u5177\u6709\u5f88\u5f3a\u7684expertise\u7684data\u4e2d\u5f97\u5230\u7ed3\u679c. \u5c31\u6982\u5ff5\u4e0a\u6765\u8a00\u5f88\u6709\u79cdensemble\u7684\u611f\u89c9.\n\u770b\u5230\u8fd9\u91cc\u6709\u4e2aidea, \u4eceALCU\u60f3\u5f00, \u8981\u662f\u4e00\u4e2a\u6ca1\u6709\u5f88\u591aexpertise\u7684labeler, \u5728\u5b83\u4e0d\u719f\u6089\u7684\u9886\u57df\u505a\u51fa\u4e86\u786e\u5207\u56de\u7b54, \u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u6709\u4e00\u4e2a\u8f83\u9ad8\u7684\u6982\u7387\u76f8\u4fe1\u4ed6\u662f\u6b63\u786e\u7684\n\u91cd\u590d\u6253\u6807, \u53ef\u4ee5\u505a\u5230\n\n\u91cd\u590d\u6253\u6807\u53ef\u4ee5\u6539\u5584\u6807\u7b7e\u8d28\u91cf\u548c\u6a21\u578b\u8d28\u91cf, \u4f46\u5e76\u4e0d\u603b\u662f\u6709\u6548\u7684\n\u5f53label\u662fnoisy\u7684, \u91cd\u590d\u6253\u6807\u6bd4\u5355\u72ec\u6253\u6807\u66f4\u53ef\u53d6, \u5373\u4f7f\u662f\u5728\u4f20\u7edf\u7684labeling\u5e76\u4e0dcheap\u7684\u60c5\u5f62\n\u53ea\u8981\u52a0\u5de5\u6253\u6807\u6570\u636e\u7684cost\u4e0d\u662ffree\u7684, \u5373\u4f7f\u4e3a\u6240\u6709\u90fd\u591a\u6b21\u6253\u6807\u8fd9\u6837\u7b80\u5355\u7684\u7b56\u7565\u90fd\u53ef\u4ee5\u5f97\u5230\u53ef\u89c2\u7684\u6539\u5584\n\u4e3a\u4e00\u4e2a\u5c0f\u5fc3\u9009\u62e9\u7684data\u91cd\u590d\u6253\u6807\u901a\u5e38\u6765\u8bb2\u662f\u66f4\u597d\u7684, we present a robust technique that combines different notions of uncertainty to select data points for which quality should be improved. \n\nThis paper focuses on problems where it is possible to ob-\ntain certain (noisy) data values (\u201clabels\u201d) relatively cheaply,\nfrom multiple sources (\u201clabelers\u201d). \u5176\u5b9e\u4e5f\u8fd8\u662f\u591a\u6559\u5e08. \u6211\u4eec\u8be5\u600e\u4e48\u53bb\u5229\u7528\u8fd9\u4e00\u7968noisy, non-expert\u7684label\u5462.\n\u9762\u5bf9noisy\u7684\u6807\u7b7e\u65f6, \u968f\u7740\u9884\u5904\u7406\u7684cost\u548c\u6253\u6807\u7684cost\u7684\u6bd4\u7387\u7684\u63d0\u793a, \u91cd\u590d\u6253\u6807\u8fd9\u4e2a\u60f3\u6cd5\u5c31\u5f88\u81ea\u7136\u4e86: \u4e3a\u90e8\u5206\u6216\u8005\u6240\u6709\u7684data\u591a\u6b21\u6253\u6807. \u672c\u6587\u5173\u6ce8whether, when, which(data)\u8fd9\u4e09\u70b9.\n\n\u9010\u6e10\u51cf\u5f31\u5047\u8bbe, \u8bc4\u4f30\u91cd\u590d\u6253\u6807\u7684\u5f71\u54cdon the quality of the resultant labels, \u7531labelers\u5404\u81ea\u7684confidence\u51b3\u5b9a.\n\u5ffd\u7565the cost of obtaining the unlabeled part of a data point, \u91cd\u590d\u6253\u6807\u4e5f\u80fd\u591f\u6709\u51e0\u500d\u7684\u6539\u8fdb\n\n\u82e5\u6bcf\u4e2alabers\u90fd\u6709\u81ea\u5df1\u7684qualities, \u90a3\u4e48, \u662f\u9009\u62e9\u6700\u597d\u7684\u90a3\u4e2a, \u8fd8\u662f\u7528\u591a\u4e2a? \u76f4\u89c2\u5730\u60f3, \u4fe1\u606f\u591a\u5e94\u8be5\u4f1a\u6709\u4e2a\u597d\u7ed3\u679c. \u4e8b\u5b9e\u4e0a\u4e5f\u662f\u5982\u6b64.\nvoting:\n\u5927\u591a\u6570vote\u65b9\u6cd5\u90fd\u5f88\u76f4\u63a5, \u4f46\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u7f3a\u70b9: \u6807\u7b7e\u7684\u4e0d\u786e\u5b9a\u6027\u4e22\u5931.\n\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837, assigns a weight 1/L, where L is the number of occurrences of this label in L.\nEfficiently learning the accuracy of labeling sources for selective sampling\nThesecondtypeofALCmethods[Longetal., 2013][Don-\nmez et al., 2009] [Zhao et al., 2014] does not assume all an-\nnotators will be have exactly the same.\n\n[Donmez et al., 2009] P. Donmez, J. G. Carbonell, and\nJ. Schneider. Efficiently learning the accuracy of labeling\nsources for selective sampling. In KDD, pages 259\u2013268.\nACM, 2009.\n\n\u518d\u8bb8\u591a\u7684\u6570\u636e\u6316\u6398\u5e94\u7528\u4e2d, \u4e3atraining set\u5f97\u5230label\u662f\u4e2a\u5f88\u5bb9\u6613\u51fa\u9519\u7684\u8fc7\u7a0b, noisy\u7684\u4ea7\u751f\u53ef\u80fd\u6709\u5f88\u591a\u539f\u56e0, \u6bd4\u5982\u4e3b\u89c2\u60f3\u6cd5\u7684\u4ecb\u5165, \u6570\u636e\u4f9d\u8d56, \u4e0d\u5408\u9002\u7684\u7279\u5f81\u7b49\u7b49. \u5728\u591a\u6559\u5e08\u60c5\u5f62\u4e0b, \u7531\u4e8eannotator\u7684\u6c34\u5e73\u65e0\u6cd5\u63a7\u5236, class noise\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u95ee\u9898. \u672c\u6587, \u6211\u4eec\u76f4\u9762\u4e86\u8fd9\u6837\u7684\u6311\u6218, \u4ee5\u591a\u4e2a\u4e0d\u786e\u5b9a\u5176expertise\u7684noisy labeler\u4e3a\u57fa\u7840\u53bb\u4e3b\u52a8\u6253\u6807. \u76ee\u6807\u662f\u4f30\u8ba1\u6bcf\u4e2alaber\u7684\u51c6\u786e\u6027\u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u4f30\u8ba1\u53bb\u9009\u62e9\u6700\u597d\u7684labelers\u56de\u7b54\u5bf9\u5e94\u7684\u63d0\u95ee. \u4f46\u662f, \u8981\u60f3\u7b97\u51fa\u6765\u4e00\u4e2a\u786e\u5207\u7684reward function\u662f\u4e0d\u53ef\u80fd\u7684\u56e0\u4e3a\u771f\u6b63\u7684\u6807\u7b7e\u6211\u4eec\u5e76\u4e0d\u77e5\u9053(\u770b\u6765\u8fd9\u662f\u6ca1\u6709\u91d1\u6807\u6570\u636e\u96c6\u76f4\u63a5\u4ecelabelers\u56de\u7b54\u4e2d\u603b\u7ed3\u7b54\u6848). \u6211\u4eec\u5047\u8bbe\u8fd9\u4e9blabeler\u81f3\u5c11\u67090.5\u7684\u6b63\u786e\u7387, \u7136\u540e\u6211\u4eec\u9009\u62e9\u90a3\u4e9b\u5927\u591a\u6570\u7684\u6807\u7b7e\u5f53\u4f5c\u7b54\u6848.\nidea, \u5b9e\u9645\u4e0a, \u4f1a\u4e0d\u4f1a\u6709\u8fd9\u79cd\u53ef\u80fd, \u9762\u5bf9\u67d0\u4e2a\u95ee\u9898, \u7684\u786e\u662f\u4f1a\u6709\u5927\u591a\u6570\u4eba\u90fd\u56de\u7b54\u9519\u8fd9\u79cd'\u96be\u9898'\u5b58\u5728, \u80fd\u4e0d\u80fd\u68c0\u6d4b\u51fa\u6765\u8fd9\u79cd\u60c5\u51b5\u518d\u4ea4\u7ed9expert\u53bb\u56de\u7b54?\n11. An Active Learning Approach for Jointly Estimating Worker Performance and Annotation Reliability with Crowdsourced Data\nThesecondtypeofALCmethods[Longetal., 2013][Don-\nmez et al., 2009] [Zhao et al., 2014] does not assume all an-\nnotators will be have exactly the same.\n\n[Zhao et al., 2014] L. Zhao, Y. Zhang, and G. Sukthankar.\nAn active learning approach for jointly estimating worker\nperformance and annotation reliability with crowdsourced\ndata. arXiv preprint, 2014.\n\n\u4e24\u70b9\u6311\u6218: \u6709\u9650\u7684annotator\u4eba\u5458, label noise. \u5373\u4f7f\u6bcf\u4e2aannotator\u662f\u975e\u5e38cheap\u7684, \u4f46\u662f\u603b\u4f53cost\u4f1a\u9189\u7740\u8bf7\u6c42\u6807\u7b7e\u91cf\u7684\u63d0\u793a\u4f1a\u5feb\u901f\u589e\u957f.\n\u672c\u6587\u4e2d, \u4f7f\u7528\u4e86\u8981\u7ed9\u5173\u4e8e Labels, Abilities, and Difficulties \u7684\u751f\u6210\u6a21\u578b, \u4f7f\u7528EM\u7b97\u6cd5\u6765\u5b66\u4e60\u53c2\u6570.\n\nEfficiently learning the accuracy of labeling sources for selective sampling.\nIn [Donmez et al., 2009] and [Long et al., 2013],\nall instances are assumed to be of the same difficulty, and\ndifferent methods are proposed to estimate the reliability of\nannotators.\n\n[Donmez et al., 2009] P. Donmez, J. G. Carbonell, and\nJ. Schneider. Efficiently learning the accuracy of labeling\nsources for selective sampling. In KDD, pages 259\u2013268.\nACM, 2009.\n\n\u4e3b\u8981\u5728\u8861\u91cflabeler\u7684\u53ef\u9760\u6027. \n\u5c31\u662f\u8fd9\u7bc7\u6587\u7ae0\u63d0\u51fa\u4e86\u63d0\u51fa\u4e86IEThresh (Interval Estimate  )\n\nActive Learning from Multiple Knowledge Sources\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "A", "slug": "A", "permalink": "/tag/A/"}, {"name": "L", "slug": "L", "permalink": "/tag/L/"}, {"name": "C", "slug": "C", "permalink": "/tag/C/"}]}, {"title": "Deep-Learning-Papers-Reading-Roadmap Notes Part 1", "date": "2017-08-02T13:27:54-00.00", "path": "/archives/Deep-Learning-Papers-Reading-Roadmap Notes Part 1/", "text": "https://github.com/songrotek/Deep-Learning-Papers-Reading-Roadmap\n1.1 Survey\n[1] LeCun, Yann, Yoshua Bengio, and Geoffrey Hinton. \"Deep learning.\" Nature 521.7553 (2015): 436-444. [pdf] (Three Giants' Survey) \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\n\n\nNatureDeepReview\n\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u5c40\u9650\u4e8e\u62bdfeature.\nRepresentation learning, \u8868\u5f81\u5b66\u4e60\u53ef\u4ee5\u8ba9\u673a\u5668\u4ece\u539f\u59cb\u6570\u636e\u51fa\u53d1\u81ea\u52a8\u5f97\u51farepresentation.\nDL\u628a\u5b83\u8f6c\u5316\u5230\u4e86\u4e00\u4e2a\u66f4\u52a0\u62bd\u8c61\u7684level.\nSupervised learning\n\u76d1\u7763\u5b66\u4e60\u662f\u673a\u5668\u5b66\u4e60\u6700\u901a\u5e38\u7684\u5f62\u5f0f. \u7136\u540e\u4e3e\u4e86\u4e00\u4e2a\u56fe\u7247\u5206\u7c7b\u7684\u4f8b\u5b50, \u7136\u540e\u91c7\u7528\u68af\u5ea6\u6cd5\u53bb\u6539\u53d8weight.\n\u5b9e\u4f5c\u65f6, \u7528SGD. \u8fd9\u91cc'\u968f\u673a'\u7684\u610f\u601d\u662f, \u6bcf\u4e00\u4e2a\u5c0f\u7684set of example\u90fd\u5bf9\u6574\u4e2a\u96c6\u4e0a\u9762\u7684\u5e73\u5747\u68af\u5ea6\u7ed9\u51fa\u4e86noisy estimate. \u8fd9\u91cc\u6211\u7684\u7406\u89e3\u5c31\u662f, \u7528\u62bd\u6837\u7684\u8868\u73b0\u53bb\u62df\u5408\u6574\u4e2a\u6837\u672c\u7684\u8868\u73b0, \u4e5f\u5bfc\u81f4\u4e86\u6bcf\u6b21\u8fed\u4ee3\u5e76\u4e0d\u4e00\u5b9a\u662f\u5411\u7740\u6574\u4f53\u6700\u4f18\u65b9\u5411\u53bb\u7684.\n\u7ebf\u6027\u5206\u7c7b\u5668\u7684\u6548\u679c\u4e0d\u597d. \u8fd9\u4e2ashadow\u5206\u7c7b\u5668\u5c31\u4f9d\u8d56\u4e8e\u7279\u5f81\u63d0\u53d6.\u4e3a\u4e86\u6539\u8fdb\u5206\u7c7b\u5668, \u6709\u4eba\u7784\u4e0a\u4e86\u901a\u7528\u7684\u975e\u7ebf\u6027feature, \u4e5f\u5c31\u662f\u6838\u65b9\u6cd5.\nBackpropagation to train multilayer architectures\n\u5148\u7b80\u8ff0\u4e86\u4e00\u4e0bBP\u7b97\u6cd5\u7684\u601d\u60f3, \u4e5f\u5c31\u662f\u94fe\u5f0f\u6cd5\u5219\u561b. \u7136\u540e\u8bf4\u4e86\u4e0b\u6fc0\u6d3b\u51fd\u6570, sigmoid\u548crelu.\n\u7136\u540e\u662flocal minima\u548csaddle point.\nConvolutional neural networks\n1D for signals and sequences, including language; 2D for images or audio spectrograms, and 3D for video or volumetric images.\n\u6240\u8c13\u76841d\u548c2d.\n4\u4e2akey idea: local connections, shared weights, pooling and the use of\nmany layers\nImage understanding with deep convolutional networks\n\u5439\u4e00\u6ce2CNN\nDistributed representations and language processing\nword2vector\nRecurrent neural networks\nbasic RNN -&gt; LSTM, \u6709\u4e86\u8bb0\u5fc6\u4e86, \u806a\u660e\u7684\u667a\u5546\u53c8\u80fd\u5360\u9886\u9ad8\u5730\u4e86.\nEND\n\u603b\u7684\u6765\u8bf4, \u8fd9\u7bc7\u4e3b\u8981\u662f\u5728\u8bb2\u8fd9\u4e00\u4e8c\u5341\u5e74\u7684\u5386\u53f2, \u57fa\u672c\u4e0a\u90fd\u5728\u8bfe\u91cc\u6216\u8005\u4e66\u672c\u91cc\u8bf4\u8fc7, \u8bfb\u7740\u662f\u6ca1\u4ec0\u4e48\u610f\u601d. \u4e0d\u77e5\u9053\u5386\u53f2\u7684\u53ef\u4ee5\u770b\u770b, \u77e5\u9053\u7684\u6743\u5f53\u7cfb\u5217\u7684\u5f00\u80c3\u5c0f\u83dc\u4e86.\n\n1.2 Deep Belief Network(DBN)(Milestone of Deep Learning Eve)\n\u5bf9\u4e8eDBN\u548cRBM\u6211\u662f\u62d2\u7edd\u7684.\n1.3 ImageNet Evolution(Deep Learning broke out from here)\n[4] Krizhevsky, Alex, Ilya Sutskever, and Geoffrey E. Hinton. \"Imagenet classification with deep convolutional neural networks.\" Advances in neural information processing systems. 2012. [pdf] (AlexNet, Deep Learning Breakthrough) \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\nImageNet Classification with Deep Convolutional Neural Networks\n\u770b\u4e00\u4e0b\u6807\u9898, \u770b\u4e00\u4e0b\u4f5c\u8005, \u5c31\u80fd\u611f\u89c9\u5230\u8fd9\u7bc7paper\u7684\u91cd\u91cf.\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "CNN & my_cnn_fast_cifar10.py by tensorlayer", "date": "2017-07-30T17:04:10-00.00", "path": "/archives/CNN & my_cnn_fast_cifar10.py by tensorlayer/", "text": "Convolutional Neural Network\nCNN\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8303\u4f8b, \u5b83\u544a\u8bc9\u4e86\u6211\u4eec, NN\u7684\u67b6\u6784\u53ef\u4ee5\u7531\u6211\u4eec\u81ea\u5df1\u8bbe\u8ba1\u5e76\u4e14\u8868\u73b0\u5f97\u5f88\u597d\n\u5728\u4f60\u60f3\u7528\u4e00\u4e2afeature\u53bb\u6bd4\u5bf9\u56fe\u7247\u7684\u65f6\u5019, \u6709\u4e09\u4e2a\u91cd\u70b9:\n\npattern\nlocation\nsubsampling\n\n\u57fa\u672c\u67b6\u6784\nimage -&gt; convolution -&gt; pooling-&gt; Flatten -&gt; Fully Connected Feedforward Network -&gt; softmax -&gt;output\n\u5176\u4e2d, \u5377\u79ef\u5c42\u89e3\u51b3\u4e86pattern\u548clocation\u95ee\u9898, \u6c60\u5316\u5c42\u89e3\u51b3\u4e86subsapling\u95ee\u9898\n\n\nconv\n\u5047\u8bbe\u4e00\u4e2a6*6*1\u7684image\u6254\u5230\u8fd9\u4e2aCNN\u4e2d, \u7b2c\u4e00\u4e2aconv, \u53d6\u4e00\u4e2a3*3\u7684filter(kernel or neuron)\u4e0eimage\u4e2d\u76f8\u540c\u5927\u5c0f\u5feb\u4f9d\u6b21\u505a\u5185\u79ef, \u6bcf\u6b21\u79fb\u52a81\u4e2apix(stride=1), \u4e8e\u662f\u5f97\u5230\u4e86\u4e00\u4e2a4*4\u7684image(\u4e0d\u505apadding), \u5047\u8bbe\u6211\u4eec\u6709n\u4e2afilter, \u90a3\u4e48\u901a\u8fc7\u8fd9\u4e2aconv\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a 4*4*n\u7684Feature Map\n\u5982\u679c\u662f\u4e2aRGB\u56fe\u50cf, \u53736*6*3, \u90a3\u4e48\u6211\u4eec\u7684filter\u4e5f\u8981\u662f3*3*3\u7684, \u6bcf\u4e2aslice\u5bf9\u5e94image\u7684\u4e00\u4e2achannel.\n\u4e8b\u5b9e\u4e0a,  \u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u6bcf\u4e2afilter\u505a\u4e86\u4ec0\u4e48\u7684\u8bdd, \u5982\u679c\u628a\u4e00\u4e2afilt\u770b\u4f5c\u4e00\u4e2aneuron, filter\u5185\u79ef\u7684\u7279\u6027, \u505a\u5230\u4e86\u4e24\u4ef6\u4e8b:\n\nparameter sharing\ndrop connect\n\n \n\u987a\u5e26\u4e00\u8bf4'\u5377\u79ef'\u8fd9\u4e2a\u6982\u5ff5. \u5f88\u591a\u4eba\u90fd\u8bf4\u8fd9\u4e2a\u600e\u4e48\u5c31\u662f\u5377\u79ef\u4e86, \u4e0d\u5c31\u662f\u7b80\u5355\u7684\u4e00\u4e2ainner production\u5417?\n\u600e\u4e48\u770b\u4e5f\u4e0d\u662f\u90a3\u4e2a\u79ef\u5206u(t)h(a-t)\u5f62\u5f0f. \u5176\u5b9e, \u8981\u662f\u4ece\u79bb\u6563\u7684\u89d2\u5ea6\u53bb\u770b\u5377\u79ef\u8fd0\u7b97,\n\u4e0e\u5176\u7406\u89e3\u6210\u7ffb\u8f6c\uff0c\u4e0d\u5982\u7406\u89e3\u6210\u5ef6\u8fdf\u540e\u53e0\u52a0\u3002\n\n\u8fd9\u53e5\u8bdd\u662f\u6211\u89c9\u5f97\u8bf4\u7684\u975e\u5e38\u597d\u7684\u4e00\u4e2a\u63ed\u793a\u5377\u79ef\u672c\u8d28\u7684\u8bdd. \u518d\u53bb\u770b\u770bfilter\u7684\u884c\u4e3a\u5c31\u5f88\u660e\u4e86\u4e86.\npadding\n\u6839\u636etensorflow\u4e2d\u7684conv2d\u51fd\u6570\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u51e0\u4e2a\u57fa\u672c\u7b26\u53f7\n1\u3001\u8f93\u5165\u77e9\u9635 W\u00d7W\uff0c\u8fd9\u91cc\u53ea\u8003\u8651\u8f93\u5165\u5bbd\u9ad8\u76f8\u7b49\u7684\u60c5\u51b5\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u63a8\u5bfc\u65b9\u6cd5\u4e00\u6837\uff0c\u4e0d\u591a\u89e3\u91ca\u3002\n2\u3001filter\u77e9\u9635 F\u00d7F\uff0c\u5377\u79ef\u6838\n3\u3001stride\u503c S\uff0c\u6b65\u957f\n4\u3001\u8f93\u51fa\u5bbd\u9ad8\u4e3a new_height\u3001new_width\n\u5f53\u7136\u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u5177\u4f53\u7684\u53c2\u6570\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8bf4\u660e\u4e86\u3002\n\u6211\u4eec\u77e5\u9053\uff0cpadding\u7684\u65b9\u5f0f\u5728tensorflow\u91cc\u5206\u4e24\u79cd\uff0c\u4e00\u79cd\u662fVALID\uff0c\u4e00\u79cd\u662fSAME\uff0c\u4e0b\u9762\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u65b9\u5f0f\u7684\u5b9e\u9645\u64cd\u4f5c\u65b9\u6cd5\u3002\n1\u3001\u5982\u679cpadding = \u2018VALID\u2019\nnew_height = new_width = (W \u2013 F + 1) / S \uff08\u7ed3\u679c\u5411\u4e0a\u53d6\u6574\uff09\n\u4e5f\u5c31\u662f\u8bf4\uff0cconv2d\u7684VALID\u65b9\u5f0f\u4e0d\u4f1a\u5728\u539f\u6709\u8f93\u5165\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u65b0\u7684\u50cf\u7d20\uff08\u5047\u5b9a\u6211\u4eec\u7684\u8f93\u5165\u662f\u56fe\u7247\u6570\u636e\uff0c\u56e0\u4e3a\u53ea\u6709\u56fe\u7247\u624d\u6709\u50cf\u7d20\uff09\uff0c\u8f93\u51fa\u77e9\u9635\u7684\u5927\u5c0f\u76f4\u63a5\u6309\u7167\u516c\u5f0f\u8ba1\u7b97\u5373\u53ef\u3002\n2\u3001\u5982\u679cpadding = \u2018SAME\u2019\nnew_height = new_width = W / S \uff08\u7ed3\u679c\u5411\u4e0a\u53d6\u6574\uff09\npadding\u8fd9\u6bb5\u6765\u81ea\u4e8e\n\u4f5c\u8005\uff1aTraphix\n\u94fe\u63a5\uff1ahttp://www.jianshu.com/p/05c4f1621c7e\n\u4f86\u6e90\uff1a\u7b80\u4e66\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n\npooling\n\u5f88\u591a\u65f6\u5019\u6211\u4eec\u90fd\u662fmaxpooling, \u5176\u5b9eaveragepooling\u4e00\u6837\u7528\u7684\u5f88\u591a, \u4f8b\u5982\u5728cifar-10\u7684cnn\u8bbe\u8ba1\u4e2d, avgpooling\u88ab\u91c7\u7528\u4e86\u5728\u540e\u4e24cnov\u5c42\u540e\n \n\u53d6kernel=(2,2)\u7684maxpooling\u7684\u8bdd\n6*6 -&gt; conv -&gt; maxpooling -&gt; 2*2*n\nflatten\n\u76f4\u63a5\u628a\u7ecf\u8fc7pooling\u5f97\u5230\u76842*2*n\u62c9\u76f4\u4e3a\u4e00\u4e2a\u5411\u91cf, \u6bcf\u4e2aslice\u5934\u5c3e\u76f8\u63a5, \u5047\u8bben=16, \u8fd9\u65f6\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a64dim\u7684vector, \u518d\u6254\u8fdb\u4e00\u4e2aMLP, \u8f93\u51fa\u4e00\u4e2a10dim(\u5047\u8bbe\u4f5c\u5728mnist\u4e0a), \u6700\u540e\u63a5\u4e0a\u4e00\u4e2asoftmax, \u5c31\u5f97\u51fa\u5206\u7c7b\u7ed3\u679c\nmy_cnn_fast_cifar10.py\n\u4e0b\u9762\u662f\u6211\u6309\u7167pooling\u90a3\u91cc\u7684cifar-10 fast model\u5199\u7684\u4ee3\u7801, backend\u662ftensorflow, \u6846\u67b6tensorlayer.\n#! /usr/bin/python\n# -*- coding: utf8 -*-\n\nimport tensorflow as tf\nimport tensorlayer as tl\nimport tensorlayer.layers as tll\nimport numpy as np\nimport time, os, io\n\nsess = tf.InteractiveSession()\n\n#train param\nn_epoch = 500\nlearning_rate = 0.0001\nprint_freq = 1\nbatch_size = 128\n\n#load cifar10\nX_train, y_train, X_test, y_test = tl.files.load_cifar10_dataset(\n                                    shape=(-1, 32, 32, 3), plotable=False)\n#InitW(Gaussian with zero mean)\nW_init1 = tf.truncated_normal_initializer(stddev=0.0001)\nW_init2 = tf.truncated_normal_initializer(stddev=0.001)\nW_init3 = W_init2\nW_init4 = tf.truncated_normal_initializer(stddev=0.1)\nW_init5 = W_init4\nb_init4 = tf.truncated_normal_initializer(stddev=0.1)\nb_init5 = b_init4\n\n#placeholder\nx = tf.placeholder(tf.float32, shape=[None, 32, 32, 3], name=&#39;x&#39;)\ny_ = tf.placeholder(tf.int64, shape=[None, ], name=&#39;y_&#39;)\n\n#model\nnn = tll.InputLayer(x, name=&#39;Input1&#39;)\nnn = tll.Conv2dLayer(nn, act=tf.nn.relu, shape=[5, 5, 3, 32], \n        strides=[1, 1, 1, 1], padding=&#39;SAME&#39;, W_init=W_init1, name=&#39;cnn1&#39;)\n#output : (batchsize, 32, 32, 32)\nnn = tll.PoolLayer(nn, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], \n        padding=&#39;SAME&#39;, pool= tf.nn.max_pool, name=&#39;pool1_max&#39;)\n#output : (batchsize, 16, 16, 32)\nnn = tll.Conv2dLayer(nn, act=tf.nn.relu, shape=[5, 5, 32, 32], \n        strides=[1, 1, 1, 1], padding=&#39;SAME&#39;, W_init=W_init2, name=&#39;cnn2&#39;)\n#output : (batchsize, 16, 16, 32)\nnn = tll.PoolLayer(nn, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], \n        padding=&#39;SAME&#39;, pool= tf.nn.avg_pool, name=&#39;pool2_avg&#39;)\n#output : (batchsize, 8, 8, 32)\nnn = tll.Conv2dLayer(nn, act=tf.nn.relu, shape=[5, 5, 32, 64], \n        strides=[1, 1, 1, 1], padding=&#39;SAME&#39;, W_init=W_init3, name=&#39;cnn3&#39;)\n#output : (batchsize, 8, 8, 64)\nnn = tll.PoolLayer(nn, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], \n        padding=&#39;SAME&#39;, pool= tf.nn.avg_pool, name=&#39;pool3_avg&#39;)\n#output : (batchsize, 4, 4, 64)\nnn = tll.FlattenLayer(nn, name=&#39;Flattenlayer&#39;)\nnn = tll.DenseLayer(nn, n_units=64, act=tf.nn.relu, \n        W_init=W_init4, b_init=b_init4, name=&#39;relu1&#39;)\nnn = tll.DenseLayer(nn, n_units=10, act=tf.identity, \n        W_init=W_init5, b_init=b_init5, name=&#39;output1&#39;)\ny = nn.outputs\n\n#cost\nce = tl.cost.cross_entropy(y, y_, name=&#39;cost_cross_entropy&#39;)\nL2 = 0\nfor p in tl.layers.get_variables_with_name(&#39;relu/W&#39;, train_only=True, printable=True):\n    L2 += tf.contrib.layers.l2_regularizer(0.004)(p)\ncost = ce + L2\n\n#acc\ncorrect_prediction = tf.equal(tf.argmax(y, 1), y_)\nacc = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n#train_op\ntrain_params = nn.all_params\ntrain_op = tf.train.AdamOptimizer(learning_rate, beta1=0.9, beta2=0.999,\n    epsilon=1e-08, use_locking=False).minimize(cost, var_list=train_params)\n\ntl.layers.initialize_global_variables(sess)\n\nprint(&#39;****&#39;)\nnn.print_params(False)\nprint(&#39;****&#39;)\nnn.print_layers()\nprint(&#39;****&#39;)\n\nprint(&#39;    learning_rate: %f&#39; % learning_rate)\nprint(&#39;    batch_size: %d&#39; % batch_size)\n\n\u642d\u597d\u4e86\u6a21\u578b, \u7136\u540e\u53d1\u73b0\u5fd8\u4e86\u5199BN\u5c42\u4e86, \ud83e\udd23\u660e\u4e2a\u518d\u8bf4\n\u8bf4\u4e2a\u70b9\n \n\u8fd9\u91cc\u9762, \u5377\u79ef\u5c42\u53c2\u6570, \u7ed9\u4e86kernel\u4e5f\u5c31\u662ffilter\u7684\u5927\u5c0f5/*5, \u4f46\u6ca1\u7ed9strides, \u5374\u7ed9\u7684padding=2. \u89c1\u8fc7padding='SAME' or 'VAILD', \u8fd9\u4e2a\u6570\u5b57\u662f\u4e2a\u5565.\n\u7814\u7a76\u4e86\u4e00\u4e0b, \u5e94\u8be5\u5c31\u662f\u9ed8\u8ba4padding='SAME' , \u7136\u540e\u770b\u8fd9\u4e2a\u56fe\n\npadding=2 \u5c31\u662f\u6700\u5916\u5c42\u59572\u4e2apixel, \u90a3\u4e48strides=1\u5c31\u5f88\u663e\u7136, \u4e0d\u7136\u53d62\u5e72\u4ec0\u4e48.\n\n\u8d70\u4e4b\u524d\u6539\u4e86\u4e0b\u521d\u6b65, \u52a0\u4e86\u4e2aBathchnormallayer\n#! /usr/bin/python\n# -*- coding: utf8 -*-\n\nimport tensorflow as tf\nimport tensorlayer as tl\nimport tensorlayer.layers as tll\nimport numpy as np\nimport time, os, io\n\nsess = tf.InteractiveSession()\n\n#load cifar10\nX_train, y_train, X_test, y_test = tl.files.load_cifar10_dataset(\n                                    shape=(-1, 32, 32, 3), plotable=False)\n\ndef fast_model(x, y_, reuse, is_train):\n    #InitW(Gaussian with zero mean)\n    W_init1 = tf.truncated_normal_initializer(stddev=0.0001)\n    W_init2 = tf.truncated_normal_initializer(stddev=0.001)\n    W_init3 = W_init2\n    W_init4 = tf.truncated_normal_initializer(stddev=0.1)\n    W_init5 = W_init4\n    b_init4 = tf.truncated_normal_initializer(stddev=0.1)\n    b_init5 = b_init4\n\n    with tf.variable_scope(&quot;model&quot;, reuse=reuse):\n        tl.layers.set_name_reuse(reuse)\n        #model\n        nn = tll.InputLayer(x, name=&#39;Input1&#39;)\n        nn = tll.Conv2dLayer(nn, act=tf.nn.relu, shape=[5, 5, 3, 32], \n                strides=[1, 1, 1, 1], padding=&#39;SAME&#39;, W_init=W_init1, name=&#39;cnn1&#39;)\n        #output : (batchsize, 32, 32, 32)\n        nn = tll.BatchNormLayer(nn, is_train, act=tf.nn.relu, name=&#39;batch1&#39;)\n        nn = tll.PoolLayer(nn, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], \n                padding=&#39;SAME&#39;, pool= tf.nn.max_pool, name=&#39;pool1_max&#39;)\n        #output : (batchsize, 16, 16, 32)\n        nn = tll.Conv2dLayer(nn, act=tf.nn.relu, shape=[5, 5, 32, 32], \n                strides=[1, 1, 1, 1], padding=&#39;SAME&#39;, W_init=W_init2, name=&#39;cnn2&#39;)\n        #output : (batchsize, 16, 16, 32)\n        nn = tll.BatchNormLayer(nn, is_train, act=tf.nn.relu, name=&#39;batch2&#39;)\n        nn = tll.PoolLayer(nn, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], \n                padding=&#39;SAME&#39;, pool= tf.nn.avg_pool, name=&#39;pool2_avg&#39;)\n        #output : (batchsize, 8, 8, 32)\n        nn = tll.Conv2dLayer(nn, act=tf.nn.relu, shape=[5, 5, 32, 64], \n                strides=[1, 1, 1, 1], padding=&#39;SAME&#39;, W_init=W_init3, name=&#39;cnn3&#39;)\n        #output : (batchsize, 8, 8, 64)\n        nn = tll.BatchNormLayer(nn, is_train, act=tf.nn.relu, name=&#39;batch3&#39;)\n        nn = tll.PoolLayer(nn, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], \n                padding=&#39;SAME&#39;, pool= tf.nn.avg_pool, name=&#39;pool3_avg&#39;)\n        #output : (batchsize, 4, 4, 64)\n        nn = tll.FlattenLayer(nn, name=&#39;Flattenlayer&#39;)\n        nn = tll.DenseLayer(nn, n_units=64, act=tf.nn.relu, \n                W_init=W_init4, b_init=b_init4, name=&#39;relu1&#39;)\n        nn = tll.DenseLayer(nn, n_units=10, act=tf.identity, \n                W_init=W_init5, b_init=b_init5, name=&#39;output1&#39;)\n        y = nn.outputs\n\n        #cost\n        ce = tl.cost.cross_entropy(y, y_, name=&#39;cost_cross_entropy&#39;)\n        L2 = 0\n        for p in tl.layers.get_variables_with_name(&#39;relu/W&#39;, train_only=True, printable=True):\n           L2 += tf.contrib.layers.l2_regularizer(0.004)(p)\n        cost = ce + L2\n\n        #acc\n        correct_prediction = tf.equal(tf.argmax(y, 1), y_)\n        acc = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n        return nn, cost, acc\n\n\n#train param\nn_epoch = 500\nlearning_rate = 0.0001\nprint_freq = 1\nbatch_size = 128\n\n#placeholder\nx = tf.placeholder(tf.float32, shape=[None, 32, 32, 3], name=&#39;x&#39;)\ny_ = tf.placeholder(tf.int64, shape=[None, ], name=&#39;y_&#39;)\n\nnn, cost, _ = fast_model(x, y_, False, is_train=True)\n_, cost_test, acc = fast_model(x, y_, True, is_train=False)\n\n\n#train_op\ntrain_params = nn.all_params\ntrain_op = tf.train.AdamOptimizer(learning_rate, beta1=0.9, beta2=0.999,\n    epsilon=1e-08, use_locking=False).minimize(cost, var_list=train_params)\n\ntl.layers.initialize_global_variables(sess)\n\nprint(&#39;****&#39;)\nnn.print_params(False)\nprint(&#39;****&#39;)\nnn.print_layers()\nprint(&#39;****&#39;)\n\nprint(&#39;    learning_rate: %f&#39; % learning_rate)\nprint(&#39;    batch_size: %d&#39; % batch_size)\n\n&#39;&#39;&#39;\ntl.utils.fit(sess, nn, train_op, cost, X_train, y_train, x, y_,\n           acc=acc, batch_size=batch_size, n_epoch=n_epoch, print_freq=5,\n           X_val=None, y_val=None, eval_train=False,\n           tensorboard=True)\n\ntl.utils.test(sess, nn, acc, X_test, y_test, x, y_, batch_size=None, cost=cost)\n\nsess.close()\n&#39;&#39;&#39;\n\nnum of params: 146090, \n\u53c2\u6570\u6570\u91cf\u6bd4\u6700\u539f\u59cb\u7248\u5c11\u4e86\u4e00\u4e2a\u6570\u91cf\u7ea7. \u5f88\u8ff7, \u662f\u4e0d\u662f\u5199\u9519\u4e86, \u600e\u4e48\u5c11\u4e86\u8fd9\u4e48\u591a. \u627e\u4e2a\u65f6\u95f4train\u4e0b\u8bd5\u8bd5\u518d\u8bf4\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "\u4e3atensorflow\u6a21\u5757\u5728spyder\u6dfb\u52a0\u4ee3\u7801\u8865\u5168", "date": "2017-07-26T15:36:09-00.00", "path": "/archives/\u4e3atensorflow\u6a21\u5757\u5728spyder\u6dfb\u52a0\u4ee3\u7801\u8865\u5168/", "text": "spyder\u81ea\u5e26\u7684\u4ee3\u7801\u8865\u5168\u4e0d\u652f\u6301tf\u6a21\u5757.\n\u89e3\u51b3\u65b9\u6cd5, \u53c2\u8003\nhttp://blog.csdn.net/liyuefeilong/article/details/47957319\n\u8def\u5f84\u662f\\Lib\\site-packages\\spyder\\utils\\introspection\\module_completion.py\nps. markdown\u7f16\u8f91\u5668\u6709\u65f6\u5019\u633a\u8ba9\u4eba\u8ff7\u60d1\u7684 \u56fe\u7247\u63cf\u8ff0\n\nsypder\u8fd9\u8fd8\u4e0d\u5982sublime, \u6362\u56deRodeo, \u867d\u7136\u5b83\u5f88\u8f7b\u91cf\u7ea7, \u529f\u80fd\u5f88\u5c11, \u8fde\u6362\u4e2a\u5b57\u4f53\u90fd\u5fd2\u9ebb\u70e6, \u4f46\u7528\u4e60\u60ef\u4ee3\u7801\u8865\u5168\u4e86\n\u56fe\u7247\u63cf\u8ff0\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": []}, {"title": "DLBook NOTES 7\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u6b63\u5219\u5316", "date": "2017-07-26T09:50:40-00.00", "path": "/archives/DLBook NOTES 7\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u6b63\u5219\u5316/", "text": "\u53c2\u6570\u8303\u6570\u60e9\u7f5a\n$L_2$\u8303\u6570\u5bf9\u4e8e\u4e8c\u6b21\u4ee3\u4ef7\u51fd\u6570\u7684\u5f71\u54cd: \u53ea\u6709\u5728\u663e\u8457\u51cf\u5c0f\u76ee\u6807\u51fd\u6570\u65b9\u5411\u4e0a\u7684\u53c2\u6570\u4f1a\u4fdd\u7559\u5f97\u76f8\u5bf9\u5b8c\u597d\u3002\u5728\u65e0\u52a9\u4e8e\u76ee\u6807\u51fd\u6570\u51cf\u5c0f\u7684\u65b9\u5411\uff08\u5bf9\u5e94 Hessian \u77e9\u9635\u8f83\u5c0f\u7684\u7279\u5f81\u503c\uff09\u4e0a\u6539\u53d8\u53c2\u6570\u4e0d\u4f1a\u663e\u8457\u589e\u52a0\u68af\u5ea6\u3002\u8fd9\u79cd\u4e0d\u91cd\u8981\u65b9\u5411\u5bf9\u5e94\u7684\u5206\u91cf\u4f1a\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u56e0\u6b63\u5219\u5316\u800c\u8870\u51cf\u6389\u3002\n$L_2$\u6b63\u5219\u5316\u80fd\u8ba9\u5b66\u4e60\u7b97\u6cd5 \u2018\u2018\u611f\u77e5\u2019\u2019 \u5230\u5177\u6709\u8f83\u9ad8\u65b9\u5dee\u7684\u8f93\u5165 $x$\uff0c\u56e0\u6b64\u4e0e\u8f93\u51fa\u76ee\u6807\u7684\u534f\u65b9\u5dee\u8f83\u5c0f\uff08\u76f8\u5bf9\u589e\u52a0\u65b9\u5dee\uff09\u7684\u7279\u5f81\u7684\u6743\u91cd\u5c06\u4f1a\u6536\u7f29.\n\u76f8\u6bd4$L_2$\u6b63\u5219\u5316\uff0c$L_1$\u6b63\u5219\u5316\u4f1a\u4ea7\u751f\u66f4\u7a00\u758f\uff08sparse\uff09\u7684\u89e3\u3002\u6b64\u5904\u7a00\u758f\u6027\u6307\u7684\u662f\n\u6700\u4f18\u503c\u4e2d\u7684\u4e00\u4e9b\u53c2\u6570\u4e3a $0$\u3002\u548c$L_2$\u6b63\u5219\u5316\u76f8\u6bd4\uff0c$L_1$\u6b63\u5219\u5316\u7684\u7a00\u758f\u6027\u5177\u6709\u672c\u8d28\u7684\u4e0d\u540c. $L_2$\u6b63\u5219\u5316\u4e0d\u4f1a\u4f7f\u53c2\u6570\u53d8\u5f97\u7a00\u758f\uff0c\u800c$L_1$ \u6b63\u5219\u5316\u6709\u53ef\u80fd\u901a\u8fc7\u8db3\u591f\u5927\u7684 \u03b1 \u5b9e\u73b0\u7a00\u758f\u3002\n\u7531 $L_1$ \u6b63\u5219\u5316\u5bfc\u51fa\u7684\u7a00\u758f\u6027\u8d28\u5df2\u7ecf\u88ab\u5e7f\u6cdb\u5730\u7528\u4e8e\u7279\u5f81\u9009\u62e9\uff08feature selection\uff09\u673a\n\u5236\u3002\n\n\n\u4f5c\u4e3a\u7ea6\u675f\u7684\u8303\u6570\u60e9\u7f5a\n\u60e9\u7f5a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u76ee\u6807\u51fd\u6570\u975e\u51f8\u800c\u4f7f\u7b97\u6cd5\u9677\u5165\u5c40\u90e8\u6781\u5c0f (\u5bf9\u5e94\u4e8e\u5c0f\u7684 \u03b8\uff09\u3002\n\u7ea6\u675f\u795e\u7ecf\u7f51\u7edc\u5c42\u7684\u6743\u91cd\u77e9\u9635\u6bcf\u5217\u7684\u8303\u6570\uff0c\u800c\u4e0d\u662f\u9650\u5236\u6574\u4e2a\u6743\u91cd\u77e9\u9635\u7684 Frobenius \u8303\u6570\u3002\u5206\u522b\u9650\u5236\u6bcf\u4e00\u5217\u7684\u8303\u6570\u53ef\u4ee5\u9632\u6b62\u67d0\u4e00\u9690\u85cf\u5355\u5143\u6709\u975e\u5e38\u5927\u7684\u6743\u91cd\u3002\n\u566a\u58f0\u9c81\u68d2\u6027\n\u53e6\u4e00\u79cd\u6b63\u5219\u5316\u6a21\u578b\u7684\u566a\u58f0\u4f7f\u7528\u65b9\u5f0f\u662f\u5c06\u5176\u52a0\u5230\u7684\u6743\u91cd\u3002\u8fd9\u9879\u6280\u672f\u4e3b\u8981\u7528\u4e8e\u5faa\u73af\n\u795e\u7ecf\u7f51\u7edc (Jim et al., 1996; Graves, 2011)\u3002\u8fd9\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a\u5173\u4e8e\u6743\u91cd\u7684\u8d1d\u53f6\u65af\u63a8\u65ad\u7684\n\u968f\u673a\u5b9e\u73b0\u3002\u8d1d\u53f6\u65af\u5b66\u4e60\u8fc7\u7a0b\u5c06\u6743\u91cd\u89c6\u4e3a\u4e0d\u786e\u5b9a\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u6982\u7387\u5206\u5e03\u8868\u793a\u8fd9\u79cd\n\u4e0d\u786e\u5b9a\u6027\u3002\u5411\u6743\u91cd\u6dfb\u52a0\u566a\u58f0\u662f\u53cd\u6620\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\u7684\u4e00\u79cd\u5b9e\u7528\u7684\u968f\u673a\u65b9\u6cd5\u3002\n\u5728\u67d0\u4e9b\u5047\u8bbe\u4e0b\uff0c\u65bd\u52a0\u4e8e\u6743\u91cd\u7684\u566a\u58f0\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a\u4e0e\u66f4\u4f20\u7edf\u7684\u6b63\u5219\u5316\u5f62\u5f0f\u7b49\u540c\uff0c\n\u9f13\u52b1\u8981\u5b66\u4e60\u7684\u51fd\u6570\u4fdd\u6301\u7a33\u5b9a\u3002\nearly stopping\n\u5728\u6bcf\u6b21\u9a8c\u8bc1\u96c6\u8bef\u5dee\u6709\u6240\u6539\u5584\u540e\uff0c\u6211\u4eec\u5b58\u50a8\u6a21\u578b\u53c2\u6570\u7684\u526f\u672c\u3002\u5f53\u8bad\u7ec3\u7b97\u6cd5\u7ec8\u6b62\u65f6\uff0c\u6211\u4eec\u8fd4\u56de\u8fd9\u4e9b\u53c2\u6570\u800c\u4e0d\u662f\u6700\u65b0\u7684\u53c2\u6570\u3002\u5f53\u9a8c\u8bc1\n\u96c6\u4e0a\u7684\u8bef\u5dee\u5728\u4e8b\u5148\u6307\u5b9a\u7684\u5faa\u73af\u6b21\u6570\u5185\u6ca1\u6709\u8fdb\u4e00\u6b65\u6539\u5584\u65f6\uff0c\u7b97\u6cd5\u5c31\u4f1a\u7ec8\u6b62\u3002\n\u8fd9\u53ef\u80fd\u662f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u6700\u5e38\u7528\u7684\u6b63\n\u5219\u5316\u5f62\u5f0f\u3002\u5b83\u7684\u6d41\u884c\u4e3b\u8981\u662f\u56e0\u4e3a\u6709\u6548\u6027\u548c\u7b80\u5355\u6027\u3002\n\u63d0\u524d\u7ec8\u6b62\u9700\u8981\u9a8c\u8bc1\u96c6\uff0c\u8fd9\u610f\u5473\u7740\u67d0\u4e9b\u8bad\u7ec3\u6570\u636e\u4e0d\u80fd\u88ab\u9988\u9001\u5230\u6a21\u578b\u3002\u4e3a\u4e86\u66f4\u597d\u5730\n\u5229\u7528\u8fd9\u4e00\u989d\u5916\u7684\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5b8c\u6210\u63d0\u524d\u7ec8\u6b62\u7684\u9996\u6b21\u8bad\u7ec3\u4e4b\u540e\uff0c\u8fdb\u884c\u989d\u5916\u7684\u8bad\u7ec3\u3002\n\u5728\u7b2c\u4e8c\u8f6e\u989d\u5916\u7684\u8bad\u7ec3\u6b65\u9aa4\u4e2d\uff0c\u6240\u6709\u7684\u8bad\u7ec3\u6570\u636e\u90fd\u88ab\u5305\u62ec\u5728\u5185\u3002\u6709\u4e24\u4e2a\u57fa\u672c\u7684\u7b56\u7565\u90fd\n\u53ef\u4ee5\u7528\u4e8e\u7b2c\u4e8c\u8f6e\u8bad\u7ec3\u8fc7\u7a0b:\n\n\u4e00\u4e2a\u7b56\u7565\uff08\u7b97\u6cd57.2\uff09\u662f\u518d\u6b21\u521d\u59cb\u5316\u6a21\u578b\uff0c\u7136\u540e\u4f7f\u7528\u6240\u6709\u6570\u636e\u518d\u6b21\u8bad\u7ec3\u3002\u5728\u8fd9\u4e2a\n\u7b2c\u4e8c\u8f6e\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u7b2c\u4e00\u8f6e\u63d0\u524d\u7ec8\u6b62\u8bad\u7ec3\u786e\u5b9a\u7684\u6700\u4f73\u6b65\u6570\u3002\n\u4fdd\u6301\u4ece\u7b2c\u4e00\u8f6e\u8bad\u7ec3\u83b7\u5f97\u7684\u53c2\u6570\uff0c\u7136\u540e\u4f7f\u7528\u5168\u90e8\u7684\u6570\u636e\u7ee7\u7eed\u8bad\u7ec3\u3002\n\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u5df2\u7ecf\u6ca1\u6709\u9a8c\u8bc1\u96c6\u6307\u5bfc\u6211\u4eec\u9700\u8981\u5728\u8bad\u7ec3\u591a\u5c11\u6b65\u540e\u7ec8\u6b62\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u76d1\n\u63a7\u9a8c\u8bc1\u96c6\u7684\u5e73\u5747\u635f\u5931\u51fd\u6570\uff0c\u5e76\u7ee7\u7eed\u8bad\u7ec3\uff0c\u76f4\u5230\u5b83\u4f4e\u4e8e\u63d0\u524d\u7ec8\u6b62\u8fc7\u7a0b\u7ec8\u6b62\u65f6\u7684\u76ee\u6807\u503c\u3002\n\u6b64\u7b56\u7565\u907f\u514d\u4e86\u91cd\u65b0\u8bad\u7ec3\u6a21\u578b\u7684\u9ad8\u6210\u672c\uff0c\u4f46\u8868\u73b0\u5e76\u6ca1\u6709\u90a3\u4e48\u597d\u3002\n\nBagging \u548c\u5176\u4ed6\u96c6\u6210\u65b9\u6cd5\n\u5206\u522b\u8bad\u7ec3\u51e0\u4e2a\u4e0d\u540c\u7684\u6a21\u578b\uff0c\u7136\u540e\u8ba9\u6240\u6709\u6a21\u578b\u8868\u51b3\u6d4b\n\u8bd5\u6837\u4f8b\u7684\u8f93\u51fa\u3002\u8fd9\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u5e38\u89c4\u7b56\u7565\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u88ab\u79f0\u4e3a\u6a21\u578b\u5e73\u5747\uff08model\naveraging\uff09\u3002\u91c7\u7528\u8fd9\u79cd\u7b56\u7565\u7684\u6280\u672f\u88ab\u79f0\u4e3a\u96c6\u6210\u65b9\u6cd5\u3002\n\u6a21\u578b\u5e73\u5747\uff08model averaging\uff09\u594f\u6548\u7684\u539f\u56e0\u662f\u4e0d\u540c\u7684\u6a21\u578b\u901a\u5e38\u4e0d\u4f1a\u5728\u6d4b\u8bd5\u96c6\u4e0a\u4ea7\n\u751f\u5b8c\u5168\u76f8\u540c\u7684\u8bef\u5dee\u3002\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "NOTES", "slug": "NOTES", "permalink": "/tag/NOTES/"}, {"name": "DLBOOK", "slug": "DLBOOK", "permalink": "/tag/DLBOOK/"}]}, {"title": "\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5NOTES", "date": "2017-07-23T08:54:31-00.00", "path": "/archives/\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5NOTES/", "text": "Model | Strategy | Algorithm\n\u7ed3\u6784\u98ce\u9669: $R_{srm} = \\frac{1}{N}\\sum^N_{i+1}L(y_i,f(x_i)) + \\lambda J(f)$\n\u5176\u4e2d,$J(x)$\u4f53\u73b0\u4e86\u5bf9\u590d\u6742\u6a21\u578b\u7684\u60e9\u7f5a, \u6700\u5927\u540e\u9a8c\u5c31\u662f\u7ed3\u6784\u98ce\u9669\u6700\u5c0f\u5316\u7684\u4e00\u4e2a\u4f8b\u5b50.\n\u4ece\u8d1d\u53f6\u65af\u89d2\u5ea6\u770b, \u6b63\u5219\u5316\u9879\u5bf9\u5e94\u4e8e\u6a21\u578b\u7684\u5148\u9a8c, \u53ef\u4ee5\u5047\u8bbe\u590d\u6742\u7684\u6a21\u578b\u5177\u6709\u8f83\u5927\u7684\u5148\u9a8c, \u7b80\u5355\u7684\u6a21\u578b\u5177\u6709\u8f83\u5c0f\u7684\u5148\u9a8c.\n\n\n\u9a8c\u8bc1\n\u4e00\u822cK-fold cross-validation, \u6837\u672c\u5c11\u7684\u65f6\u5019Leave-one out cross-validation.\n\u6ce8\u610f\u8fd8\u6709Bootstrap\u65b9\u6cd5\n\uff08\u4e8c\uff09Bootstrap\n\u662f\u4e00\u79cd\u6709\u653e\u56de\u7684\u62bd\u6837\u7edf\u8ba1\u8fc7\u7a0b\uff08with replacement\uff09.\n\u6761\u4ef6\uff1a\u6837\u672c\u8db3\u591f\u591a\uff0c\u81f4\u4f7f\u62bd\u6837\u80fd\u591f\u4f53\u73b0\u539f\u59cb\u6837\u672c\u3002\n\u6838\u5fc3\u601d\u60f3\uff1a\u4ece\u4e00\u4e2adataset set\u6709\u653e\u56de\u7684\u62bd\u6837\uff0c\u5f62\u6210training set\u3002\n0.632 bootstrap\uff1an\u4e2a\u5b9e\u4f8b\u7684\u6570\u636e\u96c6\uff0c\u88ab\u6709\u653e\u56de\u7684\u62bd\u6837n\u6b21\uff0c\u6bcf\u6b21\u4ecd\u5305\u542bn\u4e2a\u5b9e\u4f8b\u3002\u7531\u4e8e\u662f\u6709\u653e\u56de\u62bd\u6837\uff0c\u6240\u4ee5\u5728\u65b0\u7684\u8bad\u7ec3\u96c6\u4e2d\u53ef\u80fd\u4f1a\u5305\u542b\u91cd\u590d\u5b9e\u4f8b\uff0c\u539f\u59cb\u6570\u636e\u4e2d\u90a3\u4e9b\u672a\u88ab\u9009\u62e9\u7684\u5b9e\u4f8b\u5c31\u4f5c\u4e3a\u6d4b\u8bd5\u5b9e\u4f8b\u3002\n\u6570\u636e\u96c6\u4e2d\u4e00\u4e2a\u5b9e\u4f8b\u672a\u88ab\u9009\u62e9\u7684\u6982\u7387\u4e3a\uff081-1/n\uff09\u2026(1-1/n)=e-1=0.368 (e=2.7183\uff0c\u662f\u81ea\u7136\u5bf9\u6570)\n\u4e0a\u9762\u6570\u636e\u8bf4\u660e\u4e86\u5728\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u636e\u96c6\u4e2d\uff0c\u8bad\u7ec3\u96c6\u4e2d\u53ef\u80fd\u542b\u670963.2%\u7684\u539f\u59cb\u6570\u636e\uff0c\u800c\u6d4b\u8bd5\u96c6\u4e2d\u542b\u670936.8%\u7684\u5b9e\u4f8b\u3002\nbootstrap\u8fc7\u7a0b\uff1ae=0.632e\uff08test-instance\uff09+0.368*e\uff08trainning-instances\uff09\n\u4f18\u70b9\uff1a\u662f\u5c0f\u6570\u636e\u96c6\u7684\u9519\u8bef\u7387\u4f30\u8ba1\u7684\u6700\u597d\u529e\u6cd5\uff1b\n\u7f3a\u70b9\uff1a\u4e00\u4e2a\u968f\u673a\u7684\u6570\u636e\u96c6\uff0c\u88ab\u7b49\u91cf\u5206\u6210\u4e24\u7c7b\uff0c\u56e0\u6b64\u771f\u5b9e\u7684\u9519\u8bef\u7387\u4e3a0.5\u3002\n\n\u751f\u6210\u6a21\u578b\u4e0e\u5224\u522b\u6a21\u578b, \u5927\u81f4\u4e0a:\n\u751f\u6210\u6a21\u578b\u544a\u8bc9\u4f60\u5206\u5e03, \u5224\u522b\u6a21\u578b\u544a\u8bc9\u4f60\u662f\u5565. \u867d\u7136\u751f\u6210\u6a21\u578b\u6700\u540e\u4e5f\u4f1a\u8fdb\u884c\u5224\u522b, \u4f46\u8fd9\u662f\u7531\u5206\u5e03\u6765\u7684.\n\u611f\u77e5\u673a\uff08perceptron\uff09\n\u5176\u5b9e\u5b66\u8fc7SVM\u4e4b\u540e, \u518d\u53bb\u770b\u611f\u77e5\u5668\u5c31\u611f\u89c9\u5f88\u6e05\u6670\u4e86, \u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u7c7b\u7684\u8d85\u5e73\u9762.\n\u611f\u77e5\u5668\n\u6765\u770b\u5bf9\u5076\u5f62\u5f0f\n\u56fe\u7247\u63cf\u8ff0\n\u56fe\u7247\u63cf\u8ff0\n\u4ee3\u7801\u4e5f\u5199\u7740\u5f88\u7b80\u5355\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5", "slug": "\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5", "permalink": "/tag/\u7edf\u8ba1\u5b66\u4e60\u65b9\u6cd5/"}, {"name": "NOTES", "slug": "NOTES", "permalink": "/tag/NOTES/"}]}, {"title": "PRML NOTES", "date": "2017-07-22T19:40:23-00.00", "path": "/archives/PRML NOTES/", "text": "\u4e3a\u4ec0\u4e48\u4e0d\u662fESL or MLAPP\u4e4b\u7c7b\u7684, \u7eaf\u7cb9\u56e0\u4e3a\u6211\u4e4b\u524dBayes\u65b9\u9762\u63a5\u89e6\u7684\u4e0d\u592a\u591a. \u672c\u79d1\u7684\u65f6\u5019\u5c31\u7ecf\u5e38\u542c\u5230PRML\u5927\u540d, \u6b63\u597d\u4e5f\u6709\u8bd1\u7248.(ps.\u5f53\u5e74\u90a3\u7bc7\u7ffb\u8bd1\u7248\u58f0\u660e\u7684\u5199\u7684\u662f\u6709\u6c34\u5e73)\n\n\u6982\u7387\u8bba\nerror function : \u901a\u5e38\u6765\u8bf4MSE\u662f\u6709\u6548\u7684$E(\\omega) = \\frac{1}{2}\\sum^N_{n-1}\\{y(x_n,\\vec\\omega)-t_n\\}^2$\n\u5173\u4e8e\u9ad8\u6b21\u63d2\u503c\u9020\u6210\u7684over-fitting : \u6211\u60f3\u8d77\u6765\u4e86\u7c7b\u4f3c\u7684\u4e00\u4e2aRunge\u73b0\u8c61:\u9ad8\u6b21\u591a\u9879\u5f0f\u7b49\u8ddd\u63d2\u503c\u5728\u8fb9\u7f18\u70b9\u51fa\u73b0\u8bef\u5dee\u65e0\u7a77\u5927\u7684\u60c5\u51b5. \u4e8b\u5b9e\u4e0a, Runge\u73b0\u8c61\u662f\u7531\u8bef\u5dee\u7d2f\u8ba1\u4f20\u64ad\u5bfc\u81f4, \u548cover-fitting\u662f\u4e0d\u4e00\u6837\u7684(\u8bf4\u5230\u8fd9\u91cc, \u5f53\u5e74\u505aRunge\u8fd9\u4e2atopic\u7684\u65f6\u5019\u8fd8\u5bf9\u6bd4\u4e86Fourier analysis\u91cc\u9762Gibbs\u73b0\u8c61)\nregularization : \u4e8b\u5b9e\u4e0a $L_1$norm\u662f\u52a0\u4e86\u4e00\u4e2a\u62c9\u666e\u62c9\u65af\u5148\u9a8c, $L_2$\u52a0\u4e86\u4e00\u4e2a\u9ad8\u65af\u5148\u9a8c. \u540e\u9762\u5e94\u8be5\u4f1a\u6709\u63a8\u5bfc.\nshrinkage : \u8fd9\u4e2ashrinkage\u548cStein's Pheonomenon\u7684\u5e94\u8be5\u662f\u4e00\u4e2a\u5427?\u9ad8\u7ef4\u60c5\u5f62\u4e0b,  regularization\u5bfc\u81f4\u4f30\u8ba1\u91cf\u7684shrinkage, \u8fdb\u800c\u5bfc\u81f4variance\u7684\u51cf\u5c0f, \u8865\u507f\u4e86bias,  \u4ece\u800c\u4f7f\u5f97\u6cdb\u5316\u8bef\u5dee\u7684\u51cf\u5c0f.\n\n\n\n\u4fe1\u606f\u8bba\nentropy : $H[x]=-\\sum_x p(x)\\log_2p(x)$\nKL divergence : $KL(p||q) = -\\int p(x) \\ln \\{\\frac{q(x)}{p(x)}\\}$ \ndivergence\u8fd9\u65b9\u9762, KL JSD\u90fd\u6709\u4e00\u4e9b\u4e0d\u597d\u7684\u6027\u8d28.\n\nexercise\n\n\u76f4\u63a5(1.1)\u5e26\u5165(1.2)\u7136\u540e\u5206\u522b\u5bf9$\\omega_k$\u6c42\u5fae\u5206  &lt;\\br&gt;\n\u548c1\u4e00\u6837\u4f5c, $A$\u53d8\u4e3a$A+\\lambda I$.  \n\u53e4\u5178\u6982\u578b$p(P)=0.34$\n Bayes $p(g|J) = \\frac{p(J|g)p(g)}{p(J)} = 0.5$\n\u8fd9\u4e2a\u6211\u8bc1\u7684\u9ebb\u70e6\u4e86, \u7b54\u6848\u5199\u7684\u5f88\u597d, \u52a0\u4e2a$s$\u53d6$-1,1$\u5c31\u5b8c\u4e8b\u4e86, \u8fd8\u7ed9\u4e86\u4e2a\u5b9e\u4f8b, \u53ef\u4ee5\u770b\u770b  \n$E^2(f-Ef) = E(f^2 + E^2f -2f\\cdot Ef) $\u62c6\u51fa\u6765, \u6ce8\u610f$Ef$\u662f\u4e2aconstant  \n$x,y$\u72ec\u7acb, \u5373$p(x,y)=p(x)p(y)$  \n\u6309\u7167\u9898\u76ee\u6781\u5750\u6807\u4ee3\u6362\u5373\u53ef, \u6ce8\u610fJacobi\u9635\u522b\u5199\u9519, \u7b2c\u4e00\u904d\u5199\u9519\u4e86\u7b97\u51fa\u6765\u6211\u90fd\u60ca\u4e86\n\u8bb0\u5f97\u597d\u50cf\u662f\u5316\u4e3a\u6807\u51c6\u6b63\u6001\u5427? \u76f4\u63a5\u8df3\u8fc7\u4e86\n\u4e00\u7ef4\u60c5\u5f62\u76f4\u63a5\u5bfc, \u591a\u7ef4, \u5fd8\u4e86, \u7ffb\u8bfe\u672c\u770b\u4e86\u4e00\u904d\n\u548c6\u4e00\u6837, \u5199\u6210\u8fde\u7eed\u5f62\u5f0f\u62c6\u5f00\n\u5bfc\n\u8fd9\u91cc$E = E(x^2)\\_{n=m}\\cdot I_{nm} $+ $(1 - I_{nm})\\cdot E(x_n)E(x_m)$\n\u6c42\u671f\u671b,\u4f7f\u7528\u4e8c\u9636\u77e9\u7b49\u4e8e$\\mu^2+\\sigma^2$ \n$W = \\frac{W+W^T}{2} + \\frac{W-W^T}{2}$ \u4e00\u4e2a\u5bf9\u79f0\u4e00\u4e2a\u53cd\u79f0.\u7136\u540e\u5e26\u5165\u4e58\u5f00, \u53cd\u79f0\u9879\u62b5\u6d88. \u5bf9\u79f0\u9635\u7684\u53c2\u6570\u5c31\u662f\u4e0a\u4e09\u89d2\u6216\u8005\u4e0b\u4e09\u89d2.\n\n\n\n\u8fd9\u56db\u9053\u7167\u7740\u9898\u5e72\u505a\n$a\\sqrt D$, \u53ef\u4ee5\u7528\u5411\u91cf\u7a7a\u95f4\u4e2d\u70b9\u7684\u8ddd\u79bb\u7b97(\u867d\u7136\u662f\u5f88\u76f4\u89c9\u7684\u4e1c\u897f)\n\u8fd9\u4e2a\u6bd4\u8f83\u9ebb\u70e6 \u6709\u4e2a\u5730\u65b9\u6ca1\u60f3\u901a \u5148\u653e\u7740  \n$f(x) = \\sqrt {ax} - a, x>a$\n\u5bf9$y$, $\\arg\\min\\sum_k L_{kj}p(c_k|x) = \\arg\\min[1-p(c_j|k)]$, \u5c31\u662f\u53d6\u5f97$p(c_j|x)$\u6700\u5927\u7684$j$. (mathjax\u600e\u4e48\u6ca1\u6709argmax argmin\u7684\u7b26\u53f7, \u5f88\u8ff7)\n\u628a$p(C_k|x)$\u7528Bayes\u516c\u5f0f\u5199\u5f00, \u5c31\u5f97\u5230\u5148\u9a8c\u4e0eloss matrix\u7684\u5173\u7cfb\n\u5148\u6c42\u51fatotal loss, \u82e5\u5927\u4e8e$\\lambda$\u5c31\u9009\u62e9\u62d2\u7edd, \u5373\u770b$\\min_j \\sum_k L_{kj}p(C_j| x) \n\u6c42\u5bfc\u6709\u95ee\u9898\u7684\u8bdd, \u5c31\u628a$\\frac{\\partial E}{\\partial y(x)}$\u770b\u4f5c$\\frac{\\partial E}{y'\\partial x}$\n\n\n\n", "categories": [{"name": "Default", "slug": "Default", "permalink": "/category/Default/"}], "tags": [{"name": "PRML", "slug": "PRML", "permalink": "/tag/PRML/"}, {"name": "NOTES", "slug": "NOTES", "permalink": "/tag/NOTES/"}]}], "pages": [{"title": "\u5173\u4e8e", "date": "2017-06-28T17:26:00-00.00", "path": "/about/", "text": "\u8fd9\u91cc\u662f\u6211\u7684\u4e2a\u4eba\u535a\u5ba2\uff0c\u901a\u8fc7 GitHub \u7ba1\u7406\u4e0e\u6784\u5efa\u3002\nContact\nEmail: lishiyu.whu@gmail.com\n", "categories": [], "tags": []}]}